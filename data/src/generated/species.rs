// GENERATED CONTENT; DO NOT EDIT. See the `protean` crate.
#![allow(clippy::enum_variant_names)]
use crate::{FormData, NamesData, SpeciesData};
use common::Error;
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum Species {
    Bulbasaur(BulbasaurForm),
    Ivysaur(IvysaurForm),
    Venusaur(VenusaurForm),
    Charmander(CharmanderForm),
    Charmeleon(CharmeleonForm),
    Charizard(CharizardForm),
    Squirtle(SquirtleForm),
    Wartortle(WartortleForm),
    Blastoise(BlastoiseForm),
    Caterpie(CaterpieForm),
    Metapod(MetapodForm),
    Butterfree(ButterfreeForm),
    Weedle(WeedleForm),
    Kakuna(KakunaForm),
    Beedrill(BeedrillForm),
    Pidgey(PidgeyForm),
    Pidgeotto(PidgeottoForm),
    Pidgeot(PidgeotForm),
    Rattata(RattataForm),
    Raticate(RaticateForm),
    Spearow(SpearowForm),
    Fearow(FearowForm),
    Ekans(EkansForm),
    Arbok(ArbokForm),
    Pikachu(PikachuForm),
    Raichu(RaichuForm),
    Sandshrew(SandshrewForm),
    Sandslash(SandslashForm),
    NidoranFemale(NidoranFemaleForm),
    Nidorina(NidorinaForm),
    Nidoqueen(NidoqueenForm),
    NidoranMale(NidoranMaleForm),
    Nidorino(NidorinoForm),
    Nidoking(NidokingForm),
    Clefairy(ClefairyForm),
    Clefable(ClefableForm),
    Vulpix(VulpixForm),
    Ninetales(NinetalesForm),
    Jigglypuff(JigglypuffForm),
    Wigglytuff(WigglytuffForm),
    Zubat(ZubatForm),
    Golbat(GolbatForm),
    Oddish(OddishForm),
    Gloom(GloomForm),
    Vileplume(VileplumeForm),
    Paras(ParasForm),
    Parasect(ParasectForm),
    Venonat(VenonatForm),
    Venomoth(VenomothForm),
    Diglett(DiglettForm),
    Dugtrio(DugtrioForm),
    Meowth(MeowthForm),
    Persian(PersianForm),
    Psyduck(PsyduckForm),
    Golduck(GolduckForm),
    Mankey(MankeyForm),
    Primeape(PrimeapeForm),
    Growlithe(GrowlitheForm),
    Arcanine(ArcanineForm),
    Poliwag(PoliwagForm),
    Poliwhirl(PoliwhirlForm),
    Poliwrath(PoliwrathForm),
    Abra(AbraForm),
    Kadabra(KadabraForm),
    Alakazam(AlakazamForm),
    Machop(MachopForm),
    Machoke(MachokeForm),
    Machamp(MachampForm),
    Bellsprout(BellsproutForm),
    Weepinbell(WeepinbellForm),
    Victreebel(VictreebelForm),
    Tentacool(TentacoolForm),
    Tentacruel(TentacruelForm),
    Geodude(GeodudeForm),
    Graveler(GravelerForm),
    Golem(GolemForm),
    Ponyta(PonytaForm),
    Rapidash(RapidashForm),
    Slowpoke(SlowpokeForm),
    Slowbro(SlowbroForm),
    Magnemite(MagnemiteForm),
    Magneton(MagnetonForm),
    Farfetchd(FarfetchdForm),
    Doduo(DoduoForm),
    Dodrio(DodrioForm),
    Seel(SeelForm),
    Dewgong(DewgongForm),
    Grimer(GrimerForm),
    Muk(MukForm),
    Shellder(ShellderForm),
    Cloyster(CloysterForm),
    Gastly(GastlyForm),
    Haunter(HaunterForm),
    Gengar(GengarForm),
    Onix(OnixForm),
    Drowzee(DrowzeeForm),
    Hypno(HypnoForm),
    Krabby(KrabbyForm),
    Kingler(KinglerForm),
    Voltorb(VoltorbForm),
    Electrode(ElectrodeForm),
    Exeggcute(ExeggcuteForm),
    Exeggutor(ExeggutorForm),
    Cubone(CuboneForm),
    Marowak(MarowakForm),
    Hitmonlee(HitmonleeForm),
    Hitmonchan(HitmonchanForm),
    Lickitung(LickitungForm),
    Koffing(KoffingForm),
    Weezing(WeezingForm),
    Rhyhorn(RhyhornForm),
    Rhydon(RhydonForm),
    Chansey(ChanseyForm),
    Tangela(TangelaForm),
    Kangaskhan(KangaskhanForm),
    Horsea(HorseaForm),
    Seadra(SeadraForm),
    Goldeen(GoldeenForm),
    Seaking(SeakingForm),
    Staryu(StaryuForm),
    Starmie(StarmieForm),
    MrMime(MrMimeForm),
    Scyther(ScytherForm),
    Jynx(JynxForm),
    Electabuzz(ElectabuzzForm),
    Magmar(MagmarForm),
    Pinsir(PinsirForm),
    Tauros(TaurosForm),
    Magikarp(MagikarpForm),
    Gyarados(GyaradosForm),
    Lapras(LaprasForm),
    Ditto(DittoForm),
    Eevee(EeveeForm),
    Vaporeon(VaporeonForm),
    Jolteon(JolteonForm),
    Flareon(FlareonForm),
    Porygon(PorygonForm),
    Omanyte(OmanyteForm),
    Omastar(OmastarForm),
    Kabuto(KabutoForm),
    Kabutops(KabutopsForm),
    Aerodactyl(AerodactylForm),
    Snorlax(SnorlaxForm),
    Articuno(ArticunoForm),
    Zapdos(ZapdosForm),
    Moltres(MoltresForm),
    Dratini(DratiniForm),
    Dragonair(DragonairForm),
    Dragonite(DragoniteForm),
    Mewtwo(MewtwoForm),
    Mew(MewForm),
    Chikorita(ChikoritaForm),
    Bayleef(BayleefForm),
    Meganium(MeganiumForm),
    Cyndaquil(CyndaquilForm),
    Quilava(QuilavaForm),
    Typhlosion(TyphlosionForm),
    Totodile(TotodileForm),
    Croconaw(CroconawForm),
    Feraligatr(FeraligatrForm),
    Sentret(SentretForm),
    Furret(FurretForm),
    Hoothoot(HoothootForm),
    Noctowl(NoctowlForm),
    Ledyba(LedybaForm),
    Ledian(LedianForm),
    Spinarak(SpinarakForm),
    Ariados(AriadosForm),
    Crobat(CrobatForm),
    Chinchou(ChinchouForm),
    Lanturn(LanturnForm),
    Pichu(PichuForm),
    Cleffa(CleffaForm),
    Igglybuff(IgglybuffForm),
    Togepi(TogepiForm),
    Togetic(TogeticForm),
    Natu(NatuForm),
    Xatu(XatuForm),
    Mareep(MareepForm),
    Flaaffy(FlaaffyForm),
    Ampharos(AmpharosForm),
    Bellossom(BellossomForm),
    Marill(MarillForm),
    Azumarill(AzumarillForm),
    Sudowoodo(SudowoodoForm),
    Politoed(PolitoedForm),
    Hoppip(HoppipForm),
    Skiploom(SkiploomForm),
    Jumpluff(JumpluffForm),
    Aipom(AipomForm),
    Sunkern(SunkernForm),
    Sunflora(SunfloraForm),
    Yanma(YanmaForm),
    Wooper(WooperForm),
    Quagsire(QuagsireForm),
    Espeon(EspeonForm),
    Umbreon(UmbreonForm),
    Murkrow(MurkrowForm),
    Slowking(SlowkingForm),
    Misdreavus(MisdreavusForm),
    Unown(UnownForm),
    Wobbuffet(WobbuffetForm),
    Girafarig(GirafarigForm),
    Pineco(PinecoForm),
    Forretress(ForretressForm),
    Dunsparce(DunsparceForm),
    Gligar(GligarForm),
    Steelix(SteelixForm),
    Snubbull(SnubbullForm),
    Granbull(GranbullForm),
    Qwilfish(QwilfishForm),
    Scizor(ScizorForm),
    Shuckle(ShuckleForm),
    Heracross(HeracrossForm),
    Sneasel(SneaselForm),
    Teddiursa(TeddiursaForm),
    Ursaring(UrsaringForm),
    Slugma(SlugmaForm),
    Magcargo(MagcargoForm),
    Swinub(SwinubForm),
    Piloswine(PiloswineForm),
    Corsola(CorsolaForm),
    Remoraid(RemoraidForm),
    Octillery(OctilleryForm),
    Delibird(DelibirdForm),
    Mantine(MantineForm),
    Skarmory(SkarmoryForm),
    Houndour(HoundourForm),
    Houndoom(HoundoomForm),
    Kingdra(KingdraForm),
    Phanpy(PhanpyForm),
    Donphan(DonphanForm),
    Porygon2(Porygon2Form),
    Stantler(StantlerForm),
    Smeargle(SmeargleForm),
    Tyrogue(TyrogueForm),
    Hitmontop(HitmontopForm),
    Smoochum(SmoochumForm),
    Elekid(ElekidForm),
    Magby(MagbyForm),
    Miltank(MiltankForm),
    Blissey(BlisseyForm),
    Raikou(RaikouForm),
    Entei(EnteiForm),
    Suicune(SuicuneForm),
    Larvitar(LarvitarForm),
    Pupitar(PupitarForm),
    Tyranitar(TyranitarForm),
    Lugia(LugiaForm),
    HoOh(HoOhForm),
    Celebi(CelebiForm),
    Treecko(TreeckoForm),
    Grovyle(GrovyleForm),
    Sceptile(SceptileForm),
    Torchic(TorchicForm),
    Combusken(CombuskenForm),
    Blaziken(BlazikenForm),
    Mudkip(MudkipForm),
    Marshtomp(MarshtompForm),
    Swampert(SwampertForm),
    Poochyena(PoochyenaForm),
    Mightyena(MightyenaForm),
    Zigzagoon(ZigzagoonForm),
    Linoone(LinooneForm),
    Wurmple(WurmpleForm),
    Silcoon(SilcoonForm),
    Beautifly(BeautiflyForm),
    Cascoon(CascoonForm),
    Dustox(DustoxForm),
    Lotad(LotadForm),
    Lombre(LombreForm),
    Ludicolo(LudicoloForm),
    Seedot(SeedotForm),
    Nuzleaf(NuzleafForm),
    Shiftry(ShiftryForm),
    Taillow(TaillowForm),
    Swellow(SwellowForm),
    Wingull(WingullForm),
    Pelipper(PelipperForm),
    Ralts(RaltsForm),
    Kirlia(KirliaForm),
    Gardevoir(GardevoirForm),
    Surskit(SurskitForm),
    Masquerain(MasquerainForm),
    Shroomish(ShroomishForm),
    Breloom(BreloomForm),
    Slakoth(SlakothForm),
    Vigoroth(VigorothForm),
    Slaking(SlakingForm),
    Nincada(NincadaForm),
    Ninjask(NinjaskForm),
    Shedinja(ShedinjaForm),
    Whismur(WhismurForm),
    Loudred(LoudredForm),
    Exploud(ExploudForm),
    Makuhita(MakuhitaForm),
    Hariyama(HariyamaForm),
    Azurill(AzurillForm),
    Nosepass(NosepassForm),
    Skitty(SkittyForm),
    Delcatty(DelcattyForm),
    Sableye(SableyeForm),
    Mawile(MawileForm),
    Aron(AronForm),
    Lairon(LaironForm),
    Aggron(AggronForm),
    Meditite(MedititeForm),
    Medicham(MedichamForm),
    Electrike(ElectrikeForm),
    Manectric(ManectricForm),
    Plusle(PlusleForm),
    Minun(MinunForm),
    Volbeat(VolbeatForm),
    Illumise(IllumiseForm),
    Roselia(RoseliaForm),
    Gulpin(GulpinForm),
    Swalot(SwalotForm),
    Carvanha(CarvanhaForm),
    Sharpedo(SharpedoForm),
    Wailmer(WailmerForm),
    Wailord(WailordForm),
    Numel(NumelForm),
    Camerupt(CameruptForm),
    Torkoal(TorkoalForm),
    Spoink(SpoinkForm),
    Grumpig(GrumpigForm),
    Spinda(SpindaForm),
    Trapinch(TrapinchForm),
    Vibrava(VibravaForm),
    Flygon(FlygonForm),
    Cacnea(CacneaForm),
    Cacturne(CacturneForm),
    Swablu(SwabluForm),
    Altaria(AltariaForm),
    Zangoose(ZangooseForm),
    Seviper(SeviperForm),
    Lunatone(LunatoneForm),
    Solrock(SolrockForm),
    Barboach(BarboachForm),
    Whiscash(WhiscashForm),
    Corphish(CorphishForm),
    Crawdaunt(CrawdauntForm),
    Baltoy(BaltoyForm),
    Claydol(ClaydolForm),
    Lileep(LileepForm),
    Cradily(CradilyForm),
    Anorith(AnorithForm),
    Armaldo(ArmaldoForm),
    Feebas(FeebasForm),
    Milotic(MiloticForm),
    Castform(CastformForm),
    Kecleon(KecleonForm),
    Shuppet(ShuppetForm),
    Banette(BanetteForm),
    Duskull(DuskullForm),
    Dusclops(DusclopsForm),
    Tropius(TropiusForm),
    Chimecho(ChimechoForm),
    Absol(AbsolForm),
    Wynaut(WynautForm),
    Snorunt(SnoruntForm),
    Glalie(GlalieForm),
    Spheal(SphealForm),
    Sealeo(SealeoForm),
    Walrein(WalreinForm),
    Clamperl(ClamperlForm),
    Huntail(HuntailForm),
    Gorebyss(GorebyssForm),
    Relicanth(RelicanthForm),
    Luvdisc(LuvdiscForm),
    Bagon(BagonForm),
    Shelgon(ShelgonForm),
    Salamence(SalamenceForm),
    Beldum(BeldumForm),
    Metang(MetangForm),
    Metagross(MetagrossForm),
    Regirock(RegirockForm),
    Regice(RegiceForm),
    Registeel(RegisteelForm),
    Latias(LatiasForm),
    Latios(LatiosForm),
    Kyogre(KyogreForm),
    Groudon(GroudonForm),
    Rayquaza(RayquazaForm),
    Jirachi(JirachiForm),
    Deoxys(DeoxysForm),
    Turtwig(TurtwigForm),
    Grotle(GrotleForm),
    Torterra(TorterraForm),
    Chimchar(ChimcharForm),
    Monferno(MonfernoForm),
    Infernape(InfernapeForm),
    Piplup(PiplupForm),
    Prinplup(PrinplupForm),
    Empoleon(EmpoleonForm),
    Starly(StarlyForm),
    Staravia(StaraviaForm),
    Staraptor(StaraptorForm),
    Bidoof(BidoofForm),
    Bibarel(BibarelForm),
    Kricketot(KricketotForm),
    Kricketune(KricketuneForm),
    Shinx(ShinxForm),
    Luxio(LuxioForm),
    Luxray(LuxrayForm),
    Budew(BudewForm),
    Roserade(RoseradeForm),
    Cranidos(CranidosForm),
    Rampardos(RampardosForm),
    Shieldon(ShieldonForm),
    Bastiodon(BastiodonForm),
    Burmy(BurmyForm),
    Wormadam(WormadamForm),
    Mothim(MothimForm),
    Combee(CombeeForm),
    Vespiquen(VespiquenForm),
    Pachirisu(PachirisuForm),
    Buizel(BuizelForm),
    Floatzel(FloatzelForm),
    Cherubi(CherubiForm),
    Cherrim(CherrimForm),
    Shellos(ShellosForm),
    Gastrodon(GastrodonForm),
    Ambipom(AmbipomForm),
    Drifloon(DrifloonForm),
    Drifblim(DrifblimForm),
    Buneary(BunearyForm),
    Lopunny(LopunnyForm),
    Mismagius(MismagiusForm),
    Honchkrow(HonchkrowForm),
    Glameow(GlameowForm),
    Purugly(PuruglyForm),
    Chingling(ChinglingForm),
    Stunky(StunkyForm),
    Skuntank(SkuntankForm),
    Bronzor(BronzorForm),
    Bronzong(BronzongForm),
    Bonsly(BonslyForm),
    MimeJr(MimeJrForm),
    Happiny(HappinyForm),
    Chatot(ChatotForm),
    Spiritomb(SpiritombForm),
    Gible(GibleForm),
    Gabite(GabiteForm),
    Garchomp(GarchompForm),
    Munchlax(MunchlaxForm),
    Riolu(RioluForm),
    Lucario(LucarioForm),
    Hippopotas(HippopotasForm),
    Hippowdon(HippowdonForm),
    Skorupi(SkorupiForm),
    Drapion(DrapionForm),
    Croagunk(CroagunkForm),
    Toxicroak(ToxicroakForm),
    Carnivine(CarnivineForm),
    Finneon(FinneonForm),
    Lumineon(LumineonForm),
    Mantyke(MantykeForm),
    Snover(SnoverForm),
    Abomasnow(AbomasnowForm),
    Weavile(WeavileForm),
    Magnezone(MagnezoneForm),
    Lickilicky(LickilickyForm),
    Rhyperior(RhyperiorForm),
    Tangrowth(TangrowthForm),
    Electivire(ElectivireForm),
    Magmortar(MagmortarForm),
    Togekiss(TogekissForm),
    Yanmega(YanmegaForm),
    Leafeon(LeafeonForm),
    Glaceon(GlaceonForm),
    Gliscor(GliscorForm),
    Mamoswine(MamoswineForm),
    PorygonZ(PorygonZForm),
    Gallade(GalladeForm),
    Probopass(ProbopassForm),
    Dusknoir(DusknoirForm),
    Froslass(FroslassForm),
    Rotom(RotomForm),
    Uxie(UxieForm),
    Mesprit(MespritForm),
    Azelf(AzelfForm),
    Dialga(DialgaForm),
    Palkia(PalkiaForm),
    Heatran(HeatranForm),
    Regigigas(RegigigasForm),
    Giratina(GiratinaForm),
    Cresselia(CresseliaForm),
    Phione(PhioneForm),
    Manaphy(ManaphyForm),
    Darkrai(DarkraiForm),
    Shaymin(ShayminForm),
    Arceus(ArceusForm),
    Victini(VictiniForm),
    Snivy(SnivyForm),
    Servine(ServineForm),
    Serperior(SerperiorForm),
    Tepig(TepigForm),
    Pignite(PigniteForm),
    Emboar(EmboarForm),
    Oshawott(OshawottForm),
    Dewott(DewottForm),
    Samurott(SamurottForm),
    Patrat(PatratForm),
    Watchog(WatchogForm),
    Lillipup(LillipupForm),
    Herdier(HerdierForm),
    Stoutland(StoutlandForm),
    Purrloin(PurrloinForm),
    Liepard(LiepardForm),
    Pansage(PansageForm),
    Simisage(SimisageForm),
    Pansear(PansearForm),
    Simisear(SimisearForm),
    Panpour(PanpourForm),
    Simipour(SimipourForm),
    Munna(MunnaForm),
    Musharna(MusharnaForm),
    Pidove(PidoveForm),
    Tranquill(TranquillForm),
    Unfezant(UnfezantForm),
    Blitzle(BlitzleForm),
    Zebstrika(ZebstrikaForm),
    Roggenrola(RoggenrolaForm),
    Boldore(BoldoreForm),
    Gigalith(GigalithForm),
    Woobat(WoobatForm),
    Swoobat(SwoobatForm),
    Drilbur(DrilburForm),
    Excadrill(ExcadrillForm),
    Audino(AudinoForm),
    Timburr(TimburrForm),
    Gurdurr(GurdurrForm),
    Conkeldurr(ConkeldurrForm),
    Tympole(TympoleForm),
    Palpitoad(PalpitoadForm),
    Seismitoad(SeismitoadForm),
    Throh(ThrohForm),
    Sawk(SawkForm),
    Sewaddle(SewaddleForm),
    Swadloon(SwadloonForm),
    Leavanny(LeavannyForm),
    Venipede(VenipedeForm),
    Whirlipede(WhirlipedeForm),
    Scolipede(ScolipedeForm),
    Cottonee(CottoneeForm),
    Whimsicott(WhimsicottForm),
    Petilil(PetililForm),
    Lilligant(LilligantForm),
    Basculin(BasculinForm),
    Sandile(SandileForm),
    Krokorok(KrokorokForm),
    Krookodile(KrookodileForm),
    Darumaka(DarumakaForm),
    Darmanitan(DarmanitanForm),
    Maractus(MaractusForm),
    Dwebble(DwebbleForm),
    Crustle(CrustleForm),
    Scraggy(ScraggyForm),
    Scrafty(ScraftyForm),
    Sigilyph(SigilyphForm),
    Yamask(YamaskForm),
    Cofagrigus(CofagrigusForm),
    Tirtouga(TirtougaForm),
    Carracosta(CarracostaForm),
    Archen(ArchenForm),
    Archeops(ArcheopsForm),
    Trubbish(TrubbishForm),
    Garbodor(GarbodorForm),
    Zorua(ZoruaForm),
    Zoroark(ZoroarkForm),
    Minccino(MinccinoForm),
    Cinccino(CinccinoForm),
    Gothita(GothitaForm),
    Gothorita(GothoritaForm),
    Gothitelle(GothitelleForm),
    Solosis(SolosisForm),
    Duosion(DuosionForm),
    Reuniclus(ReuniclusForm),
    Ducklett(DucklettForm),
    Swanna(SwannaForm),
    Vanillite(VanilliteForm),
    Vanillish(VanillishForm),
    Vanilluxe(VanilluxeForm),
    Deerling(DeerlingForm),
    Sawsbuck(SawsbuckForm),
    Emolga(EmolgaForm),
    Karrablast(KarrablastForm),
    Escavalier(EscavalierForm),
    Foongus(FoongusForm),
    Amoonguss(AmoongussForm),
    Frillish(FrillishForm),
    Jellicent(JellicentForm),
    Alomomola(AlomomolaForm),
    Joltik(JoltikForm),
    Galvantula(GalvantulaForm),
    Ferroseed(FerroseedForm),
    Ferrothorn(FerrothornForm),
    Klink(KlinkForm),
    Klang(KlangForm),
    Klinklang(KlinklangForm),
    Tynamo(TynamoForm),
    Eelektrik(EelektrikForm),
    Eelektross(EelektrossForm),
    Elgyem(ElgyemForm),
    Beheeyem(BeheeyemForm),
    Litwick(LitwickForm),
    Lampent(LampentForm),
    Chandelure(ChandelureForm),
    Axew(AxewForm),
    Fraxure(FraxureForm),
    Haxorus(HaxorusForm),
    Cubchoo(CubchooForm),
    Beartic(BearticForm),
    Cryogonal(CryogonalForm),
    Shelmet(ShelmetForm),
    Accelgor(AccelgorForm),
    Stunfisk(StunfiskForm),
    Mienfoo(MienfooForm),
    Mienshao(MienshaoForm),
    Druddigon(DruddigonForm),
    Golett(GolettForm),
    Golurk(GolurkForm),
    Pawniard(PawniardForm),
    Bisharp(BisharpForm),
    Bouffalant(BouffalantForm),
    Rufflet(RuffletForm),
    Braviary(BraviaryForm),
    Vullaby(VullabyForm),
    Mandibuzz(MandibuzzForm),
    Heatmor(HeatmorForm),
    Durant(DurantForm),
    Deino(DeinoForm),
    Zweilous(ZweilousForm),
    Hydreigon(HydreigonForm),
    Larvesta(LarvestaForm),
    Volcarona(VolcaronaForm),
    Cobalion(CobalionForm),
    Terrakion(TerrakionForm),
    Virizion(VirizionForm),
    Tornadus(TornadusForm),
    Thundurus(ThundurusForm),
    Reshiram(ReshiramForm),
    Zekrom(ZekromForm),
    Landorus(LandorusForm),
    Kyurem(KyuremForm),
    Keldeo(KeldeoForm),
    Meloetta(MeloettaForm),
    Genesect(GenesectForm),
    Chespin(ChespinForm),
    Quilladin(QuilladinForm),
    Chesnaught(ChesnaughtForm),
    Fennekin(FennekinForm),
    Braixen(BraixenForm),
    Delphox(DelphoxForm),
    Froakie(FroakieForm),
    Frogadier(FrogadierForm),
    Greninja(GreninjaForm),
    Bunnelby(BunnelbyForm),
    Diggersby(DiggersbyForm),
    Fletchling(FletchlingForm),
    Fletchinder(FletchinderForm),
    Talonflame(TalonflameForm),
    Scatterbug(ScatterbugForm),
    Spewpa(SpewpaForm),
    Vivillon(VivillonForm),
    Litleo(LitleoForm),
    Pyroar(PyroarForm),
    Flabebe(FlabebeForm),
    Floette(FloetteForm),
    Florges(FlorgesForm),
    Skiddo(SkiddoForm),
    Gogoat(GogoatForm),
    Pancham(PanchamForm),
    Pangoro(PangoroForm),
    Furfrou(FurfrouForm),
    Espurr(EspurrForm),
    Meowstic(MeowsticForm),
    Honedge(HonedgeForm),
    Doublade(DoubladeForm),
    Aegislash(AegislashForm),
    Spritzee(SpritzeeForm),
    Aromatisse(AromatisseForm),
    Swirlix(SwirlixForm),
    Slurpuff(SlurpuffForm),
    Inkay(InkayForm),
    Malamar(MalamarForm),
    Binacle(BinacleForm),
    Barbaracle(BarbaracleForm),
    Skrelp(SkrelpForm),
    Dragalge(DragalgeForm),
    Clauncher(ClauncherForm),
    Clawitzer(ClawitzerForm),
    Helioptile(HelioptileForm),
    Heliolisk(HelioliskForm),
    Tyrunt(TyruntForm),
    Tyrantrum(TyrantrumForm),
    Amaura(AmauraForm),
    Aurorus(AurorusForm),
    Sylveon(SylveonForm),
    Hawlucha(HawluchaForm),
    Dedenne(DedenneForm),
    Carbink(CarbinkForm),
    Goomy(GoomyForm),
    Sliggoo(SliggooForm),
    Goodra(GoodraForm),
    Klefki(KlefkiForm),
    Phantump(PhantumpForm),
    Trevenant(TrevenantForm),
    Pumpkaboo(PumpkabooForm),
    Gourgeist(GourgeistForm),
    Bergmite(BergmiteForm),
    Avalugg(AvaluggForm),
    Noibat(NoibatForm),
    Noivern(NoivernForm),
    Xerneas(XerneasForm),
    Yveltal(YveltalForm),
    Zygarde(ZygardeForm),
    Diancie(DiancieForm),
    Hoopa(HoopaForm),
    Volcanion(VolcanionForm),
    Rowlet(RowletForm),
    Dartrix(DartrixForm),
    Decidueye(DecidueyeForm),
    Litten(LittenForm),
    Torracat(TorracatForm),
    Incineroar(IncineroarForm),
    Popplio(PopplioForm),
    Brionne(BrionneForm),
    Primarina(PrimarinaForm),
    Pikipek(PikipekForm),
    Trumbeak(TrumbeakForm),
    Toucannon(ToucannonForm),
    Yungoos(YungoosForm),
    Gumshoos(GumshoosForm),
    Grubbin(GrubbinForm),
    Charjabug(CharjabugForm),
    Vikavolt(VikavoltForm),
    Crabrawler(CrabrawlerForm),
    Crabominable(CrabominableForm),
    Oricorio(OricorioForm),
    Cutiefly(CutieflyForm),
    Ribombee(RibombeeForm),
    Rockruff(RockruffForm),
    Lycanroc(LycanrocForm),
    Wishiwashi(WishiwashiForm),
    Mareanie(MareanieForm),
    Toxapex(ToxapexForm),
    Mudbray(MudbrayForm),
    Mudsdale(MudsdaleForm),
    Dewpider(DewpiderForm),
    Araquanid(AraquanidForm),
    Fomantis(FomantisForm),
    Lurantis(LurantisForm),
    Morelull(MorelullForm),
    Shiinotic(ShiinoticForm),
    Salandit(SalanditForm),
    Salazzle(SalazzleForm),
    Stufful(StuffulForm),
    Bewear(BewearForm),
    Bounsweet(BounsweetForm),
    Steenee(SteeneeForm),
    Tsareena(TsareenaForm),
    Comfey(ComfeyForm),
    Oranguru(OranguruForm),
    Passimian(PassimianForm),
    Wimpod(WimpodForm),
    Golisopod(GolisopodForm),
    Sandygast(SandygastForm),
    Palossand(PalossandForm),
    Pyukumuku(PyukumukuForm),
    TypeNull(TypeNullForm),
    Silvally(SilvallyForm),
    Minior(MiniorForm),
    Komala(KomalaForm),
    Turtonator(TurtonatorForm),
    Togedemaru(TogedemaruForm),
    Mimikyu(MimikyuForm),
    Bruxish(BruxishForm),
    Drampa(DrampaForm),
    Dhelmise(DhelmiseForm),
    Jangmoo(JangmooForm),
    Hakamoo(HakamooForm),
    Kommoo(KommooForm),
    TapuKoko(TapuKokoForm),
    TapuLele(TapuLeleForm),
    TapuBulu(TapuBuluForm),
    TapuFini(TapuFiniForm),
    Cosmog(CosmogForm),
    Cosmoem(CosmoemForm),
    Solgaleo(SolgaleoForm),
    Lunala(LunalaForm),
    Nihilego(NihilegoForm),
    Buzzwole(BuzzwoleForm),
    Pheromosa(PheromosaForm),
    Xurkitree(XurkitreeForm),
    Celesteela(CelesteelaForm),
    Kartana(KartanaForm),
    Guzzlord(GuzzlordForm),
    Necrozma(NecrozmaForm),
    Magearna(MagearnaForm),
    Marshadow(MarshadowForm),
    Poipole(PoipoleForm),
    Naganadel(NaganadelForm),
    Stakataka(StakatakaForm),
    Blacephalon(BlacephalonForm),
    Zeraora(ZeraoraForm),
    Meltan(MeltanForm),
    Melmetal(MelmetalForm),
    Grookey(GrookeyForm),
    Thwackey(ThwackeyForm),
    Rillaboom(RillaboomForm),
    Scorbunny(ScorbunnyForm),
    Raboot(RabootForm),
    Cinderace(CinderaceForm),
    Sobble(SobbleForm),
    Drizzile(DrizzileForm),
    Inteleon(InteleonForm),
    Skwovet(SkwovetForm),
    Greedent(GreedentForm),
    Rookidee(RookideeForm),
    Corvisquire(CorvisquireForm),
    Corviknight(CorviknightForm),
    Blipbug(BlipbugForm),
    Dottler(DottlerForm),
    Orbeetle(OrbeetleForm),
    Nickit(NickitForm),
    Thievul(ThievulForm),
    Gossifleur(GossifleurForm),
    Eldegoss(EldegossForm),
    Wooloo(WoolooForm),
    Dubwool(DubwoolForm),
    Chewtle(ChewtleForm),
    Drednaw(DrednawForm),
    Yamper(YamperForm),
    Boltund(BoltundForm),
    Rolycoly(RolycolyForm),
    Carkol(CarkolForm),
    Coalossal(CoalossalForm),
    Applin(ApplinForm),
    Flapple(FlappleForm),
    Appletun(AppletunForm),
    Silicobra(SilicobraForm),
    Sandaconda(SandacondaForm),
    Cramorant(CramorantForm),
    Arrokuda(ArrokudaForm),
    Barraskewda(BarraskewdaForm),
    Toxel(ToxelForm),
    Toxtricity(ToxtricityForm),
    Sizzlipede(SizzlipedeForm),
    Centiskorch(CentiskorchForm),
    Clobbopus(ClobbopusForm),
    Grapploct(GrapploctForm),
    Sinistea(SinisteaForm),
    Polteageist(PolteageistForm),
    Hatenna(HatennaForm),
    Hattrem(HattremForm),
    Hatterene(HattereneForm),
    Impidimp(ImpidimpForm),
    Morgrem(MorgremForm),
    Grimmsnarl(GrimmsnarlForm),
    Obstagoon(ObstagoonForm),
    Perrserker(PerrserkerForm),
    Cursola(CursolaForm),
    Sirfetchd(SirfetchdForm),
    MrRime(MrRimeForm),
    Runerigus(RunerigusForm),
    Milcery(MilceryForm),
    Alcremie(AlcremieForm),
    Falinks(FalinksForm),
    Pincurchin(PincurchinForm),
    Snom(SnomForm),
    Frosmoth(FrosmothForm),
    Stonjourner(StonjournerForm),
    Eiscue(EiscueForm),
    Indeedee(IndeedeeForm),
    Morpeko(MorpekoForm),
    Cufant(CufantForm),
    Copperajah(CopperajahForm),
    Dracozolt(DracozoltForm),
    Arctozolt(ArctozoltForm),
    Dracovish(DracovishForm),
    Arctovish(ArctovishForm),
    Duraludon(DuraludonForm),
    Dreepy(DreepyForm),
    Drakloak(DrakloakForm),
    Dragapult(DragapultForm),
    Zacian(ZacianForm),
    Zamazenta(ZamazentaForm),
    Eternatus(EternatusForm),
    Kubfu(KubfuForm),
    Urshifu(UrshifuForm),
    Zarude(ZarudeForm),
    Regieleki(RegielekiForm),
    Regidrago(RegidragoForm),
    Glastrier(GlastrierForm),
    Spectrier(SpectrierForm),
    Calyrex(CalyrexForm),
    Wyrdeer(WyrdeerForm),
    Kleavor(KleavorForm),
    Ursaluna(UrsalunaForm),
    Basculegion(BasculegionForm),
    Sneasler(SneaslerForm),
    Overqwil(OverqwilForm),
    Enamorus(EnamorusForm),
    Sprigatito(SprigatitoForm),
    Floragato(FloragatoForm),
    Meowscarada(MeowscaradaForm),
    Fuecoco(FuecocoForm),
    Crocalor(CrocalorForm),
    Skeledirge(SkeledirgeForm),
    Quaxly(QuaxlyForm),
    Quaxwell(QuaxwellForm),
    Quaquaval(QuaquavalForm),
    Lechonk(LechonkForm),
    Oinkologne(OinkologneForm),
    Tarountula(TarountulaForm),
    Spidops(SpidopsForm),
    Nymble(NymbleForm),
    Lokix(LokixForm),
    Pawmi(PawmiForm),
    Pawmo(PawmoForm),
    Pawmot(PawmotForm),
    Tandemaus(TandemausForm),
    Maushold(MausholdForm),
    Fidough(FidoughForm),
    Dachsbun(DachsbunForm),
    Smoliv(SmolivForm),
    Dolliv(DollivForm),
    Arboliva(ArbolivaForm),
    Squawkabilly(SquawkabillyForm),
    Nacli(NacliForm),
    Naclstack(NaclstackForm),
    Garganacl(GarganaclForm),
    Charcadet(CharcadetForm),
    Armarouge(ArmarougeForm),
    Ceruledge(CeruledgeForm),
    Tadbulb(TadbulbForm),
    Bellibolt(BelliboltForm),
    Wattrel(WattrelForm),
    Kilowattrel(KilowattrelForm),
    Maschiff(MaschiffForm),
    Mabosstiff(MabosstiffForm),
    Shroodle(ShroodleForm),
    Grafaiai(GrafaiaiForm),
    Bramblin(BramblinForm),
    Brambleghast(BrambleghastForm),
    Toedscool(ToedscoolForm),
    Toedscruel(ToedscruelForm),
    Klawf(KlawfForm),
    Capsakid(CapsakidForm),
    Scovillain(ScovillainForm),
    Rellor(RellorForm),
    Rabsca(RabscaForm),
    Flittle(FlittleForm),
    Espathra(EspathraForm),
    Tinkatink(TinkatinkForm),
    Tinkatuff(TinkatuffForm),
    Tinkaton(TinkatonForm),
    Wiglett(WiglettForm),
    Wugtrio(WugtrioForm),
    Bombirdier(BombirdierForm),
    Finizen(FinizenForm),
    Palafin(PalafinForm),
    Varoom(VaroomForm),
    Revavroom(RevavroomForm),
    Cyclizar(CyclizarForm),
    Orthworm(OrthwormForm),
    Glimmet(GlimmetForm),
    Glimmora(GlimmoraForm),
    Greavard(GreavardForm),
    Houndstone(HoundstoneForm),
    Flamigo(FlamigoForm),
    Cetoddle(CetoddleForm),
    Cetitan(CetitanForm),
    Veluza(VeluzaForm),
    Dondozo(DondozoForm),
    Tatsugiri(TatsugiriForm),
    Annihilape(AnnihilapeForm),
    Clodsire(ClodsireForm),
    Farigiraf(FarigirafForm),
    Dudunsparce(DudunsparceForm),
    Kingambit(KingambitForm),
    GreatTusk(GreatTuskForm),
    ScreamTail(ScreamTailForm),
    BruteBonnet(BruteBonnetForm),
    FlutterMane(FlutterManeForm),
    SlitherWing(SlitherWingForm),
    SandyShocks(SandyShocksForm),
    IronTreads(IronTreadsForm),
    IronBundle(IronBundleForm),
    IronHands(IronHandsForm),
    IronJugulis(IronJugulisForm),
    IronMoth(IronMothForm),
    IronThorns(IronThornsForm),
    Frigibax(FrigibaxForm),
    Arctibax(ArctibaxForm),
    Baxcalibur(BaxcaliburForm),
    Gimmighoul(GimmighoulForm),
    Gholdengo(GholdengoForm),
    WoChien(WoChienForm),
    ChienPao(ChienPaoForm),
    TingLu(TingLuForm),
    ChiYu(ChiYuForm),
    RoaringMoon(RoaringMoonForm),
    IronValiant(IronValiantForm),
    Koraidon(KoraidonForm),
    Miraidon(MiraidonForm),
    WalkingWake(WalkingWakeForm),
    IronLeaves(IronLeavesForm),
    Dipplin(DipplinForm),
    Poltchageist(PoltchageistForm),
    Sinistcha(SinistchaForm),
    Okidogi(OkidogiForm),
    Munkidori(MunkidoriForm),
    Fezandipiti(FezandipitiForm),
    Ogerpon(OgerponForm),
}
impl Species {
    pub(crate) fn try_from_gen_1_species_id(idx: u8) -> Result<Self, Error> {
        let value = match idx {
            153 => Self::Bulbasaur(BulbasaurForm::Base),
            9 => Self::Ivysaur(IvysaurForm::Base),
            154 => Self::Venusaur(VenusaurForm::Base),
            176 => Self::Charmander(CharmanderForm::Base),
            178 => Self::Charmeleon(CharmeleonForm::Base),
            180 => Self::Charizard(CharizardForm::Base),
            177 => Self::Squirtle(SquirtleForm::Base),
            179 => Self::Wartortle(WartortleForm::Base),
            28 => Self::Blastoise(BlastoiseForm::Base),
            123 => Self::Caterpie(CaterpieForm::Base),
            124 => Self::Metapod(MetapodForm::Base),
            125 => Self::Butterfree(ButterfreeForm::Base),
            112 => Self::Weedle(WeedleForm::Base),
            113 => Self::Kakuna(KakunaForm::Base),
            114 => Self::Beedrill(BeedrillForm::Base),
            36 => Self::Pidgey(PidgeyForm::Base),
            150 => Self::Pidgeotto(PidgeottoForm::Base),
            151 => Self::Pidgeot(PidgeotForm::Base),
            165 => Self::Rattata(RattataForm::Base),
            166 => Self::Raticate(RaticateForm::Base),
            5 => Self::Spearow(SpearowForm::Base),
            35 => Self::Fearow(FearowForm::Base),
            108 => Self::Ekans(EkansForm::Base),
            45 => Self::Arbok(ArbokForm::Base),
            84 => Self::Pikachu(PikachuForm::Base),
            85 => Self::Raichu(RaichuForm::Base),
            96 => Self::Sandshrew(SandshrewForm::Base),
            97 => Self::Sandslash(SandslashForm::Base),
            15 => Self::NidoranFemale(NidoranFemaleForm::Base),
            168 => Self::Nidorina(NidorinaForm::Base),
            16 => Self::Nidoqueen(NidoqueenForm::Base),
            3 => Self::NidoranMale(NidoranMaleForm::Base),
            167 => Self::Nidorino(NidorinoForm::Base),
            7 => Self::Nidoking(NidokingForm::Base),
            4 => Self::Clefairy(ClefairyForm::Base),
            142 => Self::Clefable(ClefableForm::Base),
            82 => Self::Vulpix(VulpixForm::Base),
            83 => Self::Ninetales(NinetalesForm::Base),
            100 => Self::Jigglypuff(JigglypuffForm::Base),
            101 => Self::Wigglytuff(WigglytuffForm::Base),
            107 => Self::Zubat(ZubatForm::Base),
            130 => Self::Golbat(GolbatForm::Base),
            185 => Self::Oddish(OddishForm::Base),
            186 => Self::Gloom(GloomForm::Base),
            187 => Self::Vileplume(VileplumeForm::Base),
            109 => Self::Paras(ParasForm::Base),
            46 => Self::Parasect(ParasectForm::Base),
            65 => Self::Venonat(VenonatForm::Base),
            119 => Self::Venomoth(VenomothForm::Base),
            59 => Self::Diglett(DiglettForm::Base),
            118 => Self::Dugtrio(DugtrioForm::Base),
            77 => Self::Meowth(MeowthForm::Base),
            144 => Self::Persian(PersianForm::Base),
            47 => Self::Psyduck(PsyduckForm::Base),
            128 => Self::Golduck(GolduckForm::Base),
            57 => Self::Mankey(MankeyForm::Base),
            117 => Self::Primeape(PrimeapeForm::Base),
            33 => Self::Growlithe(GrowlitheForm::Base),
            20 => Self::Arcanine(ArcanineForm::Base),
            71 => Self::Poliwag(PoliwagForm::Base),
            110 => Self::Poliwhirl(PoliwhirlForm::Base),
            111 => Self::Poliwrath(PoliwrathForm::Base),
            148 => Self::Abra(AbraForm::Base),
            38 => Self::Kadabra(KadabraForm::Base),
            149 => Self::Alakazam(AlakazamForm::Base),
            106 => Self::Machop(MachopForm::Base),
            41 => Self::Machoke(MachokeForm::Base),
            126 => Self::Machamp(MachampForm::Base),
            188 => Self::Bellsprout(BellsproutForm::Base),
            189 => Self::Weepinbell(WeepinbellForm::Base),
            190 => Self::Victreebel(VictreebelForm::Base),
            24 => Self::Tentacool(TentacoolForm::Base),
            155 => Self::Tentacruel(TentacruelForm::Base),
            169 => Self::Geodude(GeodudeForm::Base),
            39 => Self::Graveler(GravelerForm::Base),
            49 => Self::Golem(GolemForm::Base),
            163 => Self::Ponyta(PonytaForm::Base),
            164 => Self::Rapidash(RapidashForm::Base),
            37 => Self::Slowpoke(SlowpokeForm::Base),
            8 => Self::Slowbro(SlowbroForm::Base),
            173 => Self::Magnemite(MagnemiteForm::Base),
            54 => Self::Magneton(MagnetonForm::Base),
            64 => Self::Farfetchd(FarfetchdForm::Base),
            70 => Self::Doduo(DoduoForm::Base),
            116 => Self::Dodrio(DodrioForm::Base),
            58 => Self::Seel(SeelForm::Base),
            120 => Self::Dewgong(DewgongForm::Base),
            13 => Self::Grimer(GrimerForm::Base),
            136 => Self::Muk(MukForm::Base),
            23 => Self::Shellder(ShellderForm::Base),
            139 => Self::Cloyster(CloysterForm::Base),
            25 => Self::Gastly(GastlyForm::Base),
            147 => Self::Haunter(HaunterForm::Base),
            14 => Self::Gengar(GengarForm::Base),
            34 => Self::Onix(OnixForm::Base),
            48 => Self::Drowzee(DrowzeeForm::Base),
            129 => Self::Hypno(HypnoForm::Base),
            78 => Self::Krabby(KrabbyForm::Base),
            138 => Self::Kingler(KinglerForm::Base),
            6 => Self::Voltorb(VoltorbForm::Base),
            141 => Self::Electrode(ElectrodeForm::Base),
            12 => Self::Exeggcute(ExeggcuteForm::Base),
            10 => Self::Exeggutor(ExeggutorForm::Base),
            17 => Self::Cubone(CuboneForm::Base),
            145 => Self::Marowak(MarowakForm::Base),
            43 => Self::Hitmonlee(HitmonleeForm::Base),
            44 => Self::Hitmonchan(HitmonchanForm::Base),
            11 => Self::Lickitung(LickitungForm::Base),
            55 => Self::Koffing(KoffingForm::Base),
            143 => Self::Weezing(WeezingForm::Base),
            18 => Self::Rhyhorn(RhyhornForm::Base),
            1 => Self::Rhydon(RhydonForm::Base),
            40 => Self::Chansey(ChanseyForm::Base),
            30 => Self::Tangela(TangelaForm::Base),
            2 => Self::Kangaskhan(KangaskhanForm::Base),
            92 => Self::Horsea(HorseaForm::Base),
            93 => Self::Seadra(SeadraForm::Base),
            157 => Self::Goldeen(GoldeenForm::Base),
            158 => Self::Seaking(SeakingForm::Base),
            27 => Self::Staryu(StaryuForm::Base),
            152 => Self::Starmie(StarmieForm::Base),
            42 => Self::MrMime(MrMimeForm::Base),
            26 => Self::Scyther(ScytherForm::Base),
            72 => Self::Jynx(JynxForm::Base),
            53 => Self::Electabuzz(ElectabuzzForm::Base),
            51 => Self::Magmar(MagmarForm::Base),
            29 => Self::Pinsir(PinsirForm::Base),
            60 => Self::Tauros(TaurosForm::Base),
            133 => Self::Magikarp(MagikarpForm::Base),
            22 => Self::Gyarados(GyaradosForm::Base),
            19 => Self::Lapras(LaprasForm::Base),
            76 => Self::Ditto(DittoForm::Base),
            102 => Self::Eevee(EeveeForm::Base),
            105 => Self::Vaporeon(VaporeonForm::Base),
            104 => Self::Jolteon(JolteonForm::Base),
            103 => Self::Flareon(FlareonForm::Base),
            170 => Self::Porygon(PorygonForm::Base),
            98 => Self::Omanyte(OmanyteForm::Base),
            99 => Self::Omastar(OmastarForm::Base),
            90 => Self::Kabuto(KabutoForm::Base),
            91 => Self::Kabutops(KabutopsForm::Base),
            171 => Self::Aerodactyl(AerodactylForm::Base),
            132 => Self::Snorlax(SnorlaxForm::Base),
            74 => Self::Articuno(ArticunoForm::Base),
            75 => Self::Zapdos(ZapdosForm::Base),
            73 => Self::Moltres(MoltresForm::Base),
            88 => Self::Dratini(DratiniForm::Base),
            89 => Self::Dragonair(DragonairForm::Base),
            66 => Self::Dragonite(DragoniteForm::Base),
            131 => Self::Mewtwo(MewtwoForm::Base),
            21 => Self::Mew(MewForm::Base),
            _ => return Err(Error::invalid_argument()),
        };
        Ok(value)
    }
    pub(crate) fn try_from_gen_2_species_and_form_id(
        species_idx: u8,
        form_idx: u8,
    ) -> Result<Self, Error> {
        let value = match (species_idx, form_idx) {
            (1, 0) => Self::Bulbasaur(BulbasaurForm::Base),
            (2, 0) => Self::Ivysaur(IvysaurForm::Base),
            (3, 0) => Self::Venusaur(VenusaurForm::Base),
            (4, 0) => Self::Charmander(CharmanderForm::Base),
            (5, 0) => Self::Charmeleon(CharmeleonForm::Base),
            (6, 0) => Self::Charizard(CharizardForm::Base),
            (7, 0) => Self::Squirtle(SquirtleForm::Base),
            (8, 0) => Self::Wartortle(WartortleForm::Base),
            (9, 0) => Self::Blastoise(BlastoiseForm::Base),
            (10, 0) => Self::Caterpie(CaterpieForm::Base),
            (11, 0) => Self::Metapod(MetapodForm::Base),
            (12, 0) => Self::Butterfree(ButterfreeForm::Base),
            (13, 0) => Self::Weedle(WeedleForm::Base),
            (14, 0) => Self::Kakuna(KakunaForm::Base),
            (15, 0) => Self::Beedrill(BeedrillForm::Base),
            (16, 0) => Self::Pidgey(PidgeyForm::Base),
            (17, 0) => Self::Pidgeotto(PidgeottoForm::Base),
            (18, 0) => Self::Pidgeot(PidgeotForm::Base),
            (19, 0) => Self::Rattata(RattataForm::Base),
            (20, 0) => Self::Raticate(RaticateForm::Base),
            (21, 0) => Self::Spearow(SpearowForm::Base),
            (22, 0) => Self::Fearow(FearowForm::Base),
            (23, 0) => Self::Ekans(EkansForm::Base),
            (24, 0) => Self::Arbok(ArbokForm::Base),
            (25, 0) => Self::Pikachu(PikachuForm::Base),
            (26, 0) => Self::Raichu(RaichuForm::Base),
            (27, 0) => Self::Sandshrew(SandshrewForm::Base),
            (28, 0) => Self::Sandslash(SandslashForm::Base),
            (29, 0) => Self::NidoranFemale(NidoranFemaleForm::Base),
            (30, 0) => Self::Nidorina(NidorinaForm::Base),
            (31, 0) => Self::Nidoqueen(NidoqueenForm::Base),
            (32, 0) => Self::NidoranMale(NidoranMaleForm::Base),
            (33, 0) => Self::Nidorino(NidorinoForm::Base),
            (34, 0) => Self::Nidoking(NidokingForm::Base),
            (35, 0) => Self::Clefairy(ClefairyForm::Base),
            (36, 0) => Self::Clefable(ClefableForm::Base),
            (37, 0) => Self::Vulpix(VulpixForm::Base),
            (38, 0) => Self::Ninetales(NinetalesForm::Base),
            (39, 0) => Self::Jigglypuff(JigglypuffForm::Base),
            (40, 0) => Self::Wigglytuff(WigglytuffForm::Base),
            (41, 0) => Self::Zubat(ZubatForm::Base),
            (42, 0) => Self::Golbat(GolbatForm::Base),
            (43, 0) => Self::Oddish(OddishForm::Base),
            (44, 0) => Self::Gloom(GloomForm::Base),
            (45, 0) => Self::Vileplume(VileplumeForm::Base),
            (46, 0) => Self::Paras(ParasForm::Base),
            (47, 0) => Self::Parasect(ParasectForm::Base),
            (48, 0) => Self::Venonat(VenonatForm::Base),
            (49, 0) => Self::Venomoth(VenomothForm::Base),
            (50, 0) => Self::Diglett(DiglettForm::Base),
            (51, 0) => Self::Dugtrio(DugtrioForm::Base),
            (52, 0) => Self::Meowth(MeowthForm::Base),
            (53, 0) => Self::Persian(PersianForm::Base),
            (54, 0) => Self::Psyduck(PsyduckForm::Base),
            (55, 0) => Self::Golduck(GolduckForm::Base),
            (56, 0) => Self::Mankey(MankeyForm::Base),
            (57, 0) => Self::Primeape(PrimeapeForm::Base),
            (58, 0) => Self::Growlithe(GrowlitheForm::Base),
            (59, 0) => Self::Arcanine(ArcanineForm::Base),
            (60, 0) => Self::Poliwag(PoliwagForm::Base),
            (61, 0) => Self::Poliwhirl(PoliwhirlForm::Base),
            (62, 0) => Self::Poliwrath(PoliwrathForm::Base),
            (63, 0) => Self::Abra(AbraForm::Base),
            (64, 0) => Self::Kadabra(KadabraForm::Base),
            (65, 0) => Self::Alakazam(AlakazamForm::Base),
            (66, 0) => Self::Machop(MachopForm::Base),
            (67, 0) => Self::Machoke(MachokeForm::Base),
            (68, 0) => Self::Machamp(MachampForm::Base),
            (69, 0) => Self::Bellsprout(BellsproutForm::Base),
            (70, 0) => Self::Weepinbell(WeepinbellForm::Base),
            (71, 0) => Self::Victreebel(VictreebelForm::Base),
            (72, 0) => Self::Tentacool(TentacoolForm::Base),
            (73, 0) => Self::Tentacruel(TentacruelForm::Base),
            (74, 0) => Self::Geodude(GeodudeForm::Base),
            (75, 0) => Self::Graveler(GravelerForm::Base),
            (76, 0) => Self::Golem(GolemForm::Base),
            (77, 0) => Self::Ponyta(PonytaForm::Base),
            (78, 0) => Self::Rapidash(RapidashForm::Base),
            (79, 0) => Self::Slowpoke(SlowpokeForm::Base),
            (80, 0) => Self::Slowbro(SlowbroForm::Base),
            (81, 0) => Self::Magnemite(MagnemiteForm::Base),
            (82, 0) => Self::Magneton(MagnetonForm::Base),
            (83, 0) => Self::Farfetchd(FarfetchdForm::Base),
            (84, 0) => Self::Doduo(DoduoForm::Base),
            (85, 0) => Self::Dodrio(DodrioForm::Base),
            (86, 0) => Self::Seel(SeelForm::Base),
            (87, 0) => Self::Dewgong(DewgongForm::Base),
            (88, 0) => Self::Grimer(GrimerForm::Base),
            (89, 0) => Self::Muk(MukForm::Base),
            (90, 0) => Self::Shellder(ShellderForm::Base),
            (91, 0) => Self::Cloyster(CloysterForm::Base),
            (92, 0) => Self::Gastly(GastlyForm::Base),
            (93, 0) => Self::Haunter(HaunterForm::Base),
            (94, 0) => Self::Gengar(GengarForm::Base),
            (95, 0) => Self::Onix(OnixForm::Base),
            (96, 0) => Self::Drowzee(DrowzeeForm::Base),
            (97, 0) => Self::Hypno(HypnoForm::Base),
            (98, 0) => Self::Krabby(KrabbyForm::Base),
            (99, 0) => Self::Kingler(KinglerForm::Base),
            (100, 0) => Self::Voltorb(VoltorbForm::Base),
            (101, 0) => Self::Electrode(ElectrodeForm::Base),
            (102, 0) => Self::Exeggcute(ExeggcuteForm::Base),
            (103, 0) => Self::Exeggutor(ExeggutorForm::Base),
            (104, 0) => Self::Cubone(CuboneForm::Base),
            (105, 0) => Self::Marowak(MarowakForm::Base),
            (106, 0) => Self::Hitmonlee(HitmonleeForm::Base),
            (107, 0) => Self::Hitmonchan(HitmonchanForm::Base),
            (108, 0) => Self::Lickitung(LickitungForm::Base),
            (109, 0) => Self::Koffing(KoffingForm::Base),
            (110, 0) => Self::Weezing(WeezingForm::Base),
            (111, 0) => Self::Rhyhorn(RhyhornForm::Base),
            (112, 0) => Self::Rhydon(RhydonForm::Base),
            (113, 0) => Self::Chansey(ChanseyForm::Base),
            (114, 0) => Self::Tangela(TangelaForm::Base),
            (115, 0) => Self::Kangaskhan(KangaskhanForm::Base),
            (116, 0) => Self::Horsea(HorseaForm::Base),
            (117, 0) => Self::Seadra(SeadraForm::Base),
            (118, 0) => Self::Goldeen(GoldeenForm::Base),
            (119, 0) => Self::Seaking(SeakingForm::Base),
            (120, 0) => Self::Staryu(StaryuForm::Base),
            (121, 0) => Self::Starmie(StarmieForm::Base),
            (122, 0) => Self::MrMime(MrMimeForm::Base),
            (123, 0) => Self::Scyther(ScytherForm::Base),
            (124, 0) => Self::Jynx(JynxForm::Base),
            (125, 0) => Self::Electabuzz(ElectabuzzForm::Base),
            (126, 0) => Self::Magmar(MagmarForm::Base),
            (127, 0) => Self::Pinsir(PinsirForm::Base),
            (128, 0) => Self::Tauros(TaurosForm::Base),
            (129, 0) => Self::Magikarp(MagikarpForm::Base),
            (130, 0) => Self::Gyarados(GyaradosForm::Base),
            (131, 0) => Self::Lapras(LaprasForm::Base),
            (132, 0) => Self::Ditto(DittoForm::Base),
            (133, 0) => Self::Eevee(EeveeForm::Base),
            (134, 0) => Self::Vaporeon(VaporeonForm::Base),
            (135, 0) => Self::Jolteon(JolteonForm::Base),
            (136, 0) => Self::Flareon(FlareonForm::Base),
            (137, 0) => Self::Porygon(PorygonForm::Base),
            (138, 0) => Self::Omanyte(OmanyteForm::Base),
            (139, 0) => Self::Omastar(OmastarForm::Base),
            (140, 0) => Self::Kabuto(KabutoForm::Base),
            (141, 0) => Self::Kabutops(KabutopsForm::Base),
            (142, 0) => Self::Aerodactyl(AerodactylForm::Base),
            (143, 0) => Self::Snorlax(SnorlaxForm::Base),
            (144, 0) => Self::Articuno(ArticunoForm::Base),
            (145, 0) => Self::Zapdos(ZapdosForm::Base),
            (146, 0) => Self::Moltres(MoltresForm::Base),
            (147, 0) => Self::Dratini(DratiniForm::Base),
            (148, 0) => Self::Dragonair(DragonairForm::Base),
            (149, 0) => Self::Dragonite(DragoniteForm::Base),
            (150, 0) => Self::Mewtwo(MewtwoForm::Base),
            (151, 0) => Self::Mew(MewForm::Base),
            (152, 0) => Self::Chikorita(ChikoritaForm::Base),
            (153, 0) => Self::Bayleef(BayleefForm::Base),
            (154, 0) => Self::Meganium(MeganiumForm::Base),
            (155, 0) => Self::Cyndaquil(CyndaquilForm::Base),
            (156, 0) => Self::Quilava(QuilavaForm::Base),
            (157, 0) => Self::Typhlosion(TyphlosionForm::Base),
            (158, 0) => Self::Totodile(TotodileForm::Base),
            (159, 0) => Self::Croconaw(CroconawForm::Base),
            (160, 0) => Self::Feraligatr(FeraligatrForm::Base),
            (161, 0) => Self::Sentret(SentretForm::Base),
            (162, 0) => Self::Furret(FurretForm::Base),
            (163, 0) => Self::Hoothoot(HoothootForm::Base),
            (164, 0) => Self::Noctowl(NoctowlForm::Base),
            (165, 0) => Self::Ledyba(LedybaForm::Base),
            (166, 0) => Self::Ledian(LedianForm::Base),
            (167, 0) => Self::Spinarak(SpinarakForm::Base),
            (168, 0) => Self::Ariados(AriadosForm::Base),
            (169, 0) => Self::Crobat(CrobatForm::Base),
            (170, 0) => Self::Chinchou(ChinchouForm::Base),
            (171, 0) => Self::Lanturn(LanturnForm::Base),
            (172, 0) => Self::Pichu(PichuForm::Base),
            (173, 0) => Self::Cleffa(CleffaForm::Base),
            (174, 0) => Self::Igglybuff(IgglybuffForm::Base),
            (175, 0) => Self::Togepi(TogepiForm::Base),
            (176, 0) => Self::Togetic(TogeticForm::Base),
            (177, 0) => Self::Natu(NatuForm::Base),
            (178, 0) => Self::Xatu(XatuForm::Base),
            (179, 0) => Self::Mareep(MareepForm::Base),
            (180, 0) => Self::Flaaffy(FlaaffyForm::Base),
            (181, 0) => Self::Ampharos(AmpharosForm::Base),
            (182, 0) => Self::Bellossom(BellossomForm::Base),
            (183, 0) => Self::Marill(MarillForm::Base),
            (184, 0) => Self::Azumarill(AzumarillForm::Base),
            (185, 0) => Self::Sudowoodo(SudowoodoForm::Base),
            (186, 0) => Self::Politoed(PolitoedForm::Base),
            (187, 0) => Self::Hoppip(HoppipForm::Base),
            (188, 0) => Self::Skiploom(SkiploomForm::Base),
            (189, 0) => Self::Jumpluff(JumpluffForm::Base),
            (190, 0) => Self::Aipom(AipomForm::Base),
            (191, 0) => Self::Sunkern(SunkernForm::Base),
            (192, 0) => Self::Sunflora(SunfloraForm::Base),
            (193, 0) => Self::Yanma(YanmaForm::Base),
            (194, 0) => Self::Wooper(WooperForm::Base),
            (195, 0) => Self::Quagsire(QuagsireForm::Base),
            (196, 0) => Self::Espeon(EspeonForm::Base),
            (197, 0) => Self::Umbreon(UmbreonForm::Base),
            (198, 0) => Self::Murkrow(MurkrowForm::Base),
            (199, 0) => Self::Slowking(SlowkingForm::Base),
            (200, 0) => Self::Misdreavus(MisdreavusForm::Base),
            (201, 0) => Self::Unown(UnownForm::A),
            (201, 1) => Self::Unown(UnownForm::B),
            (201, 2) => Self::Unown(UnownForm::C),
            (201, 3) => Self::Unown(UnownForm::D),
            (201, 4) => Self::Unown(UnownForm::E),
            (201, 5) => Self::Unown(UnownForm::F),
            (201, 6) => Self::Unown(UnownForm::G),
            (201, 7) => Self::Unown(UnownForm::H),
            (201, 8) => Self::Unown(UnownForm::I),
            (201, 9) => Self::Unown(UnownForm::J),
            (201, 10) => Self::Unown(UnownForm::K),
            (201, 11) => Self::Unown(UnownForm::L),
            (201, 12) => Self::Unown(UnownForm::M),
            (201, 13) => Self::Unown(UnownForm::N),
            (201, 14) => Self::Unown(UnownForm::O),
            (201, 15) => Self::Unown(UnownForm::P),
            (201, 16) => Self::Unown(UnownForm::Q),
            (201, 17) => Self::Unown(UnownForm::R),
            (201, 18) => Self::Unown(UnownForm::S),
            (201, 19) => Self::Unown(UnownForm::T),
            (201, 20) => Self::Unown(UnownForm::U),
            (201, 21) => Self::Unown(UnownForm::V),
            (201, 22) => Self::Unown(UnownForm::W),
            (201, 23) => Self::Unown(UnownForm::X),
            (201, 24) => Self::Unown(UnownForm::Y),
            (201, 25) => Self::Unown(UnownForm::Z),
            (202, 0) => Self::Wobbuffet(WobbuffetForm::Base),
            (203, 0) => Self::Girafarig(GirafarigForm::Base),
            (204, 0) => Self::Pineco(PinecoForm::Base),
            (205, 0) => Self::Forretress(ForretressForm::Base),
            (206, 0) => Self::Dunsparce(DunsparceForm::Base),
            (207, 0) => Self::Gligar(GligarForm::Base),
            (208, 0) => Self::Steelix(SteelixForm::Base),
            (209, 0) => Self::Snubbull(SnubbullForm::Base),
            (210, 0) => Self::Granbull(GranbullForm::Base),
            (211, 0) => Self::Qwilfish(QwilfishForm::Base),
            (212, 0) => Self::Scizor(ScizorForm::Base),
            (213, 0) => Self::Shuckle(ShuckleForm::Base),
            (214, 0) => Self::Heracross(HeracrossForm::Base),
            (215, 0) => Self::Sneasel(SneaselForm::Base),
            (216, 0) => Self::Teddiursa(TeddiursaForm::Base),
            (217, 0) => Self::Ursaring(UrsaringForm::Base),
            (218, 0) => Self::Slugma(SlugmaForm::Base),
            (219, 0) => Self::Magcargo(MagcargoForm::Base),
            (220, 0) => Self::Swinub(SwinubForm::Base),
            (221, 0) => Self::Piloswine(PiloswineForm::Base),
            (222, 0) => Self::Corsola(CorsolaForm::Base),
            (223, 0) => Self::Remoraid(RemoraidForm::Base),
            (224, 0) => Self::Octillery(OctilleryForm::Base),
            (225, 0) => Self::Delibird(DelibirdForm::Base),
            (226, 0) => Self::Mantine(MantineForm::Base),
            (227, 0) => Self::Skarmory(SkarmoryForm::Base),
            (228, 0) => Self::Houndour(HoundourForm::Base),
            (229, 0) => Self::Houndoom(HoundoomForm::Base),
            (230, 0) => Self::Kingdra(KingdraForm::Base),
            (231, 0) => Self::Phanpy(PhanpyForm::Base),
            (232, 0) => Self::Donphan(DonphanForm::Base),
            (233, 0) => Self::Porygon2(Porygon2Form::Base),
            (234, 0) => Self::Stantler(StantlerForm::Base),
            (235, 0) => Self::Smeargle(SmeargleForm::Base),
            (236, 0) => Self::Tyrogue(TyrogueForm::Base),
            (237, 0) => Self::Hitmontop(HitmontopForm::Base),
            (238, 0) => Self::Smoochum(SmoochumForm::Base),
            (239, 0) => Self::Elekid(ElekidForm::Base),
            (240, 0) => Self::Magby(MagbyForm::Base),
            (241, 0) => Self::Miltank(MiltankForm::Base),
            (242, 0) => Self::Blissey(BlisseyForm::Base),
            (243, 0) => Self::Raikou(RaikouForm::Base),
            (244, 0) => Self::Entei(EnteiForm::Base),
            (245, 0) => Self::Suicune(SuicuneForm::Base),
            (246, 0) => Self::Larvitar(LarvitarForm::Base),
            (247, 0) => Self::Pupitar(PupitarForm::Base),
            (248, 0) => Self::Tyranitar(TyranitarForm::Base),
            (249, 0) => Self::Lugia(LugiaForm::Base),
            (250, 0) => Self::HoOh(HoOhForm::Base),
            (251, 0) => Self::Celebi(CelebiForm::Base),
            _ => return Err(Error::invalid_argument()),
        };
        Ok(value)
    }
    pub(crate) fn species_data(&self) -> &'static SpeciesData {
        match self {
            Self::Bulbasaur(_) => &SpeciesData {
                national_dex_id: 1,
                names: NamesData {
                    names: [
                        "フシギダネ",
                        "Bulbasaur",
                        "Bulbizarre",
                        "Bulbasaur",
                        "Bisasam",
                        "Bulbasaur",
                        "이상해씨",
                        "妙蛙种子",
                        "妙蛙種子",
                    ],
                },
            },
            Self::Ivysaur(_) => &SpeciesData {
                national_dex_id: 2,
                names: NamesData {
                    names: [
                        "フシギソウ",
                        "Ivysaur",
                        "Herbizarre",
                        "Ivysaur",
                        "Bisaknosp",
                        "Ivysaur",
                        "이상해풀",
                        "妙蛙草",
                        "妙蛙草",
                    ],
                },
            },
            Self::Venusaur(_) => &SpeciesData {
                national_dex_id: 3,
                names: NamesData {
                    names: [
                        "フシギバナ",
                        "Venusaur",
                        "Florizarre",
                        "Venusaur",
                        "Bisaflor",
                        "Venusaur",
                        "이상해꽃",
                        "妙蛙花",
                        "妙蛙花",
                    ],
                },
            },
            Self::Charmander(_) => &SpeciesData {
                national_dex_id: 4,
                names: NamesData {
                    names: [
                        "ヒトカゲ",
                        "Charmander",
                        "Salamèche",
                        "Charmander",
                        "Glumanda",
                        "Charmander",
                        "파이리",
                        "小火龙",
                        "小火龍",
                    ],
                },
            },
            Self::Charmeleon(_) => &SpeciesData {
                national_dex_id: 5,
                names: NamesData {
                    names: [
                        "リザード",
                        "Charmeleon",
                        "Reptincel",
                        "Charmeleon",
                        "Glutexo",
                        "Charmeleon",
                        "리자드",
                        "火恐龙",
                        "火恐龍",
                    ],
                },
            },
            Self::Charizard(_) => &SpeciesData {
                national_dex_id: 6,
                names: NamesData {
                    names: [
                        "リザードン",
                        "Charizard",
                        "Dracaufeu",
                        "Charizard",
                        "Glurak",
                        "Charizard",
                        "리자몽",
                        "喷火龙",
                        "噴火龍",
                    ],
                },
            },
            Self::Squirtle(_) => &SpeciesData {
                national_dex_id: 7,
                names: NamesData {
                    names: [
                        "ゼニガメ",
                        "Squirtle",
                        "Carapuce",
                        "Squirtle",
                        "Schiggy",
                        "Squirtle",
                        "꼬부기",
                        "杰尼龟",
                        "傑尼龜",
                    ],
                },
            },
            Self::Wartortle(_) => &SpeciesData {
                national_dex_id: 8,
                names: NamesData {
                    names: [
                        "カメール",
                        "Wartortle",
                        "Carabaffe",
                        "Wartortle",
                        "Schillok",
                        "Wartortle",
                        "어니부기",
                        "卡咪龟",
                        "卡咪龜",
                    ],
                },
            },
            Self::Blastoise(_) => &SpeciesData {
                national_dex_id: 9,
                names: NamesData {
                    names: [
                        "カメックス",
                        "Blastoise",
                        "Tortank",
                        "Blastoise",
                        "Turtok",
                        "Blastoise",
                        "거북왕",
                        "水箭龟",
                        "水箭龜",
                    ],
                },
            },
            Self::Caterpie(_) => &SpeciesData {
                national_dex_id: 10,
                names: NamesData {
                    names: [
                        "キャタピー",
                        "Caterpie",
                        "Chenipan",
                        "Caterpie",
                        "Raupy",
                        "Caterpie",
                        "캐터피",
                        "绿毛虫",
                        "綠毛蟲",
                    ],
                },
            },
            Self::Metapod(_) => &SpeciesData {
                national_dex_id: 11,
                names: NamesData {
                    names: [
                        "トランセル",
                        "Metapod",
                        "Chrysacier",
                        "Metapod",
                        "Safcon",
                        "Metapod",
                        "단데기",
                        "铁甲蛹",
                        "鐵甲蛹",
                    ],
                },
            },
            Self::Butterfree(_) => &SpeciesData {
                national_dex_id: 12,
                names: NamesData {
                    names: [
                        "バタフリー",
                        "Butterfree",
                        "Papilusion",
                        "Butterfree",
                        "Smettbo",
                        "Butterfree",
                        "버터플",
                        "巴大蝶",
                        "巴大蝶",
                    ],
                },
            },
            Self::Weedle(_) => &SpeciesData {
                national_dex_id: 13,
                names: NamesData {
                    names: [
                        "ビードル",
                        "Weedle",
                        "Aspicot",
                        "Weedle",
                        "Hornliu",
                        "Weedle",
                        "뿔충이",
                        "独角虫",
                        "獨角蟲",
                    ],
                },
            },
            Self::Kakuna(_) => &SpeciesData {
                national_dex_id: 14,
                names: NamesData {
                    names: [
                        "コクーン",
                        "Kakuna",
                        "Coconfort",
                        "Kakuna",
                        "Kokuna",
                        "Kakuna",
                        "딱충이",
                        "铁壳蛹",
                        "鐵殼蛹",
                    ],
                },
            },
            Self::Beedrill(_) => &SpeciesData {
                national_dex_id: 15,
                names: NamesData {
                    names: [
                        "スピアー",
                        "Beedrill",
                        "Dardargnan",
                        "Beedrill",
                        "Bibor",
                        "Beedrill",
                        "독침붕",
                        "大针蜂",
                        "大針蜂",
                    ],
                },
            },
            Self::Pidgey(_) => &SpeciesData {
                national_dex_id: 16,
                names: NamesData {
                    names: [
                        "ポッポ",
                        "Pidgey",
                        "Roucool",
                        "Pidgey",
                        "Taubsi",
                        "Pidgey",
                        "구구",
                        "波波",
                        "波波",
                    ],
                },
            },
            Self::Pidgeotto(_) => &SpeciesData {
                national_dex_id: 17,
                names: NamesData {
                    names: [
                        "ピジョン",
                        "Pidgeotto",
                        "Roucoups",
                        "Pidgeotto",
                        "Tauboga",
                        "Pidgeotto",
                        "피죤",
                        "比比鸟",
                        "比比鳥",
                    ],
                },
            },
            Self::Pidgeot(_) => &SpeciesData {
                national_dex_id: 18,
                names: NamesData {
                    names: [
                        "ピジョット",
                        "Pidgeot",
                        "Roucarnage",
                        "Pidgeot",
                        "Tauboss",
                        "Pidgeot",
                        "피죤투",
                        "大比鸟",
                        "大比鳥",
                    ],
                },
            },
            Self::Rattata(_) => &SpeciesData {
                national_dex_id: 19,
                names: NamesData {
                    names: [
                        "コラッタ",
                        "Rattata",
                        "Rattata",
                        "Rattata",
                        "Rattfratz",
                        "Rattata",
                        "꼬렛",
                        "小拉达",
                        "小拉達",
                    ],
                },
            },
            Self::Raticate(_) => &SpeciesData {
                national_dex_id: 20,
                names: NamesData {
                    names: [
                        "ラッタ",
                        "Raticate",
                        "Rattatac",
                        "Raticate",
                        "Rattikarl",
                        "Raticate",
                        "레트라",
                        "拉达",
                        "拉達",
                    ],
                },
            },
            Self::Spearow(_) => &SpeciesData {
                national_dex_id: 21,
                names: NamesData {
                    names: [
                        "オニスズメ",
                        "Spearow",
                        "Piafabec",
                        "Spearow",
                        "Habitak",
                        "Spearow",
                        "깨비참",
                        "烈雀",
                        "烈雀",
                    ],
                },
            },
            Self::Fearow(_) => &SpeciesData {
                national_dex_id: 22,
                names: NamesData {
                    names: [
                        "オニドリル",
                        "Fearow",
                        "Rapasdepic",
                        "Fearow",
                        "Ibitak",
                        "Fearow",
                        "깨비드릴조",
                        "大嘴雀",
                        "大嘴雀",
                    ],
                },
            },
            Self::Ekans(_) => &SpeciesData {
                national_dex_id: 23,
                names: NamesData {
                    names: [
                        "アーボ",
                        "Ekans",
                        "Abo",
                        "Ekans",
                        "Rettan",
                        "Ekans",
                        "아보",
                        "阿柏蛇",
                        "阿柏蛇",
                    ],
                },
            },
            Self::Arbok(_) => &SpeciesData {
                national_dex_id: 24,
                names: NamesData {
                    names: [
                        "アーボック",
                        "Arbok",
                        "Arbok",
                        "Arbok",
                        "Arbok",
                        "Arbok",
                        "아보크",
                        "阿柏怪",
                        "阿柏怪",
                    ],
                },
            },
            Self::Pikachu(_) => &SpeciesData {
                national_dex_id: 25,
                names: NamesData {
                    names: [
                        "ピカチュウ",
                        "Pikachu",
                        "Pikachu",
                        "Pikachu",
                        "Pikachu",
                        "Pikachu",
                        "피카츄",
                        "皮卡丘",
                        "皮卡丘",
                    ],
                },
            },
            Self::Raichu(_) => &SpeciesData {
                national_dex_id: 26,
                names: NamesData {
                    names: [
                        "ライチュウ",
                        "Raichu",
                        "Raichu",
                        "Raichu",
                        "Raichu",
                        "Raichu",
                        "라이츄",
                        "雷丘",
                        "雷丘",
                    ],
                },
            },
            Self::Sandshrew(_) => &SpeciesData {
                national_dex_id: 27,
                names: NamesData {
                    names: [
                        "サンド",
                        "Sandshrew",
                        "Sabelette",
                        "Sandshrew",
                        "Sandan",
                        "Sandshrew",
                        "모래두지",
                        "穿山鼠",
                        "穿山鼠",
                    ],
                },
            },
            Self::Sandslash(_) => &SpeciesData {
                national_dex_id: 28,
                names: NamesData {
                    names: [
                        "サンドパン",
                        "Sandslash",
                        "Sablaireau",
                        "Sandslash",
                        "Sandamer",
                        "Sandslash",
                        "고지",
                        "穿山王",
                        "穿山王",
                    ],
                },
            },
            Self::NidoranFemale(_) => &SpeciesData {
                national_dex_id: 29,
                names: NamesData {
                    names: [
                        "ニドラン♀",
                        "Nidoran♀",
                        "Nidoran♀",
                        "Nidoran♀",
                        "Nidoran♀",
                        "Nidoran♀",
                        "니드런♀",
                        "尼多兰",
                        "尼多蘭",
                    ],
                },
            },
            Self::Nidorina(_) => &SpeciesData {
                national_dex_id: 30,
                names: NamesData {
                    names: [
                        "ニドリーナ",
                        "Nidorina",
                        "Nidorina",
                        "Nidorina",
                        "Nidorina",
                        "Nidorina",
                        "니드리나",
                        "尼多娜",
                        "尼多娜",
                    ],
                },
            },
            Self::Nidoqueen(_) => &SpeciesData {
                national_dex_id: 31,
                names: NamesData {
                    names: [
                        "ニドクイン",
                        "Nidoqueen",
                        "Nidoqueen",
                        "Nidoqueen",
                        "Nidoqueen",
                        "Nidoqueen",
                        "니드퀸",
                        "尼多后",
                        "尼多后",
                    ],
                },
            },
            Self::NidoranMale(_) => &SpeciesData {
                national_dex_id: 32,
                names: NamesData {
                    names: [
                        "ニドラン♂",
                        "Nidoran♂",
                        "Nidoran♂",
                        "Nidoran♂",
                        "Nidoran♂",
                        "Nidoran♂",
                        "니드런♂",
                        "尼多朗",
                        "尼多朗",
                    ],
                },
            },
            Self::Nidorino(_) => &SpeciesData {
                national_dex_id: 33,
                names: NamesData {
                    names: [
                        "ニドリーノ",
                        "Nidorino",
                        "Nidorino",
                        "Nidorino",
                        "Nidorino",
                        "Nidorino",
                        "니드리노",
                        "尼多力诺",
                        "尼多力諾",
                    ],
                },
            },
            Self::Nidoking(_) => &SpeciesData {
                national_dex_id: 34,
                names: NamesData {
                    names: [
                        "ニドキング",
                        "Nidoking",
                        "Nidoking",
                        "Nidoking",
                        "Nidoking",
                        "Nidoking",
                        "니드킹",
                        "尼多王",
                        "尼多王",
                    ],
                },
            },
            Self::Clefairy(_) => &SpeciesData {
                national_dex_id: 35,
                names: NamesData {
                    names: [
                        "ピッピ",
                        "Clefairy",
                        "Mélofée",
                        "Clefairy",
                        "Piepi",
                        "Clefairy",
                        "삐삐",
                        "皮皮",
                        "皮皮",
                    ],
                },
            },
            Self::Clefable(_) => &SpeciesData {
                national_dex_id: 36,
                names: NamesData {
                    names: [
                        "ピクシー",
                        "Clefable",
                        "Mélodelfe",
                        "Clefable",
                        "Pixi",
                        "Clefable",
                        "픽시",
                        "皮可西",
                        "皮可西",
                    ],
                },
            },
            Self::Vulpix(_) => &SpeciesData {
                national_dex_id: 37,
                names: NamesData {
                    names: [
                        "ロコン",
                        "Vulpix",
                        "Goupix",
                        "Vulpix",
                        "Vulpix",
                        "Vulpix",
                        "식스테일",
                        "六尾",
                        "六尾",
                    ],
                },
            },
            Self::Ninetales(_) => &SpeciesData {
                national_dex_id: 38,
                names: NamesData {
                    names: [
                        "キュウコン",
                        "Ninetales",
                        "Feunard",
                        "Ninetales",
                        "Vulnona",
                        "Ninetales",
                        "나인테일",
                        "九尾",
                        "九尾",
                    ],
                },
            },
            Self::Jigglypuff(_) => &SpeciesData {
                national_dex_id: 39,
                names: NamesData {
                    names: [
                        "プリン",
                        "Jigglypuff",
                        "Rondoudou",
                        "Jigglypuff",
                        "Pummeluff",
                        "Jigglypuff",
                        "푸린",
                        "胖丁",
                        "胖丁",
                    ],
                },
            },
            Self::Wigglytuff(_) => &SpeciesData {
                national_dex_id: 40,
                names: NamesData {
                    names: [
                        "プクリン",
                        "Wigglytuff",
                        "Grodoudou",
                        "Wigglytuff",
                        "Knuddeluff",
                        "Wigglytuff",
                        "푸크린",
                        "胖可丁",
                        "胖可丁",
                    ],
                },
            },
            Self::Zubat(_) => &SpeciesData {
                national_dex_id: 41,
                names: NamesData {
                    names: [
                        "ズバット",
                        "Zubat",
                        "Nosferapti",
                        "Zubat",
                        "Zubat",
                        "Zubat",
                        "주뱃",
                        "超音蝠",
                        "超音蝠",
                    ],
                },
            },
            Self::Golbat(_) => &SpeciesData {
                national_dex_id: 42,
                names: NamesData {
                    names: [
                        "ゴルバット",
                        "Golbat",
                        "Nosferalto",
                        "Golbat",
                        "Golbat",
                        "Golbat",
                        "골뱃",
                        "大嘴蝠",
                        "大嘴蝠",
                    ],
                },
            },
            Self::Oddish(_) => &SpeciesData {
                national_dex_id: 43,
                names: NamesData {
                    names: [
                        "ナゾノクサ",
                        "Oddish",
                        "Mystherbe",
                        "Oddish",
                        "Myrapla",
                        "Oddish",
                        "뚜벅쵸",
                        "走路草",
                        "走路草",
                    ],
                },
            },
            Self::Gloom(_) => &SpeciesData {
                national_dex_id: 44,
                names: NamesData {
                    names: [
                        "クサイハナ",
                        "Gloom",
                        "Ortide",
                        "Gloom",
                        "Duflor",
                        "Gloom",
                        "냄새꼬",
                        "臭臭花",
                        "臭臭花",
                    ],
                },
            },
            Self::Vileplume(_) => &SpeciesData {
                national_dex_id: 45,
                names: NamesData {
                    names: [
                        "ラフレシア",
                        "Vileplume",
                        "Rafflesia",
                        "Vileplume",
                        "Giflor",
                        "Vileplume",
                        "라플레시아",
                        "霸王花",
                        "霸王花",
                    ],
                },
            },
            Self::Paras(_) => &SpeciesData {
                national_dex_id: 46,
                names: NamesData {
                    names: [
                        "パラス",
                        "Paras",
                        "Paras",
                        "Paras",
                        "Paras",
                        "Paras",
                        "파라스",
                        "派拉斯",
                        "派拉斯",
                    ],
                },
            },
            Self::Parasect(_) => &SpeciesData {
                national_dex_id: 47,
                names: NamesData {
                    names: [
                        "パラセクト",
                        "Parasect",
                        "Parasect",
                        "Parasect",
                        "Parasek",
                        "Parasect",
                        "파라섹트",
                        "派拉斯特",
                        "派拉斯特",
                    ],
                },
            },
            Self::Venonat(_) => &SpeciesData {
                national_dex_id: 48,
                names: NamesData {
                    names: [
                        "コンパン",
                        "Venonat",
                        "Mimitoss",
                        "Venonat",
                        "Bluzuk",
                        "Venonat",
                        "콘팡",
                        "毛球",
                        "毛球",
                    ],
                },
            },
            Self::Venomoth(_) => &SpeciesData {
                national_dex_id: 49,
                names: NamesData {
                    names: [
                        "モルフォン",
                        "Venomoth",
                        "Aéromite",
                        "Venomoth",
                        "Omot",
                        "Venomoth",
                        "도나리",
                        "摩鲁蛾",
                        "摩魯蛾",
                    ],
                },
            },
            Self::Diglett(_) => &SpeciesData {
                national_dex_id: 50,
                names: NamesData {
                    names: [
                        "ディグダ",
                        "Diglett",
                        "Taupiqueur",
                        "Diglett",
                        "Digda",
                        "Diglett",
                        "디그다",
                        "地鼠",
                        "地鼠",
                    ],
                },
            },
            Self::Dugtrio(_) => &SpeciesData {
                national_dex_id: 51,
                names: NamesData {
                    names: [
                        "ダグトリオ",
                        "Dugtrio",
                        "Triopikeur",
                        "Dugtrio",
                        "Digdri",
                        "Dugtrio",
                        "닥트리오",
                        "三地鼠",
                        "三地鼠",
                    ],
                },
            },
            Self::Meowth(_) => &SpeciesData {
                national_dex_id: 52,
                names: NamesData {
                    names: [
                        "ニャース",
                        "Meowth",
                        "Miaouss",
                        "Meowth",
                        "Mauzi",
                        "Meowth",
                        "나옹",
                        "喵喵",
                        "喵喵",
                    ],
                },
            },
            Self::Persian(_) => &SpeciesData {
                national_dex_id: 53,
                names: NamesData {
                    names: [
                        "ペルシアン",
                        "Persian",
                        "Persian",
                        "Persian",
                        "Snobilikat",
                        "Persian",
                        "페르시온",
                        "猫老大",
                        "貓老大",
                    ],
                },
            },
            Self::Psyduck(_) => &SpeciesData {
                national_dex_id: 54,
                names: NamesData {
                    names: [
                        "コダック",
                        "Psyduck",
                        "Psykokwak",
                        "Psyduck",
                        "Enton",
                        "Psyduck",
                        "고라파덕",
                        "可达鸭",
                        "可達鴨",
                    ],
                },
            },
            Self::Golduck(_) => &SpeciesData {
                national_dex_id: 55,
                names: NamesData {
                    names: [
                        "ゴルダック",
                        "Golduck",
                        "Akwakwak",
                        "Golduck",
                        "Entoron",
                        "Golduck",
                        "골덕",
                        "哥达鸭",
                        "哥達鴨",
                    ],
                },
            },
            Self::Mankey(_) => &SpeciesData {
                national_dex_id: 56,
                names: NamesData {
                    names: [
                        "マンキー",
                        "Mankey",
                        "Férosinge",
                        "Mankey",
                        "Menki",
                        "Mankey",
                        "망키",
                        "猴怪",
                        "猴怪",
                    ],
                },
            },
            Self::Primeape(_) => &SpeciesData {
                national_dex_id: 57,
                names: NamesData {
                    names: [
                        "オコリザル",
                        "Primeape",
                        "Colossinge",
                        "Primeape",
                        "Rasaff",
                        "Primeape",
                        "성원숭",
                        "火暴猴",
                        "火爆猴",
                    ],
                },
            },
            Self::Growlithe(_) => &SpeciesData {
                national_dex_id: 58,
                names: NamesData {
                    names: [
                        "ガーディ",
                        "Growlithe",
                        "Caninos",
                        "Growlithe",
                        "Fukano",
                        "Growlithe",
                        "가디",
                        "卡蒂狗",
                        "卡蒂狗",
                    ],
                },
            },
            Self::Arcanine(_) => &SpeciesData {
                national_dex_id: 59,
                names: NamesData {
                    names: [
                        "ウインディ",
                        "Arcanine",
                        "Arcanin",
                        "Arcanine",
                        "Arkani",
                        "Arcanine",
                        "윈디",
                        "风速狗",
                        "風速狗",
                    ],
                },
            },
            Self::Poliwag(_) => &SpeciesData {
                national_dex_id: 60,
                names: NamesData {
                    names: [
                        "ニョロモ",
                        "Poliwag",
                        "Ptitard",
                        "Poliwag",
                        "Quapsel",
                        "Poliwag",
                        "발챙이",
                        "蚊香蝌蚪",
                        "蚊香蝌蚪",
                    ],
                },
            },
            Self::Poliwhirl(_) => &SpeciesData {
                national_dex_id: 61,
                names: NamesData {
                    names: [
                        "ニョロゾ",
                        "Poliwhirl",
                        "Têtarte",
                        "Poliwhirl",
                        "Quaputzi",
                        "Poliwhirl",
                        "슈륙챙이",
                        "蚊香君",
                        "蚊香君",
                    ],
                },
            },
            Self::Poliwrath(_) => &SpeciesData {
                national_dex_id: 62,
                names: NamesData {
                    names: [
                        "ニョロボン",
                        "Poliwrath",
                        "Tartard",
                        "Poliwrath",
                        "Quappo",
                        "Poliwrath",
                        "강챙이",
                        "蚊香泳士",
                        "蚊香泳士",
                    ],
                },
            },
            Self::Abra(_) => &SpeciesData {
                national_dex_id: 63,
                names: NamesData {
                    names: [
                        "ケーシィ",
                        "Abra",
                        "Abra",
                        "Abra",
                        "Abra",
                        "Abra",
                        "캐이시",
                        "凯西",
                        "凱西",
                    ],
                },
            },
            Self::Kadabra(_) => &SpeciesData {
                national_dex_id: 64,
                names: NamesData {
                    names: [
                        "ユンゲラー",
                        "Kadabra",
                        "Kadabra",
                        "Kadabra",
                        "Kadabra",
                        "Kadabra",
                        "윤겔라",
                        "勇基拉",
                        "勇基拉",
                    ],
                },
            },
            Self::Alakazam(_) => &SpeciesData {
                national_dex_id: 65,
                names: NamesData {
                    names: [
                        "フーディン",
                        "Alakazam",
                        "Alakazam",
                        "Alakazam",
                        "Simsala",
                        "Alakazam",
                        "후딘",
                        "胡地",
                        "胡地",
                    ],
                },
            },
            Self::Machop(_) => &SpeciesData {
                national_dex_id: 66,
                names: NamesData {
                    names: [
                        "ワンリキー",
                        "Machop",
                        "Machoc",
                        "Machop",
                        "Machollo",
                        "Machop",
                        "알통몬",
                        "腕力",
                        "腕力",
                    ],
                },
            },
            Self::Machoke(_) => &SpeciesData {
                national_dex_id: 67,
                names: NamesData {
                    names: [
                        "ゴーリキー",
                        "Machoke",
                        "Machopeur",
                        "Machoke",
                        "Maschock",
                        "Machoke",
                        "근육몬",
                        "豪力",
                        "豪力",
                    ],
                },
            },
            Self::Machamp(_) => &SpeciesData {
                national_dex_id: 68,
                names: NamesData {
                    names: [
                        "カイリキー",
                        "Machamp",
                        "Mackogneur",
                        "Machamp",
                        "Machomei",
                        "Machamp",
                        "괴력몬",
                        "怪力",
                        "怪力",
                    ],
                },
            },
            Self::Bellsprout(_) => &SpeciesData {
                national_dex_id: 69,
                names: NamesData {
                    names: [
                        "マダツボミ",
                        "Bellsprout",
                        "Chétiflor",
                        "Bellsprout",
                        "Knofensa",
                        "Bellsprout",
                        "모다피",
                        "喇叭芽",
                        "喇叭芽",
                    ],
                },
            },
            Self::Weepinbell(_) => &SpeciesData {
                national_dex_id: 70,
                names: NamesData {
                    names: [
                        "ウツドン",
                        "Weepinbell",
                        "Boustiflor",
                        "Weepinbell",
                        "Ultrigaria",
                        "Weepinbell",
                        "우츠동",
                        "口呆花",
                        "口呆花",
                    ],
                },
            },
            Self::Victreebel(_) => &SpeciesData {
                national_dex_id: 71,
                names: NamesData {
                    names: [
                        "ウツボット",
                        "Victreebel",
                        "Empiflor",
                        "Victreebel",
                        "Sarzenia",
                        "Victreebel",
                        "우츠보트",
                        "大食花",
                        "大食花",
                    ],
                },
            },
            Self::Tentacool(_) => &SpeciesData {
                national_dex_id: 72,
                names: NamesData {
                    names: [
                        "メノクラゲ",
                        "Tentacool",
                        "Tentacool",
                        "Tentacool",
                        "Tentacha",
                        "Tentacool",
                        "왕눈해",
                        "玛瑙水母",
                        "瑪瑙水母",
                    ],
                },
            },
            Self::Tentacruel(_) => &SpeciesData {
                national_dex_id: 73,
                names: NamesData {
                    names: [
                        "ドククラゲ",
                        "Tentacruel",
                        "Tentacruel",
                        "Tentacruel",
                        "Tentoxa",
                        "Tentacruel",
                        "독파리",
                        "毒刺水母",
                        "毒刺水母",
                    ],
                },
            },
            Self::Geodude(_) => &SpeciesData {
                national_dex_id: 74,
                names: NamesData {
                    names: [
                        "イシツブテ",
                        "Geodude",
                        "Racaillou",
                        "Geodude",
                        "Kleinstein",
                        "Geodude",
                        "꼬마돌",
                        "小拳石",
                        "小拳石",
                    ],
                },
            },
            Self::Graveler(_) => &SpeciesData {
                national_dex_id: 75,
                names: NamesData {
                    names: [
                        "ゴローン",
                        "Graveler",
                        "Gravalanch",
                        "Graveler",
                        "Georok",
                        "Graveler",
                        "데구리",
                        "隆隆石",
                        "隆隆石",
                    ],
                },
            },
            Self::Golem(_) => &SpeciesData {
                national_dex_id: 76,
                names: NamesData {
                    names: [
                        "ゴローニャ",
                        "Golem",
                        "Grolem",
                        "Golem",
                        "Geowaz",
                        "Golem",
                        "딱구리",
                        "隆隆岩",
                        "隆隆岩",
                    ],
                },
            },
            Self::Ponyta(_) => &SpeciesData {
                national_dex_id: 77,
                names: NamesData {
                    names: [
                        "ポニータ",
                        "Ponyta",
                        "Ponyta",
                        "Ponyta",
                        "Ponita",
                        "Ponyta",
                        "포니타",
                        "小火马",
                        "小火馬",
                    ],
                },
            },
            Self::Rapidash(_) => &SpeciesData {
                national_dex_id: 78,
                names: NamesData {
                    names: [
                        "ギャロップ",
                        "Rapidash",
                        "Galopa",
                        "Rapidash",
                        "Gallopa",
                        "Rapidash",
                        "날쌩마",
                        "烈焰马",
                        "烈焰馬",
                    ],
                },
            },
            Self::Slowpoke(_) => &SpeciesData {
                national_dex_id: 79,
                names: NamesData {
                    names: [
                        "ヤドン",
                        "Slowpoke",
                        "Ramoloss",
                        "Slowpoke",
                        "Flegmon",
                        "Slowpoke",
                        "야돈",
                        "呆呆兽",
                        "呆呆獸",
                    ],
                },
            },
            Self::Slowbro(_) => &SpeciesData {
                national_dex_id: 80,
                names: NamesData {
                    names: [
                        "ヤドラン",
                        "Slowbro",
                        "Flagadoss",
                        "Slowbro",
                        "Lahmus",
                        "Slowbro",
                        "야도란",
                        "呆壳兽",
                        "呆殼獸",
                    ],
                },
            },
            Self::Magnemite(_) => &SpeciesData {
                national_dex_id: 81,
                names: NamesData {
                    names: [
                        "コイル",
                        "Magnemite",
                        "Magnéti",
                        "Magnemite",
                        "Magnetilo",
                        "Magnemite",
                        "코일",
                        "小磁怪",
                        "小磁怪",
                    ],
                },
            },
            Self::Magneton(_) => &SpeciesData {
                national_dex_id: 82,
                names: NamesData {
                    names: [
                        "レアコイル",
                        "Magneton",
                        "Magnéton",
                        "Magneton",
                        "Magneton",
                        "Magneton",
                        "레어코일",
                        "三合一磁怪",
                        "三合一磁怪",
                    ],
                },
            },
            Self::Farfetchd(_) => &SpeciesData {
                national_dex_id: 83,
                names: NamesData {
                    names: [
                        "カモネギ",
                        "Farfetch’d",
                        "Canarticho",
                        "Farfetch’d",
                        "Porenta",
                        "Farfetch’d",
                        "파오리",
                        "大葱鸭",
                        "大蔥鴨",
                    ],
                },
            },
            Self::Doduo(_) => &SpeciesData {
                national_dex_id: 84,
                names: NamesData {
                    names: [
                        "ドードー",
                        "Doduo",
                        "Doduo",
                        "Doduo",
                        "Dodu",
                        "Doduo",
                        "두두",
                        "嘟嘟",
                        "嘟嘟",
                    ],
                },
            },
            Self::Dodrio(_) => &SpeciesData {
                national_dex_id: 85,
                names: NamesData {
                    names: [
                        "ドードリオ",
                        "Dodrio",
                        "Dodrio",
                        "Dodrio",
                        "Dodri",
                        "Dodrio",
                        "두트리오",
                        "嘟嘟利",
                        "嘟嘟利",
                    ],
                },
            },
            Self::Seel(_) => &SpeciesData {
                national_dex_id: 86,
                names: NamesData {
                    names: [
                        "パウワウ",
                        "Seel",
                        "Otaria",
                        "Seel",
                        "Jurob",
                        "Seel",
                        "쥬쥬",
                        "小海狮",
                        "小海獅",
                    ],
                },
            },
            Self::Dewgong(_) => &SpeciesData {
                national_dex_id: 87,
                names: NamesData {
                    names: [
                        "ジュゴン",
                        "Dewgong",
                        "Lamantine",
                        "Dewgong",
                        "Jugong",
                        "Dewgong",
                        "쥬레곤",
                        "白海狮",
                        "白海獅",
                    ],
                },
            },
            Self::Grimer(_) => &SpeciesData {
                national_dex_id: 88,
                names: NamesData {
                    names: [
                        "ベトベター",
                        "Grimer",
                        "Tadmorv",
                        "Grimer",
                        "Sleima",
                        "Grimer",
                        "질퍽이",
                        "臭泥",
                        "臭泥",
                    ],
                },
            },
            Self::Muk(_) => &SpeciesData {
                national_dex_id: 89,
                names: NamesData {
                    names: [
                        "ベトベトン",
                        "Muk",
                        "Grotadmorv",
                        "Muk",
                        "Sleimok",
                        "Muk",
                        "질뻐기",
                        "臭臭泥",
                        "臭臭泥",
                    ],
                },
            },
            Self::Shellder(_) => &SpeciesData {
                national_dex_id: 90,
                names: NamesData {
                    names: [
                        "シェルダー",
                        "Shellder",
                        "Kokiyas",
                        "Shellder",
                        "Muschas",
                        "Shellder",
                        "셀러",
                        "大舌贝",
                        "大舌貝",
                    ],
                },
            },
            Self::Cloyster(_) => &SpeciesData {
                national_dex_id: 91,
                names: NamesData {
                    names: [
                        "パルシェン",
                        "Cloyster",
                        "Crustabri",
                        "Cloyster",
                        "Austos",
                        "Cloyster",
                        "파르셀",
                        "刺甲贝",
                        "刺甲貝",
                    ],
                },
            },
            Self::Gastly(_) => &SpeciesData {
                national_dex_id: 92,
                names: NamesData {
                    names: [
                        "ゴース",
                        "Gastly",
                        "Fantominus",
                        "Gastly",
                        "Nebulak",
                        "Gastly",
                        "고오스",
                        "鬼斯",
                        "鬼斯",
                    ],
                },
            },
            Self::Haunter(_) => &SpeciesData {
                national_dex_id: 93,
                names: NamesData {
                    names: [
                        "ゴースト",
                        "Haunter",
                        "Spectrum",
                        "Haunter",
                        "Alpollo",
                        "Haunter",
                        "고우스트",
                        "鬼斯通",
                        "鬼斯通",
                    ],
                },
            },
            Self::Gengar(_) => &SpeciesData {
                national_dex_id: 94,
                names: NamesData {
                    names: [
                        "ゲンガー",
                        "Gengar",
                        "Ectoplasma",
                        "Gengar",
                        "Gengar",
                        "Gengar",
                        "팬텀",
                        "耿鬼",
                        "耿鬼",
                    ],
                },
            },
            Self::Onix(_) => &SpeciesData {
                national_dex_id: 95,
                names: NamesData {
                    names: [
                        "イワーク",
                        "Onix",
                        "Onix",
                        "Onix",
                        "Onix",
                        "Onix",
                        "롱스톤",
                        "大岩蛇",
                        "大岩蛇",
                    ],
                },
            },
            Self::Drowzee(_) => &SpeciesData {
                national_dex_id: 96,
                names: NamesData {
                    names: [
                        "スリープ",
                        "Drowzee",
                        "Soporifik",
                        "Drowzee",
                        "Traumato",
                        "Drowzee",
                        "슬리프",
                        "催眠貘",
                        "催眠貘",
                    ],
                },
            },
            Self::Hypno(_) => &SpeciesData {
                national_dex_id: 97,
                names: NamesData {
                    names: [
                        "スリーパー",
                        "Hypno",
                        "Hypnomade",
                        "Hypno",
                        "Hypno",
                        "Hypno",
                        "슬리퍼",
                        "引梦貘人",
                        "引夢貘人",
                    ],
                },
            },
            Self::Krabby(_) => &SpeciesData {
                national_dex_id: 98,
                names: NamesData {
                    names: [
                        "クラブ",
                        "Krabby",
                        "Krabby",
                        "Krabby",
                        "Krabby",
                        "Krabby",
                        "크랩",
                        "大钳蟹",
                        "大鉗蟹",
                    ],
                },
            },
            Self::Kingler(_) => &SpeciesData {
                national_dex_id: 99,
                names: NamesData {
                    names: [
                        "キングラー",
                        "Kingler",
                        "Krabboss",
                        "Kingler",
                        "Kingler",
                        "Kingler",
                        "킹크랩",
                        "巨钳蟹",
                        "巨鉗蟹",
                    ],
                },
            },
            Self::Voltorb(_) => &SpeciesData {
                national_dex_id: 100,
                names: NamesData {
                    names: [
                        "ビリリダマ",
                        "Voltorb",
                        "Voltorbe",
                        "Voltorb",
                        "Voltobal",
                        "Voltorb",
                        "찌리리공",
                        "霹雳电球",
                        "霹靂電球",
                    ],
                },
            },
            Self::Electrode(_) => &SpeciesData {
                national_dex_id: 101,
                names: NamesData {
                    names: [
                        "マルマイン",
                        "Electrode",
                        "Électrode",
                        "Electrode",
                        "Lektrobal",
                        "Electrode",
                        "붐볼",
                        "顽皮雷弹",
                        "頑皮雷彈",
                    ],
                },
            },
            Self::Exeggcute(_) => &SpeciesData {
                national_dex_id: 102,
                names: NamesData {
                    names: [
                        "タマタマ",
                        "Exeggcute",
                        "Noeunoeuf",
                        "Exeggcute",
                        "Owei",
                        "Exeggcute",
                        "아라리",
                        "蛋蛋",
                        "蛋蛋",
                    ],
                },
            },
            Self::Exeggutor(_) => &SpeciesData {
                national_dex_id: 103,
                names: NamesData {
                    names: [
                        "ナッシー",
                        "Exeggutor",
                        "Noadkoko",
                        "Exeggutor",
                        "Kokowei",
                        "Exeggutor",
                        "나시",
                        "椰蛋树",
                        "椰蛋樹",
                    ],
                },
            },
            Self::Cubone(_) => &SpeciesData {
                national_dex_id: 104,
                names: NamesData {
                    names: [
                        "カラカラ",
                        "Cubone",
                        "Osselait",
                        "Cubone",
                        "Tragosso",
                        "Cubone",
                        "탕구리",
                        "卡拉卡拉",
                        "卡拉卡拉",
                    ],
                },
            },
            Self::Marowak(_) => &SpeciesData {
                national_dex_id: 105,
                names: NamesData {
                    names: [
                        "ガラガラ",
                        "Marowak",
                        "Ossatueur",
                        "Marowak",
                        "Knogga",
                        "Marowak",
                        "텅구리",
                        "嘎啦嘎啦",
                        "嘎啦嘎啦",
                    ],
                },
            },
            Self::Hitmonlee(_) => &SpeciesData {
                national_dex_id: 106,
                names: NamesData {
                    names: [
                        "サワムラー",
                        "Hitmonlee",
                        "Kicklee",
                        "Hitmonlee",
                        "Kicklee",
                        "Hitmonlee",
                        "시라소몬",
                        "飞腿郎",
                        "飛腿郎",
                    ],
                },
            },
            Self::Hitmonchan(_) => &SpeciesData {
                national_dex_id: 107,
                names: NamesData {
                    names: [
                        "エビワラー",
                        "Hitmonchan",
                        "Tygnon",
                        "Hitmonchan",
                        "Nockchan",
                        "Hitmonchan",
                        "홍수몬",
                        "快拳郎",
                        "快拳郎",
                    ],
                },
            },
            Self::Lickitung(_) => &SpeciesData {
                national_dex_id: 108,
                names: NamesData {
                    names: [
                        "ベロリンガ",
                        "Lickitung",
                        "Excelangue",
                        "Lickitung",
                        "Schlurp",
                        "Lickitung",
                        "내루미",
                        "大舌头",
                        "大舌頭",
                    ],
                },
            },
            Self::Koffing(_) => &SpeciesData {
                national_dex_id: 109,
                names: NamesData {
                    names: [
                        "ドガース",
                        "Koffing",
                        "Smogo",
                        "Koffing",
                        "Smogon",
                        "Koffing",
                        "또가스",
                        "瓦斯弹",
                        "瓦斯彈",
                    ],
                },
            },
            Self::Weezing(_) => &SpeciesData {
                national_dex_id: 110,
                names: NamesData {
                    names: [
                        "マタドガス",
                        "Weezing",
                        "Smogogo",
                        "Weezing",
                        "Smogmog",
                        "Weezing",
                        "또도가스",
                        "双弹瓦斯",
                        "雙彈瓦斯",
                    ],
                },
            },
            Self::Rhyhorn(_) => &SpeciesData {
                national_dex_id: 111,
                names: NamesData {
                    names: [
                        "サイホーン",
                        "Rhyhorn",
                        "Rhinocorne",
                        "Rhyhorn",
                        "Rihorn",
                        "Rhyhorn",
                        "뿔카노",
                        "独角犀牛",
                        "獨角犀牛",
                    ],
                },
            },
            Self::Rhydon(_) => &SpeciesData {
                national_dex_id: 112,
                names: NamesData {
                    names: [
                        "サイドン",
                        "Rhydon",
                        "Rhinoféros",
                        "Rhydon",
                        "Rizeros",
                        "Rhydon",
                        "코뿌리",
                        "钻角犀兽",
                        "鑽角犀獸",
                    ],
                },
            },
            Self::Chansey(_) => &SpeciesData {
                national_dex_id: 113,
                names: NamesData {
                    names: [
                        "ラッキー",
                        "Chansey",
                        "Leveinard",
                        "Chansey",
                        "Chaneira",
                        "Chansey",
                        "럭키",
                        "吉利蛋",
                        "吉利蛋",
                    ],
                },
            },
            Self::Tangela(_) => &SpeciesData {
                national_dex_id: 114,
                names: NamesData {
                    names: [
                        "モンジャラ",
                        "Tangela",
                        "Saquedeneu",
                        "Tangela",
                        "Tangela",
                        "Tangela",
                        "덩쿠리",
                        "蔓藤怪",
                        "蔓藤怪",
                    ],
                },
            },
            Self::Kangaskhan(_) => &SpeciesData {
                national_dex_id: 115,
                names: NamesData {
                    names: [
                        "ガルーラ",
                        "Kangaskhan",
                        "Kangourex",
                        "Kangaskhan",
                        "Kangama",
                        "Kangaskhan",
                        "캥카",
                        "袋兽",
                        "袋獸",
                    ],
                },
            },
            Self::Horsea(_) => &SpeciesData {
                national_dex_id: 116,
                names: NamesData {
                    names: [
                        "タッツー",
                        "Horsea",
                        "Hypotrempe",
                        "Horsea",
                        "Seeper",
                        "Horsea",
                        "쏘드라",
                        "墨海马",
                        "墨海馬",
                    ],
                },
            },
            Self::Seadra(_) => &SpeciesData {
                national_dex_id: 117,
                names: NamesData {
                    names: [
                        "シードラ",
                        "Seadra",
                        "Hypocéan",
                        "Seadra",
                        "Seemon",
                        "Seadra",
                        "시드라",
                        "海刺龙",
                        "海刺龍",
                    ],
                },
            },
            Self::Goldeen(_) => &SpeciesData {
                national_dex_id: 118,
                names: NamesData {
                    names: [
                        "トサキント",
                        "Goldeen",
                        "Poissirène",
                        "Goldeen",
                        "Goldini",
                        "Goldeen",
                        "콘치",
                        "角金鱼",
                        "角金魚",
                    ],
                },
            },
            Self::Seaking(_) => &SpeciesData {
                national_dex_id: 119,
                names: NamesData {
                    names: [
                        "アズマオウ",
                        "Seaking",
                        "Poissoroy",
                        "Seaking",
                        "Golking",
                        "Seaking",
                        "왕콘치",
                        "金鱼王",
                        "金魚王",
                    ],
                },
            },
            Self::Staryu(_) => &SpeciesData {
                national_dex_id: 120,
                names: NamesData {
                    names: [
                        "ヒトデマン",
                        "Staryu",
                        "Stari",
                        "Staryu",
                        "Sterndu",
                        "Staryu",
                        "별가사리",
                        "海星星",
                        "海星星",
                    ],
                },
            },
            Self::Starmie(_) => &SpeciesData {
                national_dex_id: 121,
                names: NamesData {
                    names: [
                        "スターミー",
                        "Starmie",
                        "Staross",
                        "Starmie",
                        "Starmie",
                        "Starmie",
                        "아쿠스타",
                        "宝石海星",
                        "寶石海星",
                    ],
                },
            },
            Self::MrMime(_) => &SpeciesData {
                national_dex_id: 122,
                names: NamesData {
                    names: [
                        "バリヤード",
                        "Mr. Mime",
                        "M. Mime",
                        "Mr. Mime",
                        "Pantimos",
                        "Mr. Mime",
                        "마임맨",
                        "魔墙人偶",
                        "魔牆人偶",
                    ],
                },
            },
            Self::Scyther(_) => &SpeciesData {
                national_dex_id: 123,
                names: NamesData {
                    names: [
                        "ストライク",
                        "Scyther",
                        "Insécateur",
                        "Scyther",
                        "Sichlor",
                        "Scyther",
                        "스라크",
                        "飞天螳螂",
                        "飛天螳螂",
                    ],
                },
            },
            Self::Jynx(_) => &SpeciesData {
                national_dex_id: 124,
                names: NamesData {
                    names: [
                        "ルージュラ",
                        "Jynx",
                        "Lippoutou",
                        "Jynx",
                        "Rossana",
                        "Jynx",
                        "루주라",
                        "迷唇姐",
                        "迷唇姐",
                    ],
                },
            },
            Self::Electabuzz(_) => &SpeciesData {
                national_dex_id: 125,
                names: NamesData {
                    names: [
                        "エレブー",
                        "Electabuzz",
                        "Élektek",
                        "Electabuzz",
                        "Elektek",
                        "Electabuzz",
                        "에레브",
                        "电击兽",
                        "電擊獸",
                    ],
                },
            },
            Self::Magmar(_) => &SpeciesData {
                national_dex_id: 126,
                names: NamesData {
                    names: [
                        "ブーバー",
                        "Magmar",
                        "Magmar",
                        "Magmar",
                        "Magmar",
                        "Magmar",
                        "마그마",
                        "鸭嘴火兽",
                        "鴨嘴火獸",
                    ],
                },
            },
            Self::Pinsir(_) => &SpeciesData {
                national_dex_id: 127,
                names: NamesData {
                    names: [
                        "カイロス",
                        "Pinsir",
                        "Scarabrute",
                        "Pinsir",
                        "Pinsir",
                        "Pinsir",
                        "쁘사이저",
                        "凯罗斯",
                        "凱羅斯",
                    ],
                },
            },
            Self::Tauros(_) => &SpeciesData {
                national_dex_id: 128,
                names: NamesData {
                    names: [
                        "ケンタロス",
                        "Tauros",
                        "Tauros",
                        "Tauros",
                        "Tauros",
                        "Tauros",
                        "켄타로스",
                        "肯泰罗",
                        "肯泰羅",
                    ],
                },
            },
            Self::Magikarp(_) => &SpeciesData {
                national_dex_id: 129,
                names: NamesData {
                    names: [
                        "コイキング",
                        "Magikarp",
                        "Magicarpe",
                        "Magikarp",
                        "Karpador",
                        "Magikarp",
                        "잉어킹",
                        "鲤鱼王",
                        "鯉魚王",
                    ],
                },
            },
            Self::Gyarados(_) => &SpeciesData {
                national_dex_id: 130,
                names: NamesData {
                    names: [
                        "ギャラドス",
                        "Gyarados",
                        "Léviator",
                        "Gyarados",
                        "Garados",
                        "Gyarados",
                        "갸라도스",
                        "暴鲤龙",
                        "暴鯉龍",
                    ],
                },
            },
            Self::Lapras(_) => &SpeciesData {
                national_dex_id: 131,
                names: NamesData {
                    names: [
                        "ラプラス",
                        "Lapras",
                        "Lokhlass",
                        "Lapras",
                        "Lapras",
                        "Lapras",
                        "라프라스",
                        "拉普拉斯",
                        "拉普拉斯",
                    ],
                },
            },
            Self::Ditto(_) => &SpeciesData {
                national_dex_id: 132,
                names: NamesData {
                    names: [
                        "メタモン",
                        "Ditto",
                        "Métamorph",
                        "Ditto",
                        "Ditto",
                        "Ditto",
                        "메타몽",
                        "百变怪",
                        "百變怪",
                    ],
                },
            },
            Self::Eevee(_) => &SpeciesData {
                national_dex_id: 133,
                names: NamesData {
                    names: [
                        "イーブイ",
                        "Eevee",
                        "Évoli",
                        "Eevee",
                        "Evoli",
                        "Eevee",
                        "이브이",
                        "伊布",
                        "伊布",
                    ],
                },
            },
            Self::Vaporeon(_) => &SpeciesData {
                national_dex_id: 134,
                names: NamesData {
                    names: [
                        "シャワーズ",
                        "Vaporeon",
                        "Aquali",
                        "Vaporeon",
                        "Aquana",
                        "Vaporeon",
                        "샤미드",
                        "水伊布",
                        "水伊布",
                    ],
                },
            },
            Self::Jolteon(_) => &SpeciesData {
                national_dex_id: 135,
                names: NamesData {
                    names: [
                        "サンダース",
                        "Jolteon",
                        "Voltali",
                        "Jolteon",
                        "Blitza",
                        "Jolteon",
                        "쥬피썬더",
                        "雷伊布",
                        "雷伊布",
                    ],
                },
            },
            Self::Flareon(_) => &SpeciesData {
                national_dex_id: 136,
                names: NamesData {
                    names: [
                        "ブースター",
                        "Flareon",
                        "Pyroli",
                        "Flareon",
                        "Flamara",
                        "Flareon",
                        "부스터",
                        "火伊布",
                        "火伊布",
                    ],
                },
            },
            Self::Porygon(_) => &SpeciesData {
                national_dex_id: 137,
                names: NamesData {
                    names: [
                        "ポリゴン",
                        "Porygon",
                        "Porygon",
                        "Porygon",
                        "Porygon",
                        "Porygon",
                        "폴리곤",
                        "多边兽",
                        "多邊獸",
                    ],
                },
            },
            Self::Omanyte(_) => &SpeciesData {
                national_dex_id: 138,
                names: NamesData {
                    names: [
                        "オムナイト",
                        "Omanyte",
                        "Amonita",
                        "Omanyte",
                        "Amonitas",
                        "Omanyte",
                        "암나이트",
                        "菊石兽",
                        "菊石獸",
                    ],
                },
            },
            Self::Omastar(_) => &SpeciesData {
                national_dex_id: 139,
                names: NamesData {
                    names: [
                        "オムスター",
                        "Omastar",
                        "Amonistar",
                        "Omastar",
                        "Amoroso",
                        "Omastar",
                        "암스타",
                        "多刺菊石兽",
                        "多刺菊石獸",
                    ],
                },
            },
            Self::Kabuto(_) => &SpeciesData {
                national_dex_id: 140,
                names: NamesData {
                    names: [
                        "カブト",
                        "Kabuto",
                        "Kabuto",
                        "Kabuto",
                        "Kabuto",
                        "Kabuto",
                        "투구",
                        "化石盔",
                        "化石盔",
                    ],
                },
            },
            Self::Kabutops(_) => &SpeciesData {
                national_dex_id: 141,
                names: NamesData {
                    names: [
                        "カブトプス",
                        "Kabutops",
                        "Kabutops",
                        "Kabutops",
                        "Kabutops",
                        "Kabutops",
                        "투구푸스",
                        "镰刀盔",
                        "鐮刀盔",
                    ],
                },
            },
            Self::Aerodactyl(_) => &SpeciesData {
                national_dex_id: 142,
                names: NamesData {
                    names: [
                        "プテラ",
                        "Aerodactyl",
                        "Ptéra",
                        "Aerodactyl",
                        "Aerodactyl",
                        "Aerodactyl",
                        "프테라",
                        "化石翼龙",
                        "化石翼龍",
                    ],
                },
            },
            Self::Snorlax(_) => &SpeciesData {
                national_dex_id: 143,
                names: NamesData {
                    names: [
                        "カビゴン",
                        "Snorlax",
                        "Ronflex",
                        "Snorlax",
                        "Relaxo",
                        "Snorlax",
                        "잠만보",
                        "卡比兽",
                        "卡比獸",
                    ],
                },
            },
            Self::Articuno(_) => &SpeciesData {
                national_dex_id: 144,
                names: NamesData {
                    names: [
                        "フリーザー",
                        "Articuno",
                        "Artikodin",
                        "Articuno",
                        "Arktos",
                        "Articuno",
                        "프리져",
                        "急冻鸟",
                        "急凍鳥",
                    ],
                },
            },
            Self::Zapdos(_) => &SpeciesData {
                national_dex_id: 145,
                names: NamesData {
                    names: [
                        "サンダー",
                        "Zapdos",
                        "Électhor",
                        "Zapdos",
                        "Zapdos",
                        "Zapdos",
                        "썬더",
                        "闪电鸟",
                        "閃電鳥",
                    ],
                },
            },
            Self::Moltres(_) => &SpeciesData {
                national_dex_id: 146,
                names: NamesData {
                    names: [
                        "ファイヤー",
                        "Moltres",
                        "Sulfura",
                        "Moltres",
                        "Lavados",
                        "Moltres",
                        "파이어",
                        "火焰鸟",
                        "火焰鳥",
                    ],
                },
            },
            Self::Dratini(_) => &SpeciesData {
                national_dex_id: 147,
                names: NamesData {
                    names: [
                        "ミニリュウ",
                        "Dratini",
                        "Minidraco",
                        "Dratini",
                        "Dratini",
                        "Dratini",
                        "미뇽",
                        "迷你龙",
                        "迷你龍",
                    ],
                },
            },
            Self::Dragonair(_) => &SpeciesData {
                national_dex_id: 148,
                names: NamesData {
                    names: [
                        "ハクリュー",
                        "Dragonair",
                        "Draco",
                        "Dragonair",
                        "Dragonir",
                        "Dragonair",
                        "신뇽",
                        "哈克龙",
                        "哈克龍",
                    ],
                },
            },
            Self::Dragonite(_) => &SpeciesData {
                national_dex_id: 149,
                names: NamesData {
                    names: [
                        "カイリュー",
                        "Dragonite",
                        "Dracolosse",
                        "Dragonite",
                        "Dragoran",
                        "Dragonite",
                        "망나뇽",
                        "快龙",
                        "快龍",
                    ],
                },
            },
            Self::Mewtwo(_) => &SpeciesData {
                national_dex_id: 150,
                names: NamesData {
                    names: [
                        "ミュウツー",
                        "Mewtwo",
                        "Mewtwo",
                        "Mewtwo",
                        "Mewtu",
                        "Mewtwo",
                        "뮤츠",
                        "超梦",
                        "超夢",
                    ],
                },
            },
            Self::Mew(_) => &SpeciesData {
                national_dex_id: 151,
                names: NamesData {
                    names: [
                        "ミュウ",
                        "Mew",
                        "Mew",
                        "Mew",
                        "Mew",
                        "Mew",
                        "뮤",
                        "梦幻",
                        "夢幻",
                    ],
                },
            },
            Self::Chikorita(_) => &SpeciesData {
                national_dex_id: 152,
                names: NamesData {
                    names: [
                        "チコリータ",
                        "Chikorita",
                        "Germignon",
                        "Chikorita",
                        "Endivie",
                        "Chikorita",
                        "치코리타",
                        "菊草叶",
                        "菊草葉",
                    ],
                },
            },
            Self::Bayleef(_) => &SpeciesData {
                national_dex_id: 153,
                names: NamesData {
                    names: [
                        "ベイリーフ",
                        "Bayleef",
                        "Macronium",
                        "Bayleef",
                        "Lorblatt",
                        "Bayleef",
                        "베이리프",
                        "月桂叶",
                        "月桂葉",
                    ],
                },
            },
            Self::Meganium(_) => &SpeciesData {
                national_dex_id: 154,
                names: NamesData {
                    names: [
                        "メガニウム",
                        "Meganium",
                        "Méganium",
                        "Meganium",
                        "Meganie",
                        "Meganium",
                        "메가니움",
                        "大竺葵",
                        "大竺葵",
                    ],
                },
            },
            Self::Cyndaquil(_) => &SpeciesData {
                national_dex_id: 155,
                names: NamesData {
                    names: [
                        "ヒノアラシ",
                        "Cyndaquil",
                        "Héricendre",
                        "Cyndaquil",
                        "Feurigel",
                        "Cyndaquil",
                        "브케인",
                        "火球鼠",
                        "火球鼠",
                    ],
                },
            },
            Self::Quilava(_) => &SpeciesData {
                national_dex_id: 156,
                names: NamesData {
                    names: [
                        "マグマラシ",
                        "Quilava",
                        "Feurisson",
                        "Quilava",
                        "Igelavar",
                        "Quilava",
                        "마그케인",
                        "火岩鼠",
                        "火岩鼠",
                    ],
                },
            },
            Self::Typhlosion(_) => &SpeciesData {
                national_dex_id: 157,
                names: NamesData {
                    names: [
                        "バクフーン",
                        "Typhlosion",
                        "Typhlosion",
                        "Typhlosion",
                        "Tornupto",
                        "Typhlosion",
                        "블레이범",
                        "火暴兽",
                        "火爆獸",
                    ],
                },
            },
            Self::Totodile(_) => &SpeciesData {
                national_dex_id: 158,
                names: NamesData {
                    names: [
                        "ワニノコ",
                        "Totodile",
                        "Kaiminus",
                        "Totodile",
                        "Karnimani",
                        "Totodile",
                        "리아코",
                        "小锯鳄",
                        "小鋸鱷",
                    ],
                },
            },
            Self::Croconaw(_) => &SpeciesData {
                national_dex_id: 159,
                names: NamesData {
                    names: [
                        "アリゲイツ",
                        "Croconaw",
                        "Crocrodil",
                        "Croconaw",
                        "Tyracroc",
                        "Croconaw",
                        "엘리게이",
                        "蓝鳄",
                        "藍鱷",
                    ],
                },
            },
            Self::Feraligatr(_) => &SpeciesData {
                national_dex_id: 160,
                names: NamesData {
                    names: [
                        "オーダイル",
                        "Feraligatr",
                        "Aligatueur",
                        "Feraligatr",
                        "Impergator",
                        "Feraligatr",
                        "장크로다일",
                        "大力鳄",
                        "大力鱷",
                    ],
                },
            },
            Self::Sentret(_) => &SpeciesData {
                national_dex_id: 161,
                names: NamesData {
                    names: [
                        "オタチ",
                        "Sentret",
                        "Fouinette",
                        "Sentret",
                        "Wiesor",
                        "Sentret",
                        "꼬리선",
                        "尾立",
                        "尾立",
                    ],
                },
            },
            Self::Furret(_) => &SpeciesData {
                national_dex_id: 162,
                names: NamesData {
                    names: [
                        "オオタチ",
                        "Furret",
                        "Fouinar",
                        "Furret",
                        "Wiesenior",
                        "Furret",
                        "다꼬리",
                        "大尾立",
                        "大尾立",
                    ],
                },
            },
            Self::Hoothoot(_) => &SpeciesData {
                national_dex_id: 163,
                names: NamesData {
                    names: [
                        "ホーホー",
                        "Hoothoot",
                        "Hoothoot",
                        "Hoothoot",
                        "Hoothoot",
                        "Hoothoot",
                        "부우부",
                        "咕咕",
                        "咕咕",
                    ],
                },
            },
            Self::Noctowl(_) => &SpeciesData {
                national_dex_id: 164,
                names: NamesData {
                    names: [
                        "ヨルノズク",
                        "Noctowl",
                        "Noarfang",
                        "Noctowl",
                        "Noctuh",
                        "Noctowl",
                        "야부엉",
                        "猫头夜鹰",
                        "貓頭夜鷹",
                    ],
                },
            },
            Self::Ledyba(_) => &SpeciesData {
                national_dex_id: 165,
                names: NamesData {
                    names: [
                        "レディバ",
                        "Ledyba",
                        "Coxy",
                        "Ledyba",
                        "Ledyba",
                        "Ledyba",
                        "레디바",
                        "芭瓢虫",
                        "芭瓢蟲",
                    ],
                },
            },
            Self::Ledian(_) => &SpeciesData {
                national_dex_id: 166,
                names: NamesData {
                    names: [
                        "レディアン",
                        "Ledian",
                        "Coxyclaque",
                        "Ledian",
                        "Ledian",
                        "Ledian",
                        "레디안",
                        "安瓢虫",
                        "安瓢蟲",
                    ],
                },
            },
            Self::Spinarak(_) => &SpeciesData {
                national_dex_id: 167,
                names: NamesData {
                    names: [
                        "イトマル",
                        "Spinarak",
                        "Mimigal",
                        "Spinarak",
                        "Webarak",
                        "Spinarak",
                        "페이검",
                        "圆丝蛛",
                        "圓絲蛛",
                    ],
                },
            },
            Self::Ariados(_) => &SpeciesData {
                national_dex_id: 168,
                names: NamesData {
                    names: [
                        "アリアドス",
                        "Ariados",
                        "Migalos",
                        "Ariados",
                        "Ariados",
                        "Ariados",
                        "아리아도스",
                        "阿利多斯",
                        "阿利多斯",
                    ],
                },
            },
            Self::Crobat(_) => &SpeciesData {
                national_dex_id: 169,
                names: NamesData {
                    names: [
                        "クロバット",
                        "Crobat",
                        "Nostenfer",
                        "Crobat",
                        "Iksbat",
                        "Crobat",
                        "크로뱃",
                        "叉字蝠",
                        "叉字蝠",
                    ],
                },
            },
            Self::Chinchou(_) => &SpeciesData {
                national_dex_id: 170,
                names: NamesData {
                    names: [
                        "チョンチー",
                        "Chinchou",
                        "Loupio",
                        "Chinchou",
                        "Lampi",
                        "Chinchou",
                        "초라기",
                        "灯笼鱼",
                        "燈籠魚",
                    ],
                },
            },
            Self::Lanturn(_) => &SpeciesData {
                national_dex_id: 171,
                names: NamesData {
                    names: [
                        "ランターン",
                        "Lanturn",
                        "Lanturn",
                        "Lanturn",
                        "Lanturn",
                        "Lanturn",
                        "랜턴",
                        "电灯怪",
                        "電燈怪",
                    ],
                },
            },
            Self::Pichu(_) => &SpeciesData {
                national_dex_id: 172,
                names: NamesData {
                    names: [
                        "ピチュー",
                        "Pichu",
                        "Pichu",
                        "Pichu",
                        "Pichu",
                        "Pichu",
                        "피츄",
                        "皮丘",
                        "皮丘",
                    ],
                },
            },
            Self::Cleffa(_) => &SpeciesData {
                national_dex_id: 173,
                names: NamesData {
                    names: [
                        "ピィ",
                        "Cleffa",
                        "Mélo",
                        "Cleffa",
                        "Pii",
                        "Cleffa",
                        "삐",
                        "皮宝宝",
                        "皮寶寶",
                    ],
                },
            },
            Self::Igglybuff(_) => &SpeciesData {
                national_dex_id: 174,
                names: NamesData {
                    names: [
                        "ププリン",
                        "Igglybuff",
                        "Toudoudou",
                        "Igglybuff",
                        "Fluffeluff",
                        "Igglybuff",
                        "푸푸린",
                        "宝宝丁",
                        "寶寶丁",
                    ],
                },
            },
            Self::Togepi(_) => &SpeciesData {
                national_dex_id: 175,
                names: NamesData {
                    names: [
                        "トゲピー",
                        "Togepi",
                        "Togepi",
                        "Togepi",
                        "Togepi",
                        "Togepi",
                        "토게피",
                        "波克比",
                        "波克比",
                    ],
                },
            },
            Self::Togetic(_) => &SpeciesData {
                national_dex_id: 176,
                names: NamesData {
                    names: [
                        "トゲチック",
                        "Togetic",
                        "Togetic",
                        "Togetic",
                        "Togetic",
                        "Togetic",
                        "토게틱",
                        "波克基古",
                        "波克基古",
                    ],
                },
            },
            Self::Natu(_) => &SpeciesData {
                national_dex_id: 177,
                names: NamesData {
                    names: [
                        "ネイティ",
                        "Natu",
                        "Natu",
                        "Natu",
                        "Natu",
                        "Natu",
                        "네이티",
                        "天然雀",
                        "天然雀",
                    ],
                },
            },
            Self::Xatu(_) => &SpeciesData {
                national_dex_id: 178,
                names: NamesData {
                    names: [
                        "ネイティオ",
                        "Xatu",
                        "Xatu",
                        "Xatu",
                        "Xatu",
                        "Xatu",
                        "네이티오",
                        "天然鸟",
                        "天然鳥",
                    ],
                },
            },
            Self::Mareep(_) => &SpeciesData {
                national_dex_id: 179,
                names: NamesData {
                    names: [
                        "メリープ",
                        "Mareep",
                        "Wattouat",
                        "Mareep",
                        "Voltilamm",
                        "Mareep",
                        "메리프",
                        "咩利羊",
                        "咩利羊",
                    ],
                },
            },
            Self::Flaaffy(_) => &SpeciesData {
                national_dex_id: 180,
                names: NamesData {
                    names: [
                        "モココ",
                        "Flaaffy",
                        "Lainergie",
                        "Flaaffy",
                        "Waaty",
                        "Flaaffy",
                        "보송송",
                        "茸茸羊",
                        "茸茸羊",
                    ],
                },
            },
            Self::Ampharos(_) => &SpeciesData {
                national_dex_id: 181,
                names: NamesData {
                    names: [
                        "デンリュウ",
                        "Ampharos",
                        "Pharamp",
                        "Ampharos",
                        "Ampharos",
                        "Ampharos",
                        "전룡",
                        "电龙",
                        "電龍",
                    ],
                },
            },
            Self::Bellossom(_) => &SpeciesData {
                national_dex_id: 182,
                names: NamesData {
                    names: [
                        "キレイハナ",
                        "Bellossom",
                        "Joliflor",
                        "Bellossom",
                        "Blubella",
                        "Bellossom",
                        "아르코",
                        "美丽花",
                        "美麗花",
                    ],
                },
            },
            Self::Marill(_) => &SpeciesData {
                national_dex_id: 183,
                names: NamesData {
                    names: [
                        "マリル",
                        "Marill",
                        "Marill",
                        "Marill",
                        "Marill",
                        "Marill",
                        "마릴",
                        "玛力露",
                        "瑪力露",
                    ],
                },
            },
            Self::Azumarill(_) => &SpeciesData {
                national_dex_id: 184,
                names: NamesData {
                    names: [
                        "マリルリ",
                        "Azumarill",
                        "Azumarill",
                        "Azumarill",
                        "Azumarill",
                        "Azumarill",
                        "마릴리",
                        "玛力露丽",
                        "瑪力露麗",
                    ],
                },
            },
            Self::Sudowoodo(_) => &SpeciesData {
                national_dex_id: 185,
                names: NamesData {
                    names: [
                        "ウソッキー",
                        "Sudowoodo",
                        "Simularbre",
                        "Sudowoodo",
                        "Mogelbaum",
                        "Sudowoodo",
                        "꼬지모",
                        "树才怪",
                        "樹才怪",
                    ],
                },
            },
            Self::Politoed(_) => &SpeciesData {
                national_dex_id: 186,
                names: NamesData {
                    names: [
                        "ニョロトノ",
                        "Politoed",
                        "Tarpaud",
                        "Politoed",
                        "Quaxo",
                        "Politoed",
                        "왕구리",
                        "蚊香蛙皇",
                        "蚊香蛙皇",
                    ],
                },
            },
            Self::Hoppip(_) => &SpeciesData {
                national_dex_id: 187,
                names: NamesData {
                    names: [
                        "ハネッコ",
                        "Hoppip",
                        "Granivol",
                        "Hoppip",
                        "Hoppspross",
                        "Hoppip",
                        "통통코",
                        "毽子草",
                        "毽子草",
                    ],
                },
            },
            Self::Skiploom(_) => &SpeciesData {
                national_dex_id: 188,
                names: NamesData {
                    names: [
                        "ポポッコ",
                        "Skiploom",
                        "Floravol",
                        "Skiploom",
                        "Hubelupf",
                        "Skiploom",
                        "두코",
                        "毽子花",
                        "毽子花",
                    ],
                },
            },
            Self::Jumpluff(_) => &SpeciesData {
                national_dex_id: 189,
                names: NamesData {
                    names: [
                        "ワタッコ",
                        "Jumpluff",
                        "Cotovol",
                        "Jumpluff",
                        "Papungha",
                        "Jumpluff",
                        "솜솜코",
                        "毽子棉",
                        "毽子棉",
                    ],
                },
            },
            Self::Aipom(_) => &SpeciesData {
                national_dex_id: 190,
                names: NamesData {
                    names: [
                        "エイパム",
                        "Aipom",
                        "Capumain",
                        "Aipom",
                        "Griffel",
                        "Aipom",
                        "에이팜",
                        "长尾怪手",
                        "長尾怪手",
                    ],
                },
            },
            Self::Sunkern(_) => &SpeciesData {
                national_dex_id: 191,
                names: NamesData {
                    names: [
                        "ヒマナッツ",
                        "Sunkern",
                        "Tournegrin",
                        "Sunkern",
                        "Sonnkern",
                        "Sunkern",
                        "해너츠",
                        "向日种子",
                        "向日種子",
                    ],
                },
            },
            Self::Sunflora(_) => &SpeciesData {
                national_dex_id: 192,
                names: NamesData {
                    names: [
                        "キマワリ",
                        "Sunflora",
                        "Héliatronc",
                        "Sunflora",
                        "Sonnflora",
                        "Sunflora",
                        "해루미",
                        "向日花怪",
                        "向日花怪",
                    ],
                },
            },
            Self::Yanma(_) => &SpeciesData {
                national_dex_id: 193,
                names: NamesData {
                    names: [
                        "ヤンヤンマ",
                        "Yanma",
                        "Yanma",
                        "Yanma",
                        "Yanma",
                        "Yanma",
                        "왕자리",
                        "蜻蜻蜓",
                        "蜻蜻蜓",
                    ],
                },
            },
            Self::Wooper(_) => &SpeciesData {
                national_dex_id: 194,
                names: NamesData {
                    names: [
                        "ウパー",
                        "Wooper",
                        "Axoloto",
                        "Wooper",
                        "Felino",
                        "Wooper",
                        "우파",
                        "乌波",
                        "烏波",
                    ],
                },
            },
            Self::Quagsire(_) => &SpeciesData {
                national_dex_id: 195,
                names: NamesData {
                    names: [
                        "ヌオー",
                        "Quagsire",
                        "Maraiste",
                        "Quagsire",
                        "Morlord",
                        "Quagsire",
                        "누오",
                        "沼王",
                        "沼王",
                    ],
                },
            },
            Self::Espeon(_) => &SpeciesData {
                national_dex_id: 196,
                names: NamesData {
                    names: [
                        "エーフィ",
                        "Espeon",
                        "Mentali",
                        "Espeon",
                        "Psiana",
                        "Espeon",
                        "에브이",
                        "太阳伊布",
                        "太陽伊布",
                    ],
                },
            },
            Self::Umbreon(_) => &SpeciesData {
                national_dex_id: 197,
                names: NamesData {
                    names: [
                        "ブラッキー",
                        "Umbreon",
                        "Noctali",
                        "Umbreon",
                        "Nachtara",
                        "Umbreon",
                        "블래키",
                        "月亮伊布",
                        "月亮伊布",
                    ],
                },
            },
            Self::Murkrow(_) => &SpeciesData {
                national_dex_id: 198,
                names: NamesData {
                    names: [
                        "ヤミカラス",
                        "Murkrow",
                        "Cornèbre",
                        "Murkrow",
                        "Kramurx",
                        "Murkrow",
                        "니로우",
                        "黑暗鸦",
                        "黑暗鴉",
                    ],
                },
            },
            Self::Slowking(_) => &SpeciesData {
                national_dex_id: 199,
                names: NamesData {
                    names: [
                        "ヤドキング",
                        "Slowking",
                        "Roigada",
                        "Slowking",
                        "Laschoking",
                        "Slowking",
                        "야도킹",
                        "呆呆王",
                        "呆呆王",
                    ],
                },
            },
            Self::Misdreavus(_) => &SpeciesData {
                national_dex_id: 200,
                names: NamesData {
                    names: [
                        "ムウマ",
                        "Misdreavus",
                        "Feuforêve",
                        "Misdreavus",
                        "Traunfugil",
                        "Misdreavus",
                        "무우마",
                        "梦妖",
                        "夢妖",
                    ],
                },
            },
            Self::Unown(_) => &SpeciesData {
                national_dex_id: 201,
                names: NamesData {
                    names: [
                        "アンノーン",
                        "Unown",
                        "Zarbi",
                        "Unown",
                        "Icognito",
                        "Unown",
                        "안농",
                        "未知图腾",
                        "未知圖騰",
                    ],
                },
            },
            Self::Wobbuffet(_) => &SpeciesData {
                national_dex_id: 202,
                names: NamesData {
                    names: [
                        "ソーナンス",
                        "Wobbuffet",
                        "Qulbutoké",
                        "Wobbuffet",
                        "Woingenau",
                        "Wobbuffet",
                        "마자용",
                        "果然翁",
                        "果然翁",
                    ],
                },
            },
            Self::Girafarig(_) => &SpeciesData {
                national_dex_id: 203,
                names: NamesData {
                    names: [
                        "キリンリキ",
                        "Girafarig",
                        "Girafarig",
                        "Girafarig",
                        "Girafarig",
                        "Girafarig",
                        "키링키",
                        "麒麟奇",
                        "麒麟奇",
                    ],
                },
            },
            Self::Pineco(_) => &SpeciesData {
                national_dex_id: 204,
                names: NamesData {
                    names: [
                        "クヌギダマ",
                        "Pineco",
                        "Pomdepik",
                        "Pineco",
                        "Tannza",
                        "Pineco",
                        "피콘",
                        "榛果球",
                        "榛果球",
                    ],
                },
            },
            Self::Forretress(_) => &SpeciesData {
                national_dex_id: 205,
                names: NamesData {
                    names: [
                        "フォレトス",
                        "Forretress",
                        "Foretress",
                        "Forretress",
                        "Forstellka",
                        "Forretress",
                        "쏘콘",
                        "佛烈托斯",
                        "佛烈托斯",
                    ],
                },
            },
            Self::Dunsparce(_) => &SpeciesData {
                national_dex_id: 206,
                names: NamesData {
                    names: [
                        "ノコッチ",
                        "Dunsparce",
                        "Insolourdo",
                        "Dunsparce",
                        "Dummisel",
                        "Dunsparce",
                        "노고치",
                        "土龙弟弟",
                        "土龍弟弟",
                    ],
                },
            },
            Self::Gligar(_) => &SpeciesData {
                national_dex_id: 207,
                names: NamesData {
                    names: [
                        "グライガー",
                        "Gligar",
                        "Scorplane",
                        "Gligar",
                        "Skorgla",
                        "Gligar",
                        "글라이거",
                        "天蝎",
                        "天蠍",
                    ],
                },
            },
            Self::Steelix(_) => &SpeciesData {
                national_dex_id: 208,
                names: NamesData {
                    names: [
                        "ハガネール",
                        "Steelix",
                        "Steelix",
                        "Steelix",
                        "Stahlos",
                        "Steelix",
                        "강철톤",
                        "大钢蛇",
                        "大鋼蛇",
                    ],
                },
            },
            Self::Snubbull(_) => &SpeciesData {
                national_dex_id: 209,
                names: NamesData {
                    names: [
                        "ブルー",
                        "Snubbull",
                        "Snubbull",
                        "Snubbull",
                        "Snubbull",
                        "Snubbull",
                        "블루",
                        "布鲁",
                        "布魯",
                    ],
                },
            },
            Self::Granbull(_) => &SpeciesData {
                national_dex_id: 210,
                names: NamesData {
                    names: [
                        "グランブル",
                        "Granbull",
                        "Granbull",
                        "Granbull",
                        "Granbull",
                        "Granbull",
                        "그랑블루",
                        "布鲁皇",
                        "布魯皇",
                    ],
                },
            },
            Self::Qwilfish(_) => &SpeciesData {
                national_dex_id: 211,
                names: NamesData {
                    names: [
                        "ハリーセン",
                        "Qwilfish",
                        "Qwilfish",
                        "Qwilfish",
                        "Baldorfish",
                        "Qwilfish",
                        "침바루",
                        "千针鱼",
                        "千針魚",
                    ],
                },
            },
            Self::Scizor(_) => &SpeciesData {
                national_dex_id: 212,
                names: NamesData {
                    names: [
                        "ハッサム",
                        "Scizor",
                        "Cizayox",
                        "Scizor",
                        "Scherox",
                        "Scizor",
                        "핫삼",
                        "巨钳螳螂",
                        "巨鉗螳螂",
                    ],
                },
            },
            Self::Shuckle(_) => &SpeciesData {
                national_dex_id: 213,
                names: NamesData {
                    names: [
                        "ツボツボ",
                        "Shuckle",
                        "Caratroc",
                        "Shuckle",
                        "Pottrott",
                        "Shuckle",
                        "단단지",
                        "壶壶",
                        "壺壺",
                    ],
                },
            },
            Self::Heracross(_) => &SpeciesData {
                national_dex_id: 214,
                names: NamesData {
                    names: [
                        "ヘラクロス",
                        "Heracross",
                        "Scarhino",
                        "Heracross",
                        "Skaraborn",
                        "Heracross",
                        "헤라크로스",
                        "赫拉克罗斯",
                        "赫拉克羅斯",
                    ],
                },
            },
            Self::Sneasel(_) => &SpeciesData {
                national_dex_id: 215,
                names: NamesData {
                    names: [
                        "ニューラ",
                        "Sneasel",
                        "Farfuret",
                        "Sneasel",
                        "Sniebel",
                        "Sneasel",
                        "포푸니",
                        "狃拉",
                        "狃拉",
                    ],
                },
            },
            Self::Teddiursa(_) => &SpeciesData {
                national_dex_id: 216,
                names: NamesData {
                    names: [
                        "ヒメグマ",
                        "Teddiursa",
                        "Teddiursa",
                        "Teddiursa",
                        "Teddiursa",
                        "Teddiursa",
                        "깜지곰",
                        "熊宝宝",
                        "熊寶寶",
                    ],
                },
            },
            Self::Ursaring(_) => &SpeciesData {
                national_dex_id: 217,
                names: NamesData {
                    names: [
                        "リングマ",
                        "Ursaring",
                        "Ursaring",
                        "Ursaring",
                        "Ursaring",
                        "Ursaring",
                        "링곰",
                        "圈圈熊",
                        "圈圈熊",
                    ],
                },
            },
            Self::Slugma(_) => &SpeciesData {
                national_dex_id: 218,
                names: NamesData {
                    names: [
                        "マグマッグ",
                        "Slugma",
                        "Limagma",
                        "Slugma",
                        "Schneckmag",
                        "Slugma",
                        "마그마그",
                        "熔岩虫",
                        "熔岩蟲",
                    ],
                },
            },
            Self::Magcargo(_) => &SpeciesData {
                national_dex_id: 219,
                names: NamesData {
                    names: [
                        "マグカルゴ",
                        "Magcargo",
                        "Volcaropod",
                        "Magcargo",
                        "Magcargo",
                        "Magcargo",
                        "마그카르고",
                        "熔岩蜗牛",
                        "熔岩蝸牛",
                    ],
                },
            },
            Self::Swinub(_) => &SpeciesData {
                national_dex_id: 220,
                names: NamesData {
                    names: [
                        "ウリムー",
                        "Swinub",
                        "Marcacrin",
                        "Swinub",
                        "Quiekel",
                        "Swinub",
                        "꾸꾸리",
                        "小山猪",
                        "小山豬",
                    ],
                },
            },
            Self::Piloswine(_) => &SpeciesData {
                national_dex_id: 221,
                names: NamesData {
                    names: [
                        "イノムー",
                        "Piloswine",
                        "Cochignon",
                        "Piloswine",
                        "Keifel",
                        "Piloswine",
                        "메꾸리",
                        "长毛猪",
                        "長毛豬",
                    ],
                },
            },
            Self::Corsola(_) => &SpeciesData {
                national_dex_id: 222,
                names: NamesData {
                    names: [
                        "サニーゴ",
                        "Corsola",
                        "Corayon",
                        "Corsola",
                        "Corasonn",
                        "Corsola",
                        "코산호",
                        "太阳珊瑚",
                        "太陽珊瑚",
                    ],
                },
            },
            Self::Remoraid(_) => &SpeciesData {
                national_dex_id: 223,
                names: NamesData {
                    names: [
                        "テッポウオ",
                        "Remoraid",
                        "Rémoraid",
                        "Remoraid",
                        "Remoraid",
                        "Remoraid",
                        "총어",
                        "铁炮鱼",
                        "鐵炮魚",
                    ],
                },
            },
            Self::Octillery(_) => &SpeciesData {
                national_dex_id: 224,
                names: NamesData {
                    names: [
                        "オクタン",
                        "Octillery",
                        "Octillery",
                        "Octillery",
                        "Octillery",
                        "Octillery",
                        "대포무노",
                        "章鱼桶",
                        "章魚桶",
                    ],
                },
            },
            Self::Delibird(_) => &SpeciesData {
                national_dex_id: 225,
                names: NamesData {
                    names: [
                        "デリバード",
                        "Delibird",
                        "Cadoizo",
                        "Delibird",
                        "Botogel",
                        "Delibird",
                        "딜리버드",
                        "信使鸟",
                        "信使鳥",
                    ],
                },
            },
            Self::Mantine(_) => &SpeciesData {
                national_dex_id: 226,
                names: NamesData {
                    names: [
                        "マンタイン",
                        "Mantine",
                        "Démanta",
                        "Mantine",
                        "Mantax",
                        "Mantine",
                        "만타인",
                        "巨翅飞鱼",
                        "巨翅飛魚",
                    ],
                },
            },
            Self::Skarmory(_) => &SpeciesData {
                national_dex_id: 227,
                names: NamesData {
                    names: [
                        "エアームド",
                        "Skarmory",
                        "Airmure",
                        "Skarmory",
                        "Panzaeron",
                        "Skarmory",
                        "무장조",
                        "盔甲鸟",
                        "盔甲鳥",
                    ],
                },
            },
            Self::Houndour(_) => &SpeciesData {
                national_dex_id: 228,
                names: NamesData {
                    names: [
                        "デルビル",
                        "Houndour",
                        "Malosse",
                        "Houndour",
                        "Hunduster",
                        "Houndour",
                        "델빌",
                        "戴鲁比",
                        "戴魯比",
                    ],
                },
            },
            Self::Houndoom(_) => &SpeciesData {
                national_dex_id: 229,
                names: NamesData {
                    names: [
                        "ヘルガー",
                        "Houndoom",
                        "Démolosse",
                        "Houndoom",
                        "Hundemon",
                        "Houndoom",
                        "헬가",
                        "黑鲁加",
                        "黑魯加",
                    ],
                },
            },
            Self::Kingdra(_) => &SpeciesData {
                national_dex_id: 230,
                names: NamesData {
                    names: [
                        "キングドラ",
                        "Kingdra",
                        "Hyporoi",
                        "Kingdra",
                        "Seedraking",
                        "Kingdra",
                        "킹드라",
                        "刺龙王",
                        "刺龍王",
                    ],
                },
            },
            Self::Phanpy(_) => &SpeciesData {
                national_dex_id: 231,
                names: NamesData {
                    names: [
                        "ゴマゾウ",
                        "Phanpy",
                        "Phanpy",
                        "Phanpy",
                        "Phanpy",
                        "Phanpy",
                        "코코리",
                        "小小象",
                        "小小象",
                    ],
                },
            },
            Self::Donphan(_) => &SpeciesData {
                national_dex_id: 232,
                names: NamesData {
                    names: [
                        "ドンファン",
                        "Donphan",
                        "Donphan",
                        "Donphan",
                        "Donphan",
                        "Donphan",
                        "코리갑",
                        "顿甲",
                        "頓甲",
                    ],
                },
            },
            Self::Porygon2(_) => &SpeciesData {
                national_dex_id: 233,
                names: NamesData {
                    names: [
                        "ポリゴン２",
                        "Porygon2",
                        "Porygon2",
                        "Porygon2",
                        "Porygon2",
                        "Porygon2",
                        "폴리곤2",
                        "多边兽２型",
                        "多邊獸Ⅱ",
                    ],
                },
            },
            Self::Stantler(_) => &SpeciesData {
                national_dex_id: 234,
                names: NamesData {
                    names: [
                        "オドシシ",
                        "Stantler",
                        "Cerfrousse",
                        "Stantler",
                        "Damhirplex",
                        "Stantler",
                        "노라키",
                        "惊角鹿",
                        "驚角鹿",
                    ],
                },
            },
            Self::Smeargle(_) => &SpeciesData {
                national_dex_id: 235,
                names: NamesData {
                    names: [
                        "ドーブル",
                        "Smeargle",
                        "Queulorior",
                        "Smeargle",
                        "Farbeagle",
                        "Smeargle",
                        "루브도",
                        "图图犬",
                        "圖圖犬",
                    ],
                },
            },
            Self::Tyrogue(_) => &SpeciesData {
                national_dex_id: 236,
                names: NamesData {
                    names: [
                        "バルキー",
                        "Tyrogue",
                        "Debugant",
                        "Tyrogue",
                        "Rabauz",
                        "Tyrogue",
                        "배루키",
                        "无畏小子",
                        "無畏小子",
                    ],
                },
            },
            Self::Hitmontop(_) => &SpeciesData {
                national_dex_id: 237,
                names: NamesData {
                    names: [
                        "カポエラー",
                        "Hitmontop",
                        "Kapoera",
                        "Hitmontop",
                        "Kapoera",
                        "Hitmontop",
                        "카포에라",
                        "战舞郎",
                        "戰舞郎",
                    ],
                },
            },
            Self::Smoochum(_) => &SpeciesData {
                national_dex_id: 238,
                names: NamesData {
                    names: [
                        "ムチュール",
                        "Smoochum",
                        "Lippouti",
                        "Smoochum",
                        "Kussilla",
                        "Smoochum",
                        "뽀뽀라",
                        "迷唇娃",
                        "迷唇娃",
                    ],
                },
            },
            Self::Elekid(_) => &SpeciesData {
                national_dex_id: 239,
                names: NamesData {
                    names: [
                        "エレキッド",
                        "Elekid",
                        "Élekid",
                        "Elekid",
                        "Elekid",
                        "Elekid",
                        "에레키드",
                        "电击怪",
                        "電擊怪",
                    ],
                },
            },
            Self::Magby(_) => &SpeciesData {
                national_dex_id: 240,
                names: NamesData {
                    names: [
                        "ブビィ",
                        "Magby",
                        "Magby",
                        "Magby",
                        "Magby",
                        "Magby",
                        "마그비",
                        "鸭嘴宝宝",
                        "鴨嘴寶寶",
                    ],
                },
            },
            Self::Miltank(_) => &SpeciesData {
                national_dex_id: 241,
                names: NamesData {
                    names: [
                        "ミルタンク",
                        "Miltank",
                        "Écrémeuh",
                        "Miltank",
                        "Miltank",
                        "Miltank",
                        "밀탱크",
                        "大奶罐",
                        "大奶罐",
                    ],
                },
            },
            Self::Blissey(_) => &SpeciesData {
                national_dex_id: 242,
                names: NamesData {
                    names: [
                        "ハピナス",
                        "Blissey",
                        "Leuphorie",
                        "Blissey",
                        "Heiteira",
                        "Blissey",
                        "해피너스",
                        "幸福蛋",
                        "幸福蛋",
                    ],
                },
            },
            Self::Raikou(_) => &SpeciesData {
                national_dex_id: 243,
                names: NamesData {
                    names: [
                        "ライコウ",
                        "Raikou",
                        "Raikou",
                        "Raikou",
                        "Raikou",
                        "Raikou",
                        "라이코",
                        "雷公",
                        "雷公",
                    ],
                },
            },
            Self::Entei(_) => &SpeciesData {
                national_dex_id: 244,
                names: NamesData {
                    names: [
                        "エンテイ",
                        "Entei",
                        "Entei",
                        "Entei",
                        "Entei",
                        "Entei",
                        "앤테이",
                        "炎帝",
                        "炎帝",
                    ],
                },
            },
            Self::Suicune(_) => &SpeciesData {
                national_dex_id: 245,
                names: NamesData {
                    names: [
                        "スイクン",
                        "Suicune",
                        "Suicune",
                        "Suicune",
                        "Suicune",
                        "Suicune",
                        "스이쿤",
                        "水君",
                        "水君",
                    ],
                },
            },
            Self::Larvitar(_) => &SpeciesData {
                national_dex_id: 246,
                names: NamesData {
                    names: [
                        "ヨーギラス",
                        "Larvitar",
                        "Embrylex",
                        "Larvitar",
                        "Larvitar",
                        "Larvitar",
                        "애버라스",
                        "幼基拉斯",
                        "幼基拉斯",
                    ],
                },
            },
            Self::Pupitar(_) => &SpeciesData {
                national_dex_id: 247,
                names: NamesData {
                    names: [
                        "サナギラス",
                        "Pupitar",
                        "Ymphect",
                        "Pupitar",
                        "Pupitar",
                        "Pupitar",
                        "데기라스",
                        "沙基拉斯",
                        "沙基拉斯",
                    ],
                },
            },
            Self::Tyranitar(_) => &SpeciesData {
                national_dex_id: 248,
                names: NamesData {
                    names: [
                        "バンギラス",
                        "Tyranitar",
                        "Tyranocif",
                        "Tyranitar",
                        "Despotar",
                        "Tyranitar",
                        "마기라스",
                        "班基拉斯",
                        "班基拉斯",
                    ],
                },
            },
            Self::Lugia(_) => &SpeciesData {
                national_dex_id: 249,
                names: NamesData {
                    names: [
                        "ルギア",
                        "Lugia",
                        "Lugia",
                        "Lugia",
                        "Lugia",
                        "Lugia",
                        "루기아",
                        "洛奇亚",
                        "洛奇亞",
                    ],
                },
            },
            Self::HoOh(_) => &SpeciesData {
                national_dex_id: 250,
                names: NamesData {
                    names: [
                        "ホウオウ",
                        "Ho-Oh",
                        "Ho-Oh",
                        "Ho-Oh",
                        "Ho-Oh",
                        "Ho-Oh",
                        "칠색조",
                        "凤王",
                        "鳳王",
                    ],
                },
            },
            Self::Celebi(_) => &SpeciesData {
                national_dex_id: 251,
                names: NamesData {
                    names: [
                        "セレビィ",
                        "Celebi",
                        "Celebi",
                        "Celebi",
                        "Celebi",
                        "Celebi",
                        "세레비",
                        "时拉比",
                        "時拉比",
                    ],
                },
            },
            Self::Treecko(_) => &SpeciesData {
                national_dex_id: 252,
                names: NamesData {
                    names: [
                        "キモリ",
                        "Treecko",
                        "Arcko",
                        "Treecko",
                        "Geckarbor",
                        "Treecko",
                        "나무지기",
                        "木守宫",
                        "木守宮",
                    ],
                },
            },
            Self::Grovyle(_) => &SpeciesData {
                national_dex_id: 253,
                names: NamesData {
                    names: [
                        "ジュプトル",
                        "Grovyle",
                        "Massko",
                        "Grovyle",
                        "Reptain",
                        "Grovyle",
                        "나무돌이",
                        "森林蜥蜴",
                        "森林蜥蜴",
                    ],
                },
            },
            Self::Sceptile(_) => &SpeciesData {
                national_dex_id: 254,
                names: NamesData {
                    names: [
                        "ジュカイン",
                        "Sceptile",
                        "Jungko",
                        "Sceptile",
                        "Gewaldro",
                        "Sceptile",
                        "나무킹",
                        "蜥蜴王",
                        "蜥蜴王",
                    ],
                },
            },
            Self::Torchic(_) => &SpeciesData {
                national_dex_id: 255,
                names: NamesData {
                    names: [
                        "アチャモ",
                        "Torchic",
                        "Poussifeu",
                        "Torchic",
                        "Flemmli",
                        "Torchic",
                        "아차모",
                        "火稚鸡",
                        "火稚雞",
                    ],
                },
            },
            Self::Combusken(_) => &SpeciesData {
                national_dex_id: 256,
                names: NamesData {
                    names: [
                        "ワカシャモ",
                        "Combusken",
                        "Galifeu",
                        "Combusken",
                        "Jungglut",
                        "Combusken",
                        "영치코",
                        "力壮鸡",
                        "力壯雞",
                    ],
                },
            },
            Self::Blaziken(_) => &SpeciesData {
                national_dex_id: 257,
                names: NamesData {
                    names: [
                        "バシャーモ",
                        "Blaziken",
                        "Braségali",
                        "Blaziken",
                        "Lohgock",
                        "Blaziken",
                        "번치코",
                        "火焰鸡",
                        "火焰雞",
                    ],
                },
            },
            Self::Mudkip(_) => &SpeciesData {
                national_dex_id: 258,
                names: NamesData {
                    names: [
                        "ミズゴロウ",
                        "Mudkip",
                        "Gobou",
                        "Mudkip",
                        "Hydropi",
                        "Mudkip",
                        "물짱이",
                        "水跃鱼",
                        "水躍魚",
                    ],
                },
            },
            Self::Marshtomp(_) => &SpeciesData {
                national_dex_id: 259,
                names: NamesData {
                    names: [
                        "ヌマクロー",
                        "Marshtomp",
                        "Flobio",
                        "Marshtomp",
                        "Moorabbel",
                        "Marshtomp",
                        "늪짱이",
                        "沼跃鱼",
                        "沼躍魚",
                    ],
                },
            },
            Self::Swampert(_) => &SpeciesData {
                national_dex_id: 260,
                names: NamesData {
                    names: [
                        "ラグラージ",
                        "Swampert",
                        "Laggron",
                        "Swampert",
                        "Sumpex",
                        "Swampert",
                        "대짱이",
                        "巨沼怪",
                        "巨沼怪",
                    ],
                },
            },
            Self::Poochyena(_) => &SpeciesData {
                national_dex_id: 261,
                names: NamesData {
                    names: [
                        "ポチエナ",
                        "Poochyena",
                        "Medhyèna",
                        "Poochyena",
                        "Fiffyen",
                        "Poochyena",
                        "포챠나",
                        "土狼犬",
                        "土狼犬",
                    ],
                },
            },
            Self::Mightyena(_) => &SpeciesData {
                national_dex_id: 262,
                names: NamesData {
                    names: [
                        "グラエナ",
                        "Mightyena",
                        "Grahyèna",
                        "Mightyena",
                        "Magnayen",
                        "Mightyena",
                        "그라에나",
                        "大狼犬",
                        "大狼犬",
                    ],
                },
            },
            Self::Zigzagoon(_) => &SpeciesData {
                national_dex_id: 263,
                names: NamesData {
                    names: [
                        "ジグザグマ",
                        "Zigzagoon",
                        "Zigzaton",
                        "Zigzagoon",
                        "Zigzachs",
                        "Zigzagoon",
                        "지그제구리",
                        "蛇纹熊",
                        "蛇紋熊",
                    ],
                },
            },
            Self::Linoone(_) => &SpeciesData {
                national_dex_id: 264,
                names: NamesData {
                    names: [
                        "マッスグマ",
                        "Linoone",
                        "Linéon",
                        "Linoone",
                        "Geradaks",
                        "Linoone",
                        "직구리",
                        "直冲熊",
                        "直衝熊",
                    ],
                },
            },
            Self::Wurmple(_) => &SpeciesData {
                national_dex_id: 265,
                names: NamesData {
                    names: [
                        "ケムッソ",
                        "Wurmple",
                        "Chenipotte",
                        "Wurmple",
                        "Waumpel",
                        "Wurmple",
                        "개무소",
                        "刺尾虫",
                        "刺尾蟲",
                    ],
                },
            },
            Self::Silcoon(_) => &SpeciesData {
                national_dex_id: 266,
                names: NamesData {
                    names: [
                        "カラサリス",
                        "Silcoon",
                        "Armulys",
                        "Silcoon",
                        "Schaloko",
                        "Silcoon",
                        "실쿤",
                        "甲壳茧",
                        "甲殼繭",
                    ],
                },
            },
            Self::Beautifly(_) => &SpeciesData {
                national_dex_id: 267,
                names: NamesData {
                    names: [
                        "アゲハント",
                        "Beautifly",
                        "Charmillon",
                        "Beautifly",
                        "Papinella",
                        "Beautifly",
                        "뷰티플라이",
                        "狩猎凤蝶",
                        "狩獵鳳蝶",
                    ],
                },
            },
            Self::Cascoon(_) => &SpeciesData {
                national_dex_id: 268,
                names: NamesData {
                    names: [
                        "マユルド",
                        "Cascoon",
                        "Blindalys",
                        "Cascoon",
                        "Panekon",
                        "Cascoon",
                        "카스쿤",
                        "盾甲茧",
                        "盾甲繭",
                    ],
                },
            },
            Self::Dustox(_) => &SpeciesData {
                national_dex_id: 269,
                names: NamesData {
                    names: [
                        "ドクケイル",
                        "Dustox",
                        "Papinox",
                        "Dustox",
                        "Pudox",
                        "Dustox",
                        "독케일",
                        "毒粉蛾",
                        "毒粉蛾",
                    ],
                },
            },
            Self::Lotad(_) => &SpeciesData {
                national_dex_id: 270,
                names: NamesData {
                    names: [
                        "ハスボー",
                        "Lotad",
                        "Nénupiot",
                        "Lotad",
                        "Loturzel",
                        "Lotad",
                        "연꽃몬",
                        "莲叶童子",
                        "蓮葉童子",
                    ],
                },
            },
            Self::Lombre(_) => &SpeciesData {
                national_dex_id: 271,
                names: NamesData {
                    names: [
                        "ハスブレロ",
                        "Lombre",
                        "Lombre",
                        "Lombre",
                        "Lombrero",
                        "Lombre",
                        "로토스",
                        "莲帽小童",
                        "蓮帽小童",
                    ],
                },
            },
            Self::Ludicolo(_) => &SpeciesData {
                national_dex_id: 272,
                names: NamesData {
                    names: [
                        "ルンパッパ",
                        "Ludicolo",
                        "Ludicolo",
                        "Ludicolo",
                        "Kappalores",
                        "Ludicolo",
                        "로파파",
                        "乐天河童",
                        "樂天河童",
                    ],
                },
            },
            Self::Seedot(_) => &SpeciesData {
                national_dex_id: 273,
                names: NamesData {
                    names: [
                        "タネボー",
                        "Seedot",
                        "Grainipiot",
                        "Seedot",
                        "Samurzel",
                        "Seedot",
                        "도토링",
                        "橡实果",
                        "橡實果",
                    ],
                },
            },
            Self::Nuzleaf(_) => &SpeciesData {
                national_dex_id: 274,
                names: NamesData {
                    names: [
                        "コノハナ",
                        "Nuzleaf",
                        "Pifeuil",
                        "Nuzleaf",
                        "Blanas",
                        "Nuzleaf",
                        "잎새코",
                        "长鼻叶",
                        "長鼻葉",
                    ],
                },
            },
            Self::Shiftry(_) => &SpeciesData {
                national_dex_id: 275,
                names: NamesData {
                    names: [
                        "ダーテング",
                        "Shiftry",
                        "Tengalice",
                        "Shiftry",
                        "Tengulist",
                        "Shiftry",
                        "다탱구",
                        "狡猾天狗",
                        "狡猾天狗",
                    ],
                },
            },
            Self::Taillow(_) => &SpeciesData {
                national_dex_id: 276,
                names: NamesData {
                    names: [
                        "スバメ",
                        "Taillow",
                        "Nirondelle",
                        "Taillow",
                        "Schwalbini",
                        "Taillow",
                        "테일로",
                        "傲骨燕",
                        "傲骨燕",
                    ],
                },
            },
            Self::Swellow(_) => &SpeciesData {
                national_dex_id: 277,
                names: NamesData {
                    names: [
                        "オオスバメ",
                        "Swellow",
                        "Hélédelle",
                        "Swellow",
                        "Schwalboss",
                        "Swellow",
                        "스왈로",
                        "大王燕",
                        "大王燕",
                    ],
                },
            },
            Self::Wingull(_) => &SpeciesData {
                national_dex_id: 278,
                names: NamesData {
                    names: [
                        "キャモメ",
                        "Wingull",
                        "Goélise",
                        "Wingull",
                        "Wingull",
                        "Wingull",
                        "갈모매",
                        "长翅鸥",
                        "長翅鷗",
                    ],
                },
            },
            Self::Pelipper(_) => &SpeciesData {
                national_dex_id: 279,
                names: NamesData {
                    names: [
                        "ペリッパー",
                        "Pelipper",
                        "Bekipan",
                        "Pelipper",
                        "Pelipper",
                        "Pelipper",
                        "패리퍼",
                        "大嘴鸥",
                        "大嘴鷗",
                    ],
                },
            },
            Self::Ralts(_) => &SpeciesData {
                national_dex_id: 280,
                names: NamesData {
                    names: [
                        "ラルトス",
                        "Ralts",
                        "Tarsal",
                        "Ralts",
                        "Trasla",
                        "Ralts",
                        "랄토스",
                        "拉鲁拉丝",
                        "拉魯拉絲",
                    ],
                },
            },
            Self::Kirlia(_) => &SpeciesData {
                national_dex_id: 281,
                names: NamesData {
                    names: [
                        "キルリア",
                        "Kirlia",
                        "Kirlia",
                        "Kirlia",
                        "Kirlia",
                        "Kirlia",
                        "킬리아",
                        "奇鲁莉安",
                        "奇魯莉安",
                    ],
                },
            },
            Self::Gardevoir(_) => &SpeciesData {
                national_dex_id: 282,
                names: NamesData {
                    names: [
                        "サーナイト",
                        "Gardevoir",
                        "Gardevoir",
                        "Gardevoir",
                        "Guardevoir",
                        "Gardevoir",
                        "가디안",
                        "沙奈朵",
                        "沙奈朵",
                    ],
                },
            },
            Self::Surskit(_) => &SpeciesData {
                national_dex_id: 283,
                names: NamesData {
                    names: [
                        "アメタマ",
                        "Surskit",
                        "Arakdo",
                        "Surskit",
                        "Gehweiher",
                        "Surskit",
                        "비구술",
                        "溜溜糖球",
                        "溜溜糖球",
                    ],
                },
            },
            Self::Masquerain(_) => &SpeciesData {
                national_dex_id: 284,
                names: NamesData {
                    names: [
                        "アメモース",
                        "Masquerain",
                        "Maskadra",
                        "Masquerain",
                        "Maskeregen",
                        "Masquerain",
                        "비나방",
                        "雨翅蛾",
                        "雨翅蛾",
                    ],
                },
            },
            Self::Shroomish(_) => &SpeciesData {
                national_dex_id: 285,
                names: NamesData {
                    names: [
                        "キノココ",
                        "Shroomish",
                        "Balignon",
                        "Shroomish",
                        "Knilz",
                        "Shroomish",
                        "버섯꼬",
                        "蘑蘑菇",
                        "蘑蘑菇",
                    ],
                },
            },
            Self::Breloom(_) => &SpeciesData {
                national_dex_id: 286,
                names: NamesData {
                    names: [
                        "キノガッサ",
                        "Breloom",
                        "Chapignon",
                        "Breloom",
                        "Kapilz",
                        "Breloom",
                        "버섯모",
                        "斗笠菇",
                        "斗笠菇",
                    ],
                },
            },
            Self::Slakoth(_) => &SpeciesData {
                national_dex_id: 287,
                names: NamesData {
                    names: [
                        "ナマケロ",
                        "Slakoth",
                        "Parecool",
                        "Slakoth",
                        "Bummelz",
                        "Slakoth",
                        "게을로",
                        "懒人獭",
                        "懶人獺",
                    ],
                },
            },
            Self::Vigoroth(_) => &SpeciesData {
                national_dex_id: 288,
                names: NamesData {
                    names: [
                        "ヤルキモノ",
                        "Vigoroth",
                        "Vigoroth",
                        "Vigoroth",
                        "Muntier",
                        "Vigoroth",
                        "발바로",
                        "过动猿",
                        "過動猿",
                    ],
                },
            },
            Self::Slaking(_) => &SpeciesData {
                national_dex_id: 289,
                names: NamesData {
                    names: [
                        "ケッキング",
                        "Slaking",
                        "Monaflèmit",
                        "Slaking",
                        "Letarking",
                        "Slaking",
                        "게을킹",
                        "请假王",
                        "請假王",
                    ],
                },
            },
            Self::Nincada(_) => &SpeciesData {
                national_dex_id: 290,
                names: NamesData {
                    names: [
                        "ツチニン",
                        "Nincada",
                        "Ningale",
                        "Nincada",
                        "Nincada",
                        "Nincada",
                        "토중몬",
                        "土居忍士",
                        "土居忍士",
                    ],
                },
            },
            Self::Ninjask(_) => &SpeciesData {
                national_dex_id: 291,
                names: NamesData {
                    names: [
                        "テッカニン",
                        "Ninjask",
                        "Ninjask",
                        "Ninjask",
                        "Ninjask",
                        "Ninjask",
                        "아이스크",
                        "铁面忍者",
                        "鐵面忍者",
                    ],
                },
            },
            Self::Shedinja(_) => &SpeciesData {
                national_dex_id: 292,
                names: NamesData {
                    names: [
                        "ヌケニン",
                        "Shedinja",
                        "Munja",
                        "Shedinja",
                        "Ninjatom",
                        "Shedinja",
                        "껍질몬",
                        "脱壳忍者",
                        "脫殼忍者",
                    ],
                },
            },
            Self::Whismur(_) => &SpeciesData {
                national_dex_id: 293,
                names: NamesData {
                    names: [
                        "ゴニョニョ",
                        "Whismur",
                        "Chuchmur",
                        "Whismur",
                        "Flurmel",
                        "Whismur",
                        "소곤룡",
                        "咕妞妞",
                        "咕妞妞",
                    ],
                },
            },
            Self::Loudred(_) => &SpeciesData {
                national_dex_id: 294,
                names: NamesData {
                    names: [
                        "ドゴーム",
                        "Loudred",
                        "Ramboum",
                        "Loudred",
                        "Krakeelo",
                        "Loudred",
                        "노공룡",
                        "吼爆弹",
                        "吼爆彈",
                    ],
                },
            },
            Self::Exploud(_) => &SpeciesData {
                national_dex_id: 295,
                names: NamesData {
                    names: [
                        "バクオング",
                        "Exploud",
                        "Brouhabam",
                        "Exploud",
                        "Krawumms",
                        "Exploud",
                        "폭음룡",
                        "爆音怪",
                        "爆音怪",
                    ],
                },
            },
            Self::Makuhita(_) => &SpeciesData {
                national_dex_id: 296,
                names: NamesData {
                    names: [
                        "マクノシタ",
                        "Makuhita",
                        "Makuhita",
                        "Makuhita",
                        "Makuhita",
                        "Makuhita",
                        "마크탕",
                        "幕下力士",
                        "幕下力士",
                    ],
                },
            },
            Self::Hariyama(_) => &SpeciesData {
                national_dex_id: 297,
                names: NamesData {
                    names: [
                        "ハリテヤマ",
                        "Hariyama",
                        "Hariyama",
                        "Hariyama",
                        "Hariyama",
                        "Hariyama",
                        "하리뭉",
                        "铁掌力士",
                        "鐵掌力士",
                    ],
                },
            },
            Self::Azurill(_) => &SpeciesData {
                national_dex_id: 298,
                names: NamesData {
                    names: [
                        "ルリリ",
                        "Azurill",
                        "Azurill",
                        "Azurill",
                        "Azurill",
                        "Azurill",
                        "루리리",
                        "露力丽",
                        "露力麗",
                    ],
                },
            },
            Self::Nosepass(_) => &SpeciesData {
                national_dex_id: 299,
                names: NamesData {
                    names: [
                        "ノズパス",
                        "Nosepass",
                        "Tarinor",
                        "Nosepass",
                        "Nasgnet",
                        "Nosepass",
                        "코코파스",
                        "朝北鼻",
                        "朝北鼻",
                    ],
                },
            },
            Self::Skitty(_) => &SpeciesData {
                national_dex_id: 300,
                names: NamesData {
                    names: [
                        "エネコ",
                        "Skitty",
                        "Skitty",
                        "Skitty",
                        "Eneco",
                        "Skitty",
                        "에나비",
                        "向尾喵",
                        "向尾喵",
                    ],
                },
            },
            Self::Delcatty(_) => &SpeciesData {
                national_dex_id: 301,
                names: NamesData {
                    names: [
                        "エネコロロ",
                        "Delcatty",
                        "Delcatty",
                        "Delcatty",
                        "Enekoro",
                        "Delcatty",
                        "델케티",
                        "优雅猫",
                        "優雅貓",
                    ],
                },
            },
            Self::Sableye(_) => &SpeciesData {
                national_dex_id: 302,
                names: NamesData {
                    names: [
                        "ヤミラミ",
                        "Sableye",
                        "Ténéfix",
                        "Sableye",
                        "Zobiris",
                        "Sableye",
                        "깜까미",
                        "勾魂眼",
                        "勾魂眼",
                    ],
                },
            },
            Self::Mawile(_) => &SpeciesData {
                national_dex_id: 303,
                names: NamesData {
                    names: [
                        "クチート",
                        "Mawile",
                        "Mysdibule",
                        "Mawile",
                        "Flunkifer",
                        "Mawile",
                        "입치트",
                        "大嘴娃",
                        "大嘴娃",
                    ],
                },
            },
            Self::Aron(_) => &SpeciesData {
                national_dex_id: 304,
                names: NamesData {
                    names: [
                        "ココドラ",
                        "Aron",
                        "Galekid",
                        "Aron",
                        "Stollunior",
                        "Aron",
                        "가보리",
                        "可可多拉",
                        "可可多拉",
                    ],
                },
            },
            Self::Lairon(_) => &SpeciesData {
                national_dex_id: 305,
                names: NamesData {
                    names: [
                        "コドラ",
                        "Lairon",
                        "Galegon",
                        "Lairon",
                        "Stollrak",
                        "Lairon",
                        "갱도라",
                        "可多拉",
                        "可多拉",
                    ],
                },
            },
            Self::Aggron(_) => &SpeciesData {
                national_dex_id: 306,
                names: NamesData {
                    names: [
                        "ボスゴドラ",
                        "Aggron",
                        "Galeking",
                        "Aggron",
                        "Stolloss",
                        "Aggron",
                        "보스로라",
                        "波士可多拉",
                        "波士可多拉",
                    ],
                },
            },
            Self::Meditite(_) => &SpeciesData {
                national_dex_id: 307,
                names: NamesData {
                    names: [
                        "アサナン",
                        "Meditite",
                        "Méditikka",
                        "Meditite",
                        "Meditie",
                        "Meditite",
                        "요가랑",
                        "玛沙那",
                        "瑪沙那",
                    ],
                },
            },
            Self::Medicham(_) => &SpeciesData {
                national_dex_id: 308,
                names: NamesData {
                    names: [
                        "チャーレム",
                        "Medicham",
                        "Charmina",
                        "Medicham",
                        "Meditalis",
                        "Medicham",
                        "요가램",
                        "恰雷姆",
                        "恰雷姆",
                    ],
                },
            },
            Self::Electrike(_) => &SpeciesData {
                national_dex_id: 309,
                names: NamesData {
                    names: [
                        "ラクライ",
                        "Electrike",
                        "Dynavolt",
                        "Electrike",
                        "Frizelbliz",
                        "Electrike",
                        "썬더라이",
                        "落雷兽",
                        "落雷獸",
                    ],
                },
            },
            Self::Manectric(_) => &SpeciesData {
                national_dex_id: 310,
                names: NamesData {
                    names: [
                        "ライボルト",
                        "Manectric",
                        "Élecsprint",
                        "Manectric",
                        "Voltenso",
                        "Manectric",
                        "썬더볼트",
                        "雷电兽",
                        "雷電獸",
                    ],
                },
            },
            Self::Plusle(_) => &SpeciesData {
                national_dex_id: 311,
                names: NamesData {
                    names: [
                        "プラスル",
                        "Plusle",
                        "Posipi",
                        "Plusle",
                        "Plusle",
                        "Plusle",
                        "플러시",
                        "正电拍拍",
                        "正電拍拍",
                    ],
                },
            },
            Self::Minun(_) => &SpeciesData {
                national_dex_id: 312,
                names: NamesData {
                    names: [
                        "マイナン",
                        "Minun",
                        "Négapi",
                        "Minun",
                        "Minun",
                        "Minun",
                        "마이농",
                        "负电拍拍",
                        "負電拍拍",
                    ],
                },
            },
            Self::Volbeat(_) => &SpeciesData {
                national_dex_id: 313,
                names: NamesData {
                    names: [
                        "バルビート",
                        "Volbeat",
                        "Muciole",
                        "Volbeat",
                        "Volbeat",
                        "Volbeat",
                        "볼비트",
                        "电萤虫",
                        "電螢蟲",
                    ],
                },
            },
            Self::Illumise(_) => &SpeciesData {
                national_dex_id: 314,
                names: NamesData {
                    names: [
                        "イルミーゼ",
                        "Illumise",
                        "Lumivole",
                        "Illumise",
                        "Illumise",
                        "Illumise",
                        "네오비트",
                        "甜甜萤",
                        "甜甜螢",
                    ],
                },
            },
            Self::Roselia(_) => &SpeciesData {
                national_dex_id: 315,
                names: NamesData {
                    names: [
                        "ロゼリア",
                        "Roselia",
                        "Rosélia",
                        "Roselia",
                        "Roselia",
                        "Roselia",
                        "로젤리아",
                        "毒蔷薇",
                        "毒薔薇",
                    ],
                },
            },
            Self::Gulpin(_) => &SpeciesData {
                national_dex_id: 316,
                names: NamesData {
                    names: [
                        "ゴクリン",
                        "Gulpin",
                        "Gloupti",
                        "Gulpin",
                        "Schluppuck",
                        "Gulpin",
                        "꼴깍몬",
                        "溶食兽",
                        "溶食獸",
                    ],
                },
            },
            Self::Swalot(_) => &SpeciesData {
                national_dex_id: 317,
                names: NamesData {
                    names: [
                        "マルノーム",
                        "Swalot",
                        "Avaltout",
                        "Swalot",
                        "Schlukwech",
                        "Swalot",
                        "꿀꺽몬",
                        "吞食兽",
                        "吞食獸",
                    ],
                },
            },
            Self::Carvanha(_) => &SpeciesData {
                national_dex_id: 318,
                names: NamesData {
                    names: [
                        "キバニア",
                        "Carvanha",
                        "Carvanha",
                        "Carvanha",
                        "Kanivanha",
                        "Carvanha",
                        "샤프니아",
                        "利牙鱼",
                        "利牙魚",
                    ],
                },
            },
            Self::Sharpedo(_) => &SpeciesData {
                national_dex_id: 319,
                names: NamesData {
                    names: [
                        "サメハダー",
                        "Sharpedo",
                        "Sharpedo",
                        "Sharpedo",
                        "Tohaido",
                        "Sharpedo",
                        "샤크니아",
                        "巨牙鲨",
                        "巨牙鯊",
                    ],
                },
            },
            Self::Wailmer(_) => &SpeciesData {
                national_dex_id: 320,
                names: NamesData {
                    names: [
                        "ホエルコ",
                        "Wailmer",
                        "Wailmer",
                        "Wailmer",
                        "Wailmer",
                        "Wailmer",
                        "고래왕자",
                        "吼吼鲸",
                        "吼吼鯨",
                    ],
                },
            },
            Self::Wailord(_) => &SpeciesData {
                national_dex_id: 321,
                names: NamesData {
                    names: [
                        "ホエルオー",
                        "Wailord",
                        "Wailord",
                        "Wailord",
                        "Wailord",
                        "Wailord",
                        "고래왕",
                        "吼鲸王",
                        "吼鯨王",
                    ],
                },
            },
            Self::Numel(_) => &SpeciesData {
                national_dex_id: 322,
                names: NamesData {
                    names: [
                        "ドンメル",
                        "Numel",
                        "Chamallot",
                        "Numel",
                        "Camaub",
                        "Numel",
                        "둔타",
                        "呆火驼",
                        "呆火駝",
                    ],
                },
            },
            Self::Camerupt(_) => &SpeciesData {
                national_dex_id: 323,
                names: NamesData {
                    names: [
                        "バクーダ",
                        "Camerupt",
                        "Camérupt",
                        "Camerupt",
                        "Camerupt",
                        "Camerupt",
                        "폭타",
                        "喷火驼",
                        "噴火駝",
                    ],
                },
            },
            Self::Torkoal(_) => &SpeciesData {
                national_dex_id: 324,
                names: NamesData {
                    names: [
                        "コータス",
                        "Torkoal",
                        "Chartor",
                        "Torkoal",
                        "Qurtel",
                        "Torkoal",
                        "코터스",
                        "煤炭龟",
                        "煤炭龜",
                    ],
                },
            },
            Self::Spoink(_) => &SpeciesData {
                national_dex_id: 325,
                names: NamesData {
                    names: [
                        "バネブー",
                        "Spoink",
                        "Spoink",
                        "Spoink",
                        "Spoink",
                        "Spoink",
                        "피그점프",
                        "跳跳猪",
                        "跳跳豬",
                    ],
                },
            },
            Self::Grumpig(_) => &SpeciesData {
                national_dex_id: 326,
                names: NamesData {
                    names: [
                        "ブーピッグ",
                        "Grumpig",
                        "Groret",
                        "Grumpig",
                        "Groink",
                        "Grumpig",
                        "피그킹",
                        "噗噗猪",
                        "噗噗豬",
                    ],
                },
            },
            Self::Spinda(_) => &SpeciesData {
                national_dex_id: 327,
                names: NamesData {
                    names: [
                        "パッチール",
                        "Spinda",
                        "Spinda",
                        "Spinda",
                        "Pandir",
                        "Spinda",
                        "얼루기",
                        "晃晃斑",
                        "晃晃斑",
                    ],
                },
            },
            Self::Trapinch(_) => &SpeciesData {
                national_dex_id: 328,
                names: NamesData {
                    names: [
                        "ナックラー",
                        "Trapinch",
                        "Kraknoix",
                        "Trapinch",
                        "Knacklion",
                        "Trapinch",
                        "톱치",
                        "大颚蚁",
                        "大顎蟻",
                    ],
                },
            },
            Self::Vibrava(_) => &SpeciesData {
                national_dex_id: 329,
                names: NamesData {
                    names: [
                        "ビブラーバ",
                        "Vibrava",
                        "Vibraninf",
                        "Vibrava",
                        "Vibrava",
                        "Vibrava",
                        "비브라바",
                        "超音波幼虫",
                        "超音波幼蟲",
                    ],
                },
            },
            Self::Flygon(_) => &SpeciesData {
                national_dex_id: 330,
                names: NamesData {
                    names: [
                        "フライゴン",
                        "Flygon",
                        "Libégon",
                        "Flygon",
                        "Libelldra",
                        "Flygon",
                        "플라이곤",
                        "沙漠蜻蜓",
                        "沙漠蜻蜓",
                    ],
                },
            },
            Self::Cacnea(_) => &SpeciesData {
                national_dex_id: 331,
                names: NamesData {
                    names: [
                        "サボネア",
                        "Cacnea",
                        "Cacnea",
                        "Cacnea",
                        "Tuska",
                        "Cacnea",
                        "선인왕",
                        "刺球仙人掌",
                        "刺球仙人掌",
                    ],
                },
            },
            Self::Cacturne(_) => &SpeciesData {
                national_dex_id: 332,
                names: NamesData {
                    names: [
                        "ノクタス",
                        "Cacturne",
                        "Cacturne",
                        "Cacturne",
                        "Noktuska",
                        "Cacturne",
                        "밤선인",
                        "梦歌仙人掌",
                        "夢歌仙人掌",
                    ],
                },
            },
            Self::Swablu(_) => &SpeciesData {
                national_dex_id: 333,
                names: NamesData {
                    names: [
                        "チルット",
                        "Swablu",
                        "Tylton",
                        "Swablu",
                        "Wablu",
                        "Swablu",
                        "파비코",
                        "青绵鸟",
                        "青綿鳥",
                    ],
                },
            },
            Self::Altaria(_) => &SpeciesData {
                national_dex_id: 334,
                names: NamesData {
                    names: [
                        "チルタリス",
                        "Altaria",
                        "Altaria",
                        "Altaria",
                        "Altaria",
                        "Altaria",
                        "파비코리",
                        "七夕青鸟",
                        "七夕青鳥",
                    ],
                },
            },
            Self::Zangoose(_) => &SpeciesData {
                national_dex_id: 335,
                names: NamesData {
                    names: [
                        "ザングース",
                        "Zangoose",
                        "Mangriff",
                        "Zangoose",
                        "Sengo",
                        "Zangoose",
                        "쟝고",
                        "猫鼬斩",
                        "貓鼬斬",
                    ],
                },
            },
            Self::Seviper(_) => &SpeciesData {
                national_dex_id: 336,
                names: NamesData {
                    names: [
                        "ハブネーク",
                        "Seviper",
                        "Séviper",
                        "Seviper",
                        "Vipitis",
                        "Seviper",
                        "세비퍼",
                        "饭匙蛇",
                        "飯匙蛇",
                    ],
                },
            },
            Self::Lunatone(_) => &SpeciesData {
                national_dex_id: 337,
                names: NamesData {
                    names: [
                        "ルナトーン",
                        "Lunatone",
                        "Séléroc",
                        "Lunatone",
                        "Lunastein",
                        "Lunatone",
                        "루나톤",
                        "月石",
                        "月石",
                    ],
                },
            },
            Self::Solrock(_) => &SpeciesData {
                national_dex_id: 338,
                names: NamesData {
                    names: [
                        "ソルロック",
                        "Solrock",
                        "Solaroc",
                        "Solrock",
                        "Sonnfel",
                        "Solrock",
                        "솔록",
                        "太阳岩",
                        "太陽岩",
                    ],
                },
            },
            Self::Barboach(_) => &SpeciesData {
                national_dex_id: 339,
                names: NamesData {
                    names: [
                        "ドジョッチ",
                        "Barboach",
                        "Barloche",
                        "Barboach",
                        "Schmerbe",
                        "Barboach",
                        "미꾸리",
                        "泥泥鳅",
                        "泥泥鰍",
                    ],
                },
            },
            Self::Whiscash(_) => &SpeciesData {
                national_dex_id: 340,
                names: NamesData {
                    names: [
                        "ナマズン",
                        "Whiscash",
                        "Barbicha",
                        "Whiscash",
                        "Welsar",
                        "Whiscash",
                        "메깅",
                        "鲶鱼王",
                        "鯰魚王",
                    ],
                },
            },
            Self::Corphish(_) => &SpeciesData {
                national_dex_id: 341,
                names: NamesData {
                    names: [
                        "ヘイガニ",
                        "Corphish",
                        "Écrapince",
                        "Corphish",
                        "Krebscorps",
                        "Corphish",
                        "가재군",
                        "龙虾小兵",
                        "龍蝦小兵",
                    ],
                },
            },
            Self::Crawdaunt(_) => &SpeciesData {
                national_dex_id: 342,
                names: NamesData {
                    names: [
                        "シザリガー",
                        "Crawdaunt",
                        "Colhomard",
                        "Crawdaunt",
                        "Krebutack",
                        "Crawdaunt",
                        "가재장군",
                        "铁螯龙虾",
                        "鐵螯龍蝦",
                    ],
                },
            },
            Self::Baltoy(_) => &SpeciesData {
                national_dex_id: 343,
                names: NamesData {
                    names: [
                        "ヤジロン",
                        "Baltoy",
                        "Balbuto",
                        "Baltoy",
                        "Puppance",
                        "Baltoy",
                        "오뚝군",
                        "天秤偶",
                        "天秤偶",
                    ],
                },
            },
            Self::Claydol(_) => &SpeciesData {
                national_dex_id: 344,
                names: NamesData {
                    names: [
                        "ネンドール",
                        "Claydol",
                        "Kaorine",
                        "Claydol",
                        "Lepumentas",
                        "Claydol",
                        "점토도리",
                        "念力土偶",
                        "念力土偶",
                    ],
                },
            },
            Self::Lileep(_) => &SpeciesData {
                national_dex_id: 345,
                names: NamesData {
                    names: [
                        "リリーラ",
                        "Lileep",
                        "Lilia",
                        "Lileep",
                        "Liliep",
                        "Lileep",
                        "릴링",
                        "触手百合",
                        "觸手百合",
                    ],
                },
            },
            Self::Cradily(_) => &SpeciesData {
                national_dex_id: 346,
                names: NamesData {
                    names: [
                        "ユレイドル",
                        "Cradily",
                        "Vacilys",
                        "Cradily",
                        "Wielie",
                        "Cradily",
                        "릴리요",
                        "摇篮百合",
                        "搖籃百合",
                    ],
                },
            },
            Self::Anorith(_) => &SpeciesData {
                national_dex_id: 347,
                names: NamesData {
                    names: [
                        "アノプス",
                        "Anorith",
                        "Anorith",
                        "Anorith",
                        "Anorith",
                        "Anorith",
                        "아노딥스",
                        "太古羽虫",
                        "太古羽蟲",
                    ],
                },
            },
            Self::Armaldo(_) => &SpeciesData {
                national_dex_id: 348,
                names: NamesData {
                    names: [
                        "アーマルド",
                        "Armaldo",
                        "Armaldo",
                        "Armaldo",
                        "Armaldo",
                        "Armaldo",
                        "아말도",
                        "太古盔甲",
                        "太古盔甲",
                    ],
                },
            },
            Self::Feebas(_) => &SpeciesData {
                national_dex_id: 349,
                names: NamesData {
                    names: [
                        "ヒンバス",
                        "Feebas",
                        "Barpau",
                        "Feebas",
                        "Barschwa",
                        "Feebas",
                        "빈티나",
                        "丑丑鱼",
                        "醜醜魚",
                    ],
                },
            },
            Self::Milotic(_) => &SpeciesData {
                national_dex_id: 350,
                names: NamesData {
                    names: [
                        "ミロカロス",
                        "Milotic",
                        "Milobellus",
                        "Milotic",
                        "Milotic",
                        "Milotic",
                        "밀로틱",
                        "美纳斯",
                        "美納斯",
                    ],
                },
            },
            Self::Castform(_) => &SpeciesData {
                national_dex_id: 351,
                names: NamesData {
                    names: [
                        "ポワルン",
                        "Castform",
                        "Morphéo",
                        "Castform",
                        "Formeo",
                        "Castform",
                        "캐스퐁",
                        "飘浮泡泡",
                        "飄浮泡泡",
                    ],
                },
            },
            Self::Kecleon(_) => &SpeciesData {
                national_dex_id: 352,
                names: NamesData {
                    names: [
                        "カクレオン",
                        "Kecleon",
                        "Kecleon",
                        "Kecleon",
                        "Kecleon",
                        "Kecleon",
                        "켈리몬",
                        "变隐龙",
                        "變隱龍",
                    ],
                },
            },
            Self::Shuppet(_) => &SpeciesData {
                national_dex_id: 353,
                names: NamesData {
                    names: [
                        "カゲボウズ",
                        "Shuppet",
                        "Polichombr",
                        "Shuppet",
                        "Shuppet",
                        "Shuppet",
                        "어둠대신",
                        "怨影娃娃",
                        "怨影娃娃",
                    ],
                },
            },
            Self::Banette(_) => &SpeciesData {
                national_dex_id: 354,
                names: NamesData {
                    names: [
                        "ジュペッタ",
                        "Banette",
                        "Branette",
                        "Banette",
                        "Banette",
                        "Banette",
                        "다크펫",
                        "诅咒娃娃",
                        "詛咒娃娃",
                    ],
                },
            },
            Self::Duskull(_) => &SpeciesData {
                national_dex_id: 355,
                names: NamesData {
                    names: [
                        "ヨマワル",
                        "Duskull",
                        "Skelénox",
                        "Duskull",
                        "Zwirrlicht",
                        "Duskull",
                        "해골몽",
                        "夜巡灵",
                        "夜巡靈",
                    ],
                },
            },
            Self::Dusclops(_) => &SpeciesData {
                national_dex_id: 356,
                names: NamesData {
                    names: [
                        "サマヨール",
                        "Dusclops",
                        "Téraclope",
                        "Dusclops",
                        "Zwirrklop",
                        "Dusclops",
                        "미라몽",
                        "彷徨夜灵",
                        "彷徨夜靈",
                    ],
                },
            },
            Self::Tropius(_) => &SpeciesData {
                national_dex_id: 357,
                names: NamesData {
                    names: [
                        "トロピウス",
                        "Tropius",
                        "Tropius",
                        "Tropius",
                        "Tropius",
                        "Tropius",
                        "트로피우스",
                        "热带龙",
                        "熱帶龍",
                    ],
                },
            },
            Self::Chimecho(_) => &SpeciesData {
                national_dex_id: 358,
                names: NamesData {
                    names: [
                        "チリーン",
                        "Chimecho",
                        "Éoko",
                        "Chimecho",
                        "Palimpalim",
                        "Chimecho",
                        "치렁",
                        "风铃铃",
                        "風鈴鈴",
                    ],
                },
            },
            Self::Absol(_) => &SpeciesData {
                national_dex_id: 359,
                names: NamesData {
                    names: [
                        "アブソル",
                        "Absol",
                        "Absol",
                        "Absol",
                        "Absol",
                        "Absol",
                        "앱솔",
                        "阿勃梭鲁",
                        "阿勃梭魯",
                    ],
                },
            },
            Self::Wynaut(_) => &SpeciesData {
                national_dex_id: 360,
                names: NamesData {
                    names: [
                        "ソーナノ",
                        "Wynaut",
                        "Okéoké",
                        "Wynaut",
                        "Isso",
                        "Wynaut",
                        "마자",
                        "小果然",
                        "小果然",
                    ],
                },
            },
            Self::Snorunt(_) => &SpeciesData {
                national_dex_id: 361,
                names: NamesData {
                    names: [
                        "ユキワラシ",
                        "Snorunt",
                        "Stalgamin",
                        "Snorunt",
                        "Schneppke",
                        "Snorunt",
                        "눈꼬마",
                        "雪童子",
                        "雪童子",
                    ],
                },
            },
            Self::Glalie(_) => &SpeciesData {
                national_dex_id: 362,
                names: NamesData {
                    names: [
                        "オニゴーリ",
                        "Glalie",
                        "Oniglali",
                        "Glalie",
                        "Firnontor",
                        "Glalie",
                        "얼음귀신",
                        "冰鬼护",
                        "冰鬼護",
                    ],
                },
            },
            Self::Spheal(_) => &SpeciesData {
                national_dex_id: 363,
                names: NamesData {
                    names: [
                        "タマザラシ",
                        "Spheal",
                        "Obalie",
                        "Spheal",
                        "Seemops",
                        "Spheal",
                        "대굴레오",
                        "海豹球",
                        "海豹球",
                    ],
                },
            },
            Self::Sealeo(_) => &SpeciesData {
                national_dex_id: 364,
                names: NamesData {
                    names: [
                        "トドグラー",
                        "Sealeo",
                        "Phogleur",
                        "Sealeo",
                        "Seejong",
                        "Sealeo",
                        "씨레오",
                        "海魔狮",
                        "海魔獅",
                    ],
                },
            },
            Self::Walrein(_) => &SpeciesData {
                national_dex_id: 365,
                names: NamesData {
                    names: [
                        "トドゼルガ",
                        "Walrein",
                        "Kaimorse",
                        "Walrein",
                        "Walraisa",
                        "Walrein",
                        "씨카이저",
                        "帝牙海狮",
                        "帝牙海獅",
                    ],
                },
            },
            Self::Clamperl(_) => &SpeciesData {
                national_dex_id: 366,
                names: NamesData {
                    names: [
                        "パールル",
                        "Clamperl",
                        "Coquiperl",
                        "Clamperl",
                        "Perlu",
                        "Clamperl",
                        "진주몽",
                        "珍珠贝",
                        "珍珠貝",
                    ],
                },
            },
            Self::Huntail(_) => &SpeciesData {
                national_dex_id: 367,
                names: NamesData {
                    names: [
                        "ハンテール",
                        "Huntail",
                        "Serpang",
                        "Huntail",
                        "Aalabyss",
                        "Huntail",
                        "헌테일",
                        "猎斑鱼",
                        "獵斑魚",
                    ],
                },
            },
            Self::Gorebyss(_) => &SpeciesData {
                national_dex_id: 368,
                names: NamesData {
                    names: [
                        "サクラビス",
                        "Gorebyss",
                        "Rosabyss",
                        "Gorebyss",
                        "Saganabyss",
                        "Gorebyss",
                        "분홍장이",
                        "樱花鱼",
                        "櫻花魚",
                    ],
                },
            },
            Self::Relicanth(_) => &SpeciesData {
                national_dex_id: 369,
                names: NamesData {
                    names: [
                        "ジーランス",
                        "Relicanth",
                        "Relicanth",
                        "Relicanth",
                        "Relicanth",
                        "Relicanth",
                        "시라칸",
                        "古空棘鱼",
                        "古空棘魚",
                    ],
                },
            },
            Self::Luvdisc(_) => &SpeciesData {
                national_dex_id: 370,
                names: NamesData {
                    names: [
                        "ラブカス",
                        "Luvdisc",
                        "Lovdisc",
                        "Luvdisc",
                        "Liebiskus",
                        "Luvdisc",
                        "사랑동이",
                        "爱心鱼",
                        "愛心魚",
                    ],
                },
            },
            Self::Bagon(_) => &SpeciesData {
                national_dex_id: 371,
                names: NamesData {
                    names: [
                        "タツベイ",
                        "Bagon",
                        "Draby",
                        "Bagon",
                        "Kindwurm",
                        "Bagon",
                        "아공이",
                        "宝贝龙",
                        "寶貝龍",
                    ],
                },
            },
            Self::Shelgon(_) => &SpeciesData {
                national_dex_id: 372,
                names: NamesData {
                    names: [
                        "コモルー",
                        "Shelgon",
                        "Drackhaus",
                        "Shelgon",
                        "Draschel",
                        "Shelgon",
                        "쉘곤",
                        "甲壳龙",
                        "甲殼龍",
                    ],
                },
            },
            Self::Salamence(_) => &SpeciesData {
                national_dex_id: 373,
                names: NamesData {
                    names: [
                        "ボーマンダ",
                        "Salamence",
                        "Drattak",
                        "Salamence",
                        "Brutalanda",
                        "Salamence",
                        "보만다",
                        "暴飞龙",
                        "暴飛龍",
                    ],
                },
            },
            Self::Beldum(_) => &SpeciesData {
                national_dex_id: 374,
                names: NamesData {
                    names: [
                        "ダンバル",
                        "Beldum",
                        "Terhal",
                        "Beldum",
                        "Tanhel",
                        "Beldum",
                        "메탕",
                        "铁哑铃",
                        "鐵啞鈴",
                    ],
                },
            },
            Self::Metang(_) => &SpeciesData {
                national_dex_id: 375,
                names: NamesData {
                    names: [
                        "メタング",
                        "Metang",
                        "Métang",
                        "Metang",
                        "Metang",
                        "Metang",
                        "메탕구",
                        "金属怪",
                        "金屬怪",
                    ],
                },
            },
            Self::Metagross(_) => &SpeciesData {
                national_dex_id: 376,
                names: NamesData {
                    names: [
                        "メタグロス",
                        "Metagross",
                        "Métalosse",
                        "Metagross",
                        "Metagross",
                        "Metagross",
                        "메타그로스",
                        "巨金怪",
                        "巨金怪",
                    ],
                },
            },
            Self::Regirock(_) => &SpeciesData {
                national_dex_id: 377,
                names: NamesData {
                    names: [
                        "レジロック",
                        "Regirock",
                        "Regirock",
                        "Regirock",
                        "Regirock",
                        "Regirock",
                        "레지락",
                        "雷吉洛克",
                        "雷吉洛克",
                    ],
                },
            },
            Self::Regice(_) => &SpeciesData {
                national_dex_id: 378,
                names: NamesData {
                    names: [
                        "レジアイス",
                        "Regice",
                        "Regice",
                        "Regice",
                        "Regice",
                        "Regice",
                        "레지아이스",
                        "雷吉艾斯",
                        "雷吉艾斯",
                    ],
                },
            },
            Self::Registeel(_) => &SpeciesData {
                national_dex_id: 379,
                names: NamesData {
                    names: [
                        "レジスチル",
                        "Registeel",
                        "Registeel",
                        "Registeel",
                        "Registeel",
                        "Registeel",
                        "레지스틸",
                        "雷吉斯奇鲁",
                        "雷吉斯奇魯",
                    ],
                },
            },
            Self::Latias(_) => &SpeciesData {
                national_dex_id: 380,
                names: NamesData {
                    names: [
                        "ラティアス",
                        "Latias",
                        "Latias",
                        "Latias",
                        "Latias",
                        "Latias",
                        "라티아스",
                        "拉帝亚斯",
                        "拉帝亞斯",
                    ],
                },
            },
            Self::Latios(_) => &SpeciesData {
                national_dex_id: 381,
                names: NamesData {
                    names: [
                        "ラティオス",
                        "Latios",
                        "Latios",
                        "Latios",
                        "Latios",
                        "Latios",
                        "라티오스",
                        "拉帝欧斯",
                        "拉帝歐斯",
                    ],
                },
            },
            Self::Kyogre(_) => &SpeciesData {
                national_dex_id: 382,
                names: NamesData {
                    names: [
                        "カイオーガ",
                        "Kyogre",
                        "Kyogre",
                        "Kyogre",
                        "Kyogre",
                        "Kyogre",
                        "가이오가",
                        "盖欧卡",
                        "蓋歐卡",
                    ],
                },
            },
            Self::Groudon(_) => &SpeciesData {
                national_dex_id: 383,
                names: NamesData {
                    names: [
                        "グラードン",
                        "Groudon",
                        "Groudon",
                        "Groudon",
                        "Groudon",
                        "Groudon",
                        "그란돈",
                        "固拉多",
                        "固拉多",
                    ],
                },
            },
            Self::Rayquaza(_) => &SpeciesData {
                national_dex_id: 384,
                names: NamesData {
                    names: [
                        "レックウザ",
                        "Rayquaza",
                        "Rayquaza",
                        "Rayquaza",
                        "Rayquaza",
                        "Rayquaza",
                        "레쿠쟈",
                        "烈空坐",
                        "烈空坐",
                    ],
                },
            },
            Self::Jirachi(_) => &SpeciesData {
                national_dex_id: 385,
                names: NamesData {
                    names: [
                        "ジラーチ",
                        "Jirachi",
                        "Jirachi",
                        "Jirachi",
                        "Jirachi",
                        "Jirachi",
                        "지라치",
                        "基拉祈",
                        "基拉祈",
                    ],
                },
            },
            Self::Deoxys(_) => &SpeciesData {
                national_dex_id: 386,
                names: NamesData {
                    names: [
                        "デオキシス",
                        "Deoxys",
                        "Deoxys",
                        "Deoxys",
                        "Deoxys",
                        "Deoxys",
                        "테오키스",
                        "代欧奇希斯",
                        "代歐奇希斯",
                    ],
                },
            },
            Self::Turtwig(_) => &SpeciesData {
                national_dex_id: 387,
                names: NamesData {
                    names: [
                        "ナエトル",
                        "Turtwig",
                        "Tortipouss",
                        "Turtwig",
                        "Chelast",
                        "Turtwig",
                        "모부기",
                        "草苗龟",
                        "草苗龜",
                    ],
                },
            },
            Self::Grotle(_) => &SpeciesData {
                national_dex_id: 388,
                names: NamesData {
                    names: [
                        "ハヤシガメ",
                        "Grotle",
                        "Boskara",
                        "Grotle",
                        "Chelcarain",
                        "Grotle",
                        "수풀부기",
                        "树林龟",
                        "樹林龜",
                    ],
                },
            },
            Self::Torterra(_) => &SpeciesData {
                national_dex_id: 389,
                names: NamesData {
                    names: [
                        "ドダイトス",
                        "Torterra",
                        "Torterra",
                        "Torterra",
                        "Chelterrar",
                        "Torterra",
                        "토대부기",
                        "土台龟",
                        "土台龜",
                    ],
                },
            },
            Self::Chimchar(_) => &SpeciesData {
                national_dex_id: 390,
                names: NamesData {
                    names: [
                        "ヒコザル",
                        "Chimchar",
                        "Ouisticram",
                        "Chimchar",
                        "Panflam",
                        "Chimchar",
                        "불꽃숭이",
                        "小火焰猴",
                        "小火焰猴",
                    ],
                },
            },
            Self::Monferno(_) => &SpeciesData {
                national_dex_id: 391,
                names: NamesData {
                    names: [
                        "モウカザル",
                        "Monferno",
                        "Chimpenfeu",
                        "Monferno",
                        "Panpyro",
                        "Monferno",
                        "파이숭이",
                        "猛火猴",
                        "猛火猴",
                    ],
                },
            },
            Self::Infernape(_) => &SpeciesData {
                national_dex_id: 392,
                names: NamesData {
                    names: [
                        "ゴウカザル",
                        "Infernape",
                        "Simiabraz",
                        "Infernape",
                        "Panferno",
                        "Infernape",
                        "초염몽",
                        "烈焰猴",
                        "烈焰猴",
                    ],
                },
            },
            Self::Piplup(_) => &SpeciesData {
                national_dex_id: 393,
                names: NamesData {
                    names: [
                        "ポッチャマ",
                        "Piplup",
                        "Tiplouf",
                        "Piplup",
                        "Plinfa",
                        "Piplup",
                        "팽도리",
                        "波加曼",
                        "波加曼",
                    ],
                },
            },
            Self::Prinplup(_) => &SpeciesData {
                national_dex_id: 394,
                names: NamesData {
                    names: [
                        "ポッタイシ",
                        "Prinplup",
                        "Prinplouf",
                        "Prinplup",
                        "Pliprin",
                        "Prinplup",
                        "팽태자",
                        "波皇子",
                        "波皇子",
                    ],
                },
            },
            Self::Empoleon(_) => &SpeciesData {
                national_dex_id: 395,
                names: NamesData {
                    names: [
                        "エンペルト",
                        "Empoleon",
                        "Pingoléon",
                        "Empoleon",
                        "Impoleon",
                        "Empoleon",
                        "엠페르트",
                        "帝王拿波",
                        "帝王拿波",
                    ],
                },
            },
            Self::Starly(_) => &SpeciesData {
                national_dex_id: 396,
                names: NamesData {
                    names: [
                        "ムックル",
                        "Starly",
                        "Étourmi",
                        "Starly",
                        "Staralili",
                        "Starly",
                        "찌르꼬",
                        "姆克儿",
                        "姆克兒",
                    ],
                },
            },
            Self::Staravia(_) => &SpeciesData {
                national_dex_id: 397,
                names: NamesData {
                    names: [
                        "ムクバード",
                        "Staravia",
                        "Étourvol",
                        "Staravia",
                        "Staravia",
                        "Staravia",
                        "찌르버드",
                        "姆克鸟",
                        "姆克鳥",
                    ],
                },
            },
            Self::Staraptor(_) => &SpeciesData {
                national_dex_id: 398,
                names: NamesData {
                    names: [
                        "ムクホーク",
                        "Staraptor",
                        "Étouraptor",
                        "Staraptor",
                        "Staraptor",
                        "Staraptor",
                        "찌르호크",
                        "姆克鹰",
                        "姆克鷹",
                    ],
                },
            },
            Self::Bidoof(_) => &SpeciesData {
                national_dex_id: 399,
                names: NamesData {
                    names: [
                        "ビッパ",
                        "Bidoof",
                        "Keunotor",
                        "Bidoof",
                        "Bidiza",
                        "Bidoof",
                        "비버니",
                        "大牙狸",
                        "大牙狸",
                    ],
                },
            },
            Self::Bibarel(_) => &SpeciesData {
                national_dex_id: 400,
                names: NamesData {
                    names: [
                        "ビーダル",
                        "Bibarel",
                        "Castorno",
                        "Bibarel",
                        "Bidifas",
                        "Bibarel",
                        "비버통",
                        "大尾狸",
                        "大尾狸",
                    ],
                },
            },
            Self::Kricketot(_) => &SpeciesData {
                national_dex_id: 401,
                names: NamesData {
                    names: [
                        "コロボーシ",
                        "Kricketot",
                        "Crikzik",
                        "Kricketot",
                        "Zirpurze",
                        "Kricketot",
                        "귀뚤뚜기",
                        "圆法师",
                        "圓法師",
                    ],
                },
            },
            Self::Kricketune(_) => &SpeciesData {
                national_dex_id: 402,
                names: NamesData {
                    names: [
                        "コロトック",
                        "Kricketune",
                        "Mélokrik",
                        "Kricketune",
                        "Zirpeise",
                        "Kricketune",
                        "귀뚤톡크",
                        "音箱蟀",
                        "音箱蟀",
                    ],
                },
            },
            Self::Shinx(_) => &SpeciesData {
                national_dex_id: 403,
                names: NamesData {
                    names: [
                        "コリンク",
                        "Shinx",
                        "Lixy",
                        "Shinx",
                        "Sheinux",
                        "Shinx",
                        "꼬링크",
                        "小猫怪",
                        "小貓怪",
                    ],
                },
            },
            Self::Luxio(_) => &SpeciesData {
                national_dex_id: 404,
                names: NamesData {
                    names: [
                        "ルクシオ",
                        "Luxio",
                        "Luxio",
                        "Luxio",
                        "Luxio",
                        "Luxio",
                        "럭시오",
                        "勒克猫",
                        "勒克貓",
                    ],
                },
            },
            Self::Luxray(_) => &SpeciesData {
                national_dex_id: 405,
                names: NamesData {
                    names: [
                        "レントラー",
                        "Luxray",
                        "Luxray",
                        "Luxray",
                        "Luxtra",
                        "Luxray",
                        "렌트라",
                        "伦琴猫",
                        "倫琴貓",
                    ],
                },
            },
            Self::Budew(_) => &SpeciesData {
                national_dex_id: 406,
                names: NamesData {
                    names: [
                        "スボミー",
                        "Budew",
                        "Rozbouton",
                        "Budew",
                        "Knospi",
                        "Budew",
                        "꼬몽울",
                        "含羞苞",
                        "含羞苞",
                    ],
                },
            },
            Self::Roserade(_) => &SpeciesData {
                national_dex_id: 407,
                names: NamesData {
                    names: [
                        "ロズレイド",
                        "Roserade",
                        "Roserade",
                        "Roserade",
                        "Roserade",
                        "Roserade",
                        "로즈레이드",
                        "罗丝雷朵",
                        "羅絲雷朵",
                    ],
                },
            },
            Self::Cranidos(_) => &SpeciesData {
                national_dex_id: 408,
                names: NamesData {
                    names: [
                        "ズガイドス",
                        "Cranidos",
                        "Kranidos",
                        "Cranidos",
                        "Koknodon",
                        "Cranidos",
                        "두개도스",
                        "头盖龙",
                        "頭蓋龍",
                    ],
                },
            },
            Self::Rampardos(_) => &SpeciesData {
                national_dex_id: 409,
                names: NamesData {
                    names: [
                        "ラムパルド",
                        "Rampardos",
                        "Charkos",
                        "Rampardos",
                        "Rameidon",
                        "Rampardos",
                        "램펄드",
                        "战槌龙",
                        "戰槌龍",
                    ],
                },
            },
            Self::Shieldon(_) => &SpeciesData {
                national_dex_id: 410,
                names: NamesData {
                    names: [
                        "タテトプス",
                        "Shieldon",
                        "Dinoclier",
                        "Shieldon",
                        "Schilterus",
                        "Shieldon",
                        "방패톱스",
                        "盾甲龙",
                        "盾甲龍",
                    ],
                },
            },
            Self::Bastiodon(_) => &SpeciesData {
                national_dex_id: 411,
                names: NamesData {
                    names: [
                        "トリデプス",
                        "Bastiodon",
                        "Bastiodon",
                        "Bastiodon",
                        "Bollterus",
                        "Bastiodon",
                        "바리톱스",
                        "护城龙",
                        "護城龍",
                    ],
                },
            },
            Self::Burmy(_) => &SpeciesData {
                national_dex_id: 412,
                names: NamesData {
                    names: [
                        "ミノムッチ",
                        "Burmy",
                        "Cheniti",
                        "Burmy",
                        "Burmy",
                        "Burmy",
                        "도롱충이",
                        "结草儿",
                        "結草兒",
                    ],
                },
            },
            Self::Wormadam(_) => &SpeciesData {
                national_dex_id: 413,
                names: NamesData {
                    names: [
                        "ミノマダム",
                        "Wormadam",
                        "Cheniselle",
                        "Wormadam",
                        "Burmadame",
                        "Wormadam",
                        "도롱마담",
                        "结草贵妇",
                        "結草貴婦",
                    ],
                },
            },
            Self::Mothim(_) => &SpeciesData {
                national_dex_id: 414,
                names: NamesData {
                    names: [
                        "ガーメイル",
                        "Mothim",
                        "Papilord",
                        "Mothim",
                        "Moterpel",
                        "Mothim",
                        "나메일",
                        "绅士蛾",
                        "紳士蛾",
                    ],
                },
            },
            Self::Combee(_) => &SpeciesData {
                national_dex_id: 415,
                names: NamesData {
                    names: [
                        "ミツハニー",
                        "Combee",
                        "Apitrini",
                        "Combee",
                        "Wadribie",
                        "Combee",
                        "세꿀버리",
                        "三蜜蜂",
                        "三蜜蜂",
                    ],
                },
            },
            Self::Vespiquen(_) => &SpeciesData {
                national_dex_id: 416,
                names: NamesData {
                    names: [
                        "ビークイン",
                        "Vespiquen",
                        "Apireine",
                        "Vespiquen",
                        "Honweisel",
                        "Vespiquen",
                        "비퀸",
                        "蜂女王",
                        "蜂女王",
                    ],
                },
            },
            Self::Pachirisu(_) => &SpeciesData {
                national_dex_id: 417,
                names: NamesData {
                    names: [
                        "パチリス",
                        "Pachirisu",
                        "Pachirisu",
                        "Pachirisu",
                        "Pachirisu",
                        "Pachirisu",
                        "파치리스",
                        "帕奇利兹",
                        "帕奇利茲",
                    ],
                },
            },
            Self::Buizel(_) => &SpeciesData {
                national_dex_id: 418,
                names: NamesData {
                    names: [
                        "ブイゼル",
                        "Buizel",
                        "Mustébouée",
                        "Buizel",
                        "Bamelin",
                        "Buizel",
                        "브이젤",
                        "泳圈鼬",
                        "泳圈鼬",
                    ],
                },
            },
            Self::Floatzel(_) => &SpeciesData {
                national_dex_id: 419,
                names: NamesData {
                    names: [
                        "フローゼル",
                        "Floatzel",
                        "Mustéflott",
                        "Floatzel",
                        "Bojelin",
                        "Floatzel",
                        "플로젤",
                        "浮潜鼬",
                        "浮潛鼬",
                    ],
                },
            },
            Self::Cherubi(_) => &SpeciesData {
                national_dex_id: 420,
                names: NamesData {
                    names: [
                        "チェリンボ",
                        "Cherubi",
                        "Ceribou",
                        "Cherubi",
                        "Kikugi",
                        "Cherubi",
                        "체리버",
                        "樱花宝",
                        "櫻花寶",
                    ],
                },
            },
            Self::Cherrim(_) => &SpeciesData {
                national_dex_id: 421,
                names: NamesData {
                    names: [
                        "チェリム",
                        "Cherrim",
                        "Ceriflor",
                        "Cherrim",
                        "Kinoso",
                        "Cherrim",
                        "체리꼬",
                        "樱花儿",
                        "櫻花兒",
                    ],
                },
            },
            Self::Shellos(_) => &SpeciesData {
                national_dex_id: 422,
                names: NamesData {
                    names: [
                        "カラナクシ",
                        "Shellos",
                        "Sancoki",
                        "Shellos",
                        "Schalellos",
                        "Shellos",
                        "깝질무",
                        "无壳海兔",
                        "無殼海兔",
                    ],
                },
            },
            Self::Gastrodon(_) => &SpeciesData {
                national_dex_id: 423,
                names: NamesData {
                    names: [
                        "トリトドン",
                        "Gastrodon",
                        "Tritosor",
                        "Gastrodon",
                        "Gastrodon",
                        "Gastrodon",
                        "트리토돈",
                        "海兔兽",
                        "海兔獸",
                    ],
                },
            },
            Self::Ambipom(_) => &SpeciesData {
                national_dex_id: 424,
                names: NamesData {
                    names: [
                        "エテボース",
                        "Ambipom",
                        "Capidextre",
                        "Ambipom",
                        "Ambidiffel",
                        "Ambipom",
                        "겟핸보숭",
                        "双尾怪手",
                        "雙尾怪手",
                    ],
                },
            },
            Self::Drifloon(_) => &SpeciesData {
                national_dex_id: 425,
                names: NamesData {
                    names: [
                        "フワンテ",
                        "Drifloon",
                        "Baudrive",
                        "Drifloon",
                        "Driftlon",
                        "Drifloon",
                        "흔들풍손",
                        "飘飘球",
                        "飄飄球",
                    ],
                },
            },
            Self::Drifblim(_) => &SpeciesData {
                national_dex_id: 426,
                names: NamesData {
                    names: [
                        "フワライド",
                        "Drifblim",
                        "Grodrive",
                        "Drifblim",
                        "Drifzepeli",
                        "Drifblim",
                        "둥실라이드",
                        "随风球",
                        "隨風球",
                    ],
                },
            },
            Self::Buneary(_) => &SpeciesData {
                national_dex_id: 427,
                names: NamesData {
                    names: [
                        "ミミロル",
                        "Buneary",
                        "Laporeille",
                        "Buneary",
                        "Haspiror",
                        "Buneary",
                        "이어롤",
                        "卷卷耳",
                        "捲捲耳",
                    ],
                },
            },
            Self::Lopunny(_) => &SpeciesData {
                national_dex_id: 428,
                names: NamesData {
                    names: [
                        "ミミロップ",
                        "Lopunny",
                        "Lockpin",
                        "Lopunny",
                        "Schlapor",
                        "Lopunny",
                        "이어롭",
                        "长耳兔",
                        "長耳兔",
                    ],
                },
            },
            Self::Mismagius(_) => &SpeciesData {
                national_dex_id: 429,
                names: NamesData {
                    names: [
                        "ムウマージ",
                        "Mismagius",
                        "Magirêve",
                        "Mismagius",
                        "Traunmagil",
                        "Mismagius",
                        "무우마직",
                        "梦妖魔",
                        "夢妖魔",
                    ],
                },
            },
            Self::Honchkrow(_) => &SpeciesData {
                national_dex_id: 430,
                names: NamesData {
                    names: [
                        "ドンカラス",
                        "Honchkrow",
                        "Corboss",
                        "Honchkrow",
                        "Kramshef",
                        "Honchkrow",
                        "돈크로우",
                        "乌鸦头头",
                        "烏鴉頭頭",
                    ],
                },
            },
            Self::Glameow(_) => &SpeciesData {
                national_dex_id: 431,
                names: NamesData {
                    names: [
                        "ニャルマー",
                        "Glameow",
                        "Chaglam",
                        "Glameow",
                        "Charmian",
                        "Glameow",
                        "나옹마",
                        "魅力喵",
                        "魅力喵",
                    ],
                },
            },
            Self::Purugly(_) => &SpeciesData {
                national_dex_id: 432,
                names: NamesData {
                    names: [
                        "ブニャット",
                        "Purugly",
                        "Chaffreux",
                        "Purugly",
                        "Shnurgarst",
                        "Purugly",
                        "몬냥이",
                        "东施喵",
                        "東施喵",
                    ],
                },
            },
            Self::Chingling(_) => &SpeciesData {
                national_dex_id: 433,
                names: NamesData {
                    names: [
                        "リーシャン",
                        "Chingling",
                        "Korillon",
                        "Chingling",
                        "Klingplim",
                        "Chingling",
                        "랑딸랑",
                        "铃铛响",
                        "鈴鐺響",
                    ],
                },
            },
            Self::Stunky(_) => &SpeciesData {
                national_dex_id: 434,
                names: NamesData {
                    names: [
                        "スカンプー",
                        "Stunky",
                        "Moufouette",
                        "Stunky",
                        "Skunkapuh",
                        "Stunky",
                        "스컹뿡",
                        "臭鼬噗",
                        "臭鼬噗",
                    ],
                },
            },
            Self::Skuntank(_) => &SpeciesData {
                national_dex_id: 435,
                names: NamesData {
                    names: [
                        "スカタンク",
                        "Skuntank",
                        "Moufflair",
                        "Skuntank",
                        "Skuntank",
                        "Skuntank",
                        "스컹탱크",
                        "坦克臭鼬",
                        "坦克臭鼬",
                    ],
                },
            },
            Self::Bronzor(_) => &SpeciesData {
                national_dex_id: 436,
                names: NamesData {
                    names: [
                        "ドーミラー",
                        "Bronzor",
                        "Archéomire",
                        "Bronzor",
                        "Bronzel",
                        "Bronzor",
                        "동미러",
                        "铜镜怪",
                        "銅鏡怪",
                    ],
                },
            },
            Self::Bronzong(_) => &SpeciesData {
                national_dex_id: 437,
                names: NamesData {
                    names: [
                        "ドータクン",
                        "Bronzong",
                        "Archéodong",
                        "Bronzong",
                        "Bronzong",
                        "Bronzong",
                        "동탁군",
                        "青铜钟",
                        "青銅鐘",
                    ],
                },
            },
            Self::Bonsly(_) => &SpeciesData {
                national_dex_id: 438,
                names: NamesData {
                    names: [
                        "ウソハチ",
                        "Bonsly",
                        "Manzaï",
                        "Bonsly",
                        "Mobai",
                        "Bonsly",
                        "꼬지지",
                        "盆才怪",
                        "盆才怪",
                    ],
                },
            },
            Self::MimeJr(_) => &SpeciesData {
                national_dex_id: 439,
                names: NamesData {
                    names: [
                        "マネネ",
                        "Mime Jr.",
                        "Mime Jr.",
                        "Mime Jr.",
                        "Pantimimi",
                        "Mime Jr.",
                        "흉내내",
                        "魔尼尼",
                        "魔尼尼",
                    ],
                },
            },
            Self::Happiny(_) => &SpeciesData {
                national_dex_id: 440,
                names: NamesData {
                    names: [
                        "ピンプク",
                        "Happiny",
                        "Ptiravi",
                        "Happiny",
                        "Wonneira",
                        "Happiny",
                        "핑복",
                        "小福蛋",
                        "小福蛋",
                    ],
                },
            },
            Self::Chatot(_) => &SpeciesData {
                national_dex_id: 441,
                names: NamesData {
                    names: [
                        "ペラップ",
                        "Chatot",
                        "Pijako",
                        "Chatot",
                        "Plaudagei",
                        "Chatot",
                        "페라페",
                        "聒噪鸟",
                        "聒噪鳥",
                    ],
                },
            },
            Self::Spiritomb(_) => &SpeciesData {
                national_dex_id: 442,
                names: NamesData {
                    names: [
                        "ミカルゲ",
                        "Spiritomb",
                        "Spiritomb",
                        "Spiritomb",
                        "Kryppuk",
                        "Spiritomb",
                        "화강돌",
                        "花岩怪",
                        "花岩怪",
                    ],
                },
            },
            Self::Gible(_) => &SpeciesData {
                national_dex_id: 443,
                names: NamesData {
                    names: [
                        "フカマル",
                        "Gible",
                        "Griknot",
                        "Gible",
                        "Kaumalat",
                        "Gible",
                        "딥상어동",
                        "圆陆鲨",
                        "圓陸鯊",
                    ],
                },
            },
            Self::Gabite(_) => &SpeciesData {
                national_dex_id: 444,
                names: NamesData {
                    names: [
                        "ガバイト",
                        "Gabite",
                        "Carmache",
                        "Gabite",
                        "Knarksel",
                        "Gabite",
                        "한바이트",
                        "尖牙陆鲨",
                        "尖牙陸鯊",
                    ],
                },
            },
            Self::Garchomp(_) => &SpeciesData {
                national_dex_id: 445,
                names: NamesData {
                    names: [
                        "ガブリアス",
                        "Garchomp",
                        "Carchacrok",
                        "Garchomp",
                        "Knakrack",
                        "Garchomp",
                        "한카리아스",
                        "烈咬陆鲨",
                        "烈咬陸鯊",
                    ],
                },
            },
            Self::Munchlax(_) => &SpeciesData {
                national_dex_id: 446,
                names: NamesData {
                    names: [
                        "ゴンベ",
                        "Munchlax",
                        "Goinfrex",
                        "Munchlax",
                        "Mampfaxo",
                        "Munchlax",
                        "먹고자",
                        "小卡比兽",
                        "小卡比獸",
                    ],
                },
            },
            Self::Riolu(_) => &SpeciesData {
                national_dex_id: 447,
                names: NamesData {
                    names: [
                        "リオル",
                        "Riolu",
                        "Riolu",
                        "Riolu",
                        "Riolu",
                        "Riolu",
                        "리오르",
                        "利欧路",
                        "利歐路",
                    ],
                },
            },
            Self::Lucario(_) => &SpeciesData {
                national_dex_id: 448,
                names: NamesData {
                    names: [
                        "ルカリオ",
                        "Lucario",
                        "Lucario",
                        "Lucario",
                        "Lucario",
                        "Lucario",
                        "루카리오",
                        "路卡利欧",
                        "路卡利歐",
                    ],
                },
            },
            Self::Hippopotas(_) => &SpeciesData {
                national_dex_id: 449,
                names: NamesData {
                    names: [
                        "ヒポポタス",
                        "Hippopotas",
                        "Hippopotas",
                        "Hippopotas",
                        "Hippopotas",
                        "Hippopotas",
                        "히포포타스",
                        "沙河马",
                        "沙河馬",
                    ],
                },
            },
            Self::Hippowdon(_) => &SpeciesData {
                national_dex_id: 450,
                names: NamesData {
                    names: [
                        "カバルドン",
                        "Hippowdon",
                        "Hippodocus",
                        "Hippowdon",
                        "Hippoterus",
                        "Hippowdon",
                        "하마돈",
                        "河马兽",
                        "河馬獸",
                    ],
                },
            },
            Self::Skorupi(_) => &SpeciesData {
                national_dex_id: 451,
                names: NamesData {
                    names: [
                        "スコルピ",
                        "Skorupi",
                        "Rapion",
                        "Skorupi",
                        "Pionskora",
                        "Skorupi",
                        "스콜피",
                        "钳尾蝎",
                        "鉗尾蠍",
                    ],
                },
            },
            Self::Drapion(_) => &SpeciesData {
                national_dex_id: 452,
                names: NamesData {
                    names: [
                        "ドラピオン",
                        "Drapion",
                        "Drascore",
                        "Drapion",
                        "Piondragi",
                        "Drapion",
                        "드래피온",
                        "龙王蝎",
                        "龍王蠍",
                    ],
                },
            },
            Self::Croagunk(_) => &SpeciesData {
                national_dex_id: 453,
                names: NamesData {
                    names: [
                        "グレッグル",
                        "Croagunk",
                        "Cradopaud",
                        "Croagunk",
                        "Glibunkel",
                        "Croagunk",
                        "삐딱구리",
                        "不良蛙",
                        "不良蛙",
                    ],
                },
            },
            Self::Toxicroak(_) => &SpeciesData {
                national_dex_id: 454,
                names: NamesData {
                    names: [
                        "ドクロッグ",
                        "Toxicroak",
                        "Coatox",
                        "Toxicroak",
                        "Toxiquak",
                        "Toxicroak",
                        "독개굴",
                        "毒骷蛙",
                        "毒骷蛙",
                    ],
                },
            },
            Self::Carnivine(_) => &SpeciesData {
                national_dex_id: 455,
                names: NamesData {
                    names: [
                        "マスキッパ",
                        "Carnivine",
                        "Vortente",
                        "Carnivine",
                        "Venuflibis",
                        "Carnivine",
                        "무스틈니",
                        "尖牙笼",
                        "尖牙籠",
                    ],
                },
            },
            Self::Finneon(_) => &SpeciesData {
                national_dex_id: 456,
                names: NamesData {
                    names: [
                        "ケイコウオ",
                        "Finneon",
                        "Écayon",
                        "Finneon",
                        "Finneon",
                        "Finneon",
                        "형광어",
                        "荧光鱼",
                        "螢光魚",
                    ],
                },
            },
            Self::Lumineon(_) => &SpeciesData {
                national_dex_id: 457,
                names: NamesData {
                    names: [
                        "ネオラント",
                        "Lumineon",
                        "Luminéon",
                        "Lumineon",
                        "Lumineon",
                        "Lumineon",
                        "네오라이트",
                        "霓虹鱼",
                        "霓虹魚",
                    ],
                },
            },
            Self::Mantyke(_) => &SpeciesData {
                national_dex_id: 458,
                names: NamesData {
                    names: [
                        "タマンタ",
                        "Mantyke",
                        "Babimanta",
                        "Mantyke",
                        "Mantirps",
                        "Mantyke",
                        "타만타",
                        "小球飞鱼",
                        "小球飛魚",
                    ],
                },
            },
            Self::Snover(_) => &SpeciesData {
                national_dex_id: 459,
                names: NamesData {
                    names: [
                        "ユキカブリ",
                        "Snover",
                        "Blizzi",
                        "Snover",
                        "Shnebedeck",
                        "Snover",
                        "눈쓰개",
                        "雪笠怪",
                        "雪笠怪",
                    ],
                },
            },
            Self::Abomasnow(_) => &SpeciesData {
                national_dex_id: 460,
                names: NamesData {
                    names: [
                        "ユキノオー",
                        "Abomasnow",
                        "Blizzaroi",
                        "Abomasnow",
                        "Rexblisar",
                        "Abomasnow",
                        "눈설왕",
                        "暴雪王",
                        "暴雪王",
                    ],
                },
            },
            Self::Weavile(_) => &SpeciesData {
                national_dex_id: 461,
                names: NamesData {
                    names: [
                        "マニューラ",
                        "Weavile",
                        "Dimoret",
                        "Weavile",
                        "Snibunna",
                        "Weavile",
                        "포푸니라",
                        "玛狃拉",
                        "瑪狃拉",
                    ],
                },
            },
            Self::Magnezone(_) => &SpeciesData {
                national_dex_id: 462,
                names: NamesData {
                    names: [
                        "ジバコイル",
                        "Magnezone",
                        "Magnézone",
                        "Magnezone",
                        "Magnezone",
                        "Magnezone",
                        "자포코일",
                        "自爆磁怪",
                        "自爆磁怪",
                    ],
                },
            },
            Self::Lickilicky(_) => &SpeciesData {
                national_dex_id: 463,
                names: NamesData {
                    names: [
                        "ベロベルト",
                        "Lickilicky",
                        "Coudlangue",
                        "Lickilicky",
                        "Schlurplek",
                        "Lickilicky",
                        "내룸벨트",
                        "大舌舔",
                        "大舌舔",
                    ],
                },
            },
            Self::Rhyperior(_) => &SpeciesData {
                national_dex_id: 464,
                names: NamesData {
                    names: [
                        "ドサイドン",
                        "Rhyperior",
                        "Rhinastoc",
                        "Rhyperior",
                        "Rihornior",
                        "Rhyperior",
                        "거대코뿌리",
                        "超甲狂犀",
                        "超甲狂犀",
                    ],
                },
            },
            Self::Tangrowth(_) => &SpeciesData {
                national_dex_id: 465,
                names: NamesData {
                    names: [
                        "モジャンボ",
                        "Tangrowth",
                        "Bouldeneu",
                        "Tangrowth",
                        "Tangoloss",
                        "Tangrowth",
                        "덩쿠림보",
                        "巨蔓藤",
                        "巨蔓藤",
                    ],
                },
            },
            Self::Electivire(_) => &SpeciesData {
                national_dex_id: 466,
                names: NamesData {
                    names: [
                        "エレキブル",
                        "Electivire",
                        "Élekable",
                        "Electivire",
                        "Elevoltek",
                        "Electivire",
                        "에레키블",
                        "电击魔兽",
                        "電擊魔獸",
                    ],
                },
            },
            Self::Magmortar(_) => &SpeciesData {
                national_dex_id: 467,
                names: NamesData {
                    names: [
                        "ブーバーン",
                        "Magmortar",
                        "Maganon",
                        "Magmortar",
                        "Magbrant",
                        "Magmortar",
                        "마그마번",
                        "鸭嘴炎兽",
                        "鴨嘴炎獸",
                    ],
                },
            },
            Self::Togekiss(_) => &SpeciesData {
                national_dex_id: 468,
                names: NamesData {
                    names: [
                        "トゲキッス",
                        "Togekiss",
                        "Togekiss",
                        "Togekiss",
                        "Togekiss",
                        "Togekiss",
                        "토게키스",
                        "波克基斯",
                        "波克基斯",
                    ],
                },
            },
            Self::Yanmega(_) => &SpeciesData {
                national_dex_id: 469,
                names: NamesData {
                    names: [
                        "メガヤンマ",
                        "Yanmega",
                        "Yanmega",
                        "Yanmega",
                        "Yanmega",
                        "Yanmega",
                        "메가자리",
                        "远古巨蜓",
                        "遠古巨蜓",
                    ],
                },
            },
            Self::Leafeon(_) => &SpeciesData {
                national_dex_id: 470,
                names: NamesData {
                    names: [
                        "リーフィア",
                        "Leafeon",
                        "Phyllali",
                        "Leafeon",
                        "Folipurba",
                        "Leafeon",
                        "리피아",
                        "叶伊布",
                        "葉伊布",
                    ],
                },
            },
            Self::Glaceon(_) => &SpeciesData {
                national_dex_id: 471,
                names: NamesData {
                    names: [
                        "グレイシア",
                        "Glaceon",
                        "Givrali",
                        "Glaceon",
                        "Glaziola",
                        "Glaceon",
                        "글레이시아",
                        "冰伊布",
                        "冰伊布",
                    ],
                },
            },
            Self::Gliscor(_) => &SpeciesData {
                national_dex_id: 472,
                names: NamesData {
                    names: [
                        "グライオン",
                        "Gliscor",
                        "Scorvol",
                        "Gliscor",
                        "Skorgro",
                        "Gliscor",
                        "글라이온",
                        "天蝎王",
                        "天蠍王",
                    ],
                },
            },
            Self::Mamoswine(_) => &SpeciesData {
                national_dex_id: 473,
                names: NamesData {
                    names: [
                        "マンムー",
                        "Mamoswine",
                        "Mammochon",
                        "Mamoswine",
                        "Mamutel",
                        "Mamoswine",
                        "맘모꾸리",
                        "象牙猪",
                        "象牙豬",
                    ],
                },
            },
            Self::PorygonZ(_) => &SpeciesData {
                national_dex_id: 474,
                names: NamesData {
                    names: [
                        "ポリゴンＺ",
                        "Porygon-Z",
                        "Porygon-Z",
                        "Porygon-Z",
                        "Porygon-Z",
                        "Porygon-Z",
                        "폴리곤Z",
                        "多边兽乙型",
                        "多邊獸Ｚ",
                    ],
                },
            },
            Self::Gallade(_) => &SpeciesData {
                national_dex_id: 475,
                names: NamesData {
                    names: [
                        "エルレイド",
                        "Gallade",
                        "Gallame",
                        "Gallade",
                        "Galagladi",
                        "Gallade",
                        "엘레이드",
                        "艾路雷朵",
                        "艾路雷朵",
                    ],
                },
            },
            Self::Probopass(_) => &SpeciesData {
                national_dex_id: 476,
                names: NamesData {
                    names: [
                        "ダイノーズ",
                        "Probopass",
                        "Tarinorme",
                        "Probopass",
                        "Voluminas",
                        "Probopass",
                        "대코파스",
                        "大朝北鼻",
                        "大朝北鼻",
                    ],
                },
            },
            Self::Dusknoir(_) => &SpeciesData {
                national_dex_id: 477,
                names: NamesData {
                    names: [
                        "ヨノワール",
                        "Dusknoir",
                        "Noctunoir",
                        "Dusknoir",
                        "Zwirrfinst",
                        "Dusknoir",
                        "야느와르몽",
                        "黑夜魔灵",
                        "黑夜魔靈",
                    ],
                },
            },
            Self::Froslass(_) => &SpeciesData {
                national_dex_id: 478,
                names: NamesData {
                    names: [
                        "ユキメノコ",
                        "Froslass",
                        "Momartik",
                        "Froslass",
                        "Frosdedje",
                        "Froslass",
                        "눈여아",
                        "雪妖女",
                        "雪妖女",
                    ],
                },
            },
            Self::Rotom(_) => &SpeciesData {
                national_dex_id: 479,
                names: NamesData {
                    names: [
                        "ロトム",
                        "Rotom",
                        "Motisma",
                        "Rotom",
                        "Rotom",
                        "Rotom",
                        "로토무",
                        "洛托姆",
                        "洛托姆",
                    ],
                },
            },
            Self::Uxie(_) => &SpeciesData {
                national_dex_id: 480,
                names: NamesData {
                    names: [
                        "ユクシー",
                        "Uxie",
                        "Créhelf",
                        "Uxie",
                        "Selfe",
                        "Uxie",
                        "유크시",
                        "由克希",
                        "由克希",
                    ],
                },
            },
            Self::Mesprit(_) => &SpeciesData {
                national_dex_id: 481,
                names: NamesData {
                    names: [
                        "エムリット",
                        "Mesprit",
                        "Créfollet",
                        "Mesprit",
                        "Vesprit",
                        "Mesprit",
                        "엠라이트",
                        "艾姆利多",
                        "艾姆利多",
                    ],
                },
            },
            Self::Azelf(_) => &SpeciesData {
                national_dex_id: 482,
                names: NamesData {
                    names: [
                        "アグノム",
                        "Azelf",
                        "Créfadet",
                        "Azelf",
                        "Tobutz",
                        "Azelf",
                        "아그놈",
                        "亚克诺姆",
                        "亞克諾姆",
                    ],
                },
            },
            Self::Dialga(_) => &SpeciesData {
                national_dex_id: 483,
                names: NamesData {
                    names: [
                        "ディアルガ",
                        "Dialga",
                        "Dialga",
                        "Dialga",
                        "Dialga",
                        "Dialga",
                        "디아루가",
                        "帝牙卢卡",
                        "帝牙盧卡",
                    ],
                },
            },
            Self::Palkia(_) => &SpeciesData {
                national_dex_id: 484,
                names: NamesData {
                    names: [
                        "パルキア",
                        "Palkia",
                        "Palkia",
                        "Palkia",
                        "Palkia",
                        "Palkia",
                        "펄기아",
                        "帕路奇亚",
                        "帕路奇亞",
                    ],
                },
            },
            Self::Heatran(_) => &SpeciesData {
                national_dex_id: 485,
                names: NamesData {
                    names: [
                        "ヒードラン",
                        "Heatran",
                        "Heatran",
                        "Heatran",
                        "Heatran",
                        "Heatran",
                        "히드런",
                        "席多蓝恩",
                        "席多藍恩",
                    ],
                },
            },
            Self::Regigigas(_) => &SpeciesData {
                national_dex_id: 486,
                names: NamesData {
                    names: [
                        "レジギガス",
                        "Regigigas",
                        "Regigigas",
                        "Regigigas",
                        "Regigigas",
                        "Regigigas",
                        "레지기가스",
                        "雷吉奇卡斯",
                        "雷吉奇卡斯",
                    ],
                },
            },
            Self::Giratina(_) => &SpeciesData {
                national_dex_id: 487,
                names: NamesData {
                    names: [
                        "ギラティナ",
                        "Giratina",
                        "Giratina",
                        "Giratina",
                        "Giratina",
                        "Giratina",
                        "기라티나",
                        "骑拉帝纳",
                        "騎拉帝納",
                    ],
                },
            },
            Self::Cresselia(_) => &SpeciesData {
                national_dex_id: 488,
                names: NamesData {
                    names: [
                        "クレセリア",
                        "Cresselia",
                        "Cresselia",
                        "Cresselia",
                        "Cresselia",
                        "Cresselia",
                        "크레세리아",
                        "克雷色利亚",
                        "克雷色利亞",
                    ],
                },
            },
            Self::Phione(_) => &SpeciesData {
                national_dex_id: 489,
                names: NamesData {
                    names: [
                        "フィオネ",
                        "Phione",
                        "Phione",
                        "Phione",
                        "Phione",
                        "Phione",
                        "피오네",
                        "霏欧纳",
                        "霏歐納",
                    ],
                },
            },
            Self::Manaphy(_) => &SpeciesData {
                national_dex_id: 490,
                names: NamesData {
                    names: [
                        "マナフィ",
                        "Manaphy",
                        "Manaphy",
                        "Manaphy",
                        "Manaphy",
                        "Manaphy",
                        "마나피",
                        "玛纳霏",
                        "瑪納霏",
                    ],
                },
            },
            Self::Darkrai(_) => &SpeciesData {
                national_dex_id: 491,
                names: NamesData {
                    names: [
                        "ダークライ",
                        "Darkrai",
                        "Darkrai",
                        "Darkrai",
                        "Darkrai",
                        "Darkrai",
                        "다크라이",
                        "达克莱伊",
                        "達克萊伊",
                    ],
                },
            },
            Self::Shaymin(_) => &SpeciesData {
                national_dex_id: 492,
                names: NamesData {
                    names: [
                        "シェイミ",
                        "Shaymin",
                        "Shaymin",
                        "Shaymin",
                        "Shaymin",
                        "Shaymin",
                        "쉐이미",
                        "谢米",
                        "謝米",
                    ],
                },
            },
            Self::Arceus(_) => &SpeciesData {
                national_dex_id: 493,
                names: NamesData {
                    names: [
                        "アルセウス",
                        "Arceus",
                        "Arceus",
                        "Arceus",
                        "Arceus",
                        "Arceus",
                        "아르세우스",
                        "阿尔宙斯",
                        "阿爾宙斯",
                    ],
                },
            },
            Self::Victini(_) => &SpeciesData {
                national_dex_id: 494,
                names: NamesData {
                    names: [
                        "ビクティニ",
                        "Victini",
                        "Victini",
                        "Victini",
                        "Victini",
                        "Victini",
                        "비크티니",
                        "比克提尼",
                        "比克提尼",
                    ],
                },
            },
            Self::Snivy(_) => &SpeciesData {
                national_dex_id: 495,
                names: NamesData {
                    names: [
                        "ツタージャ",
                        "Snivy",
                        "Vipélierre",
                        "Snivy",
                        "Serpifeu",
                        "Snivy",
                        "주리비얀",
                        "藤藤蛇",
                        "藤藤蛇",
                    ],
                },
            },
            Self::Servine(_) => &SpeciesData {
                national_dex_id: 496,
                names: NamesData {
                    names: [
                        "ジャノビー",
                        "Servine",
                        "Lianaja",
                        "Servine",
                        "Efoserp",
                        "Servine",
                        "샤비",
                        "青藤蛇",
                        "青藤蛇",
                    ],
                },
            },
            Self::Serperior(_) => &SpeciesData {
                national_dex_id: 497,
                names: NamesData {
                    names: [
                        "ジャローダ",
                        "Serperior",
                        "Majaspic",
                        "Serperior",
                        "Serpiroyal",
                        "Serperior",
                        "샤로다",
                        "君主蛇",
                        "君主蛇",
                    ],
                },
            },
            Self::Tepig(_) => &SpeciesData {
                national_dex_id: 498,
                names: NamesData {
                    names: [
                        "ポカブ",
                        "Tepig",
                        "Gruikui",
                        "Tepig",
                        "Floink",
                        "Tepig",
                        "뚜꾸리",
                        "暖暖猪",
                        "暖暖豬",
                    ],
                },
            },
            Self::Pignite(_) => &SpeciesData {
                national_dex_id: 499,
                names: NamesData {
                    names: [
                        "チャオブー",
                        "Pignite",
                        "Grotichon",
                        "Pignite",
                        "Ferkokel",
                        "Pignite",
                        "차오꿀",
                        "炒炒猪",
                        "炒炒豬",
                    ],
                },
            },
            Self::Emboar(_) => &SpeciesData {
                national_dex_id: 500,
                names: NamesData {
                    names: [
                        "エンブオー",
                        "Emboar",
                        "Roitiflam",
                        "Emboar",
                        "Flambirex",
                        "Emboar",
                        "염무왕",
                        "炎武王",
                        "炎武王",
                    ],
                },
            },
            Self::Oshawott(_) => &SpeciesData {
                national_dex_id: 501,
                names: NamesData {
                    names: [
                        "ミジュマル",
                        "Oshawott",
                        "Moustillon",
                        "Oshawott",
                        "Ottaro",
                        "Oshawott",
                        "수댕이",
                        "水水獭",
                        "水水獺",
                    ],
                },
            },
            Self::Dewott(_) => &SpeciesData {
                national_dex_id: 502,
                names: NamesData {
                    names: [
                        "フタチマル",
                        "Dewott",
                        "Mateloutre",
                        "Dewott",
                        "Zwottronin",
                        "Dewott",
                        "쌍검자비",
                        "双刃丸",
                        "雙刃丸",
                    ],
                },
            },
            Self::Samurott(_) => &SpeciesData {
                national_dex_id: 503,
                names: NamesData {
                    names: [
                        "ダイケンキ",
                        "Samurott",
                        "Clamiral",
                        "Samurott",
                        "Admurai",
                        "Samurott",
                        "대검귀",
                        "大剑鬼",
                        "大劍鬼",
                    ],
                },
            },
            Self::Patrat(_) => &SpeciesData {
                national_dex_id: 504,
                names: NamesData {
                    names: [
                        "ミネズミ",
                        "Patrat",
                        "Ratentif",
                        "Patrat",
                        "Nagelotz",
                        "Patrat",
                        "보르쥐",
                        "探探鼠",
                        "探探鼠",
                    ],
                },
            },
            Self::Watchog(_) => &SpeciesData {
                national_dex_id: 505,
                names: NamesData {
                    names: [
                        "ミルホッグ",
                        "Watchog",
                        "Miradar",
                        "Watchog",
                        "Kukmarda",
                        "Watchog",
                        "보르그",
                        "步哨鼠",
                        "步哨鼠",
                    ],
                },
            },
            Self::Lillipup(_) => &SpeciesData {
                national_dex_id: 506,
                names: NamesData {
                    names: [
                        "ヨーテリー",
                        "Lillipup",
                        "Ponchiot",
                        "Lillipup",
                        "Yorkleff",
                        "Lillipup",
                        "요테리",
                        "小约克",
                        "小約克",
                    ],
                },
            },
            Self::Herdier(_) => &SpeciesData {
                national_dex_id: 507,
                names: NamesData {
                    names: [
                        "ハーデリア",
                        "Herdier",
                        "Ponchien",
                        "Herdier",
                        "Terribark",
                        "Herdier",
                        "하데리어",
                        "哈约克",
                        "哈約克",
                    ],
                },
            },
            Self::Stoutland(_) => &SpeciesData {
                national_dex_id: 508,
                names: NamesData {
                    names: [
                        "ムーランド",
                        "Stoutland",
                        "Mastouffe",
                        "Stoutland",
                        "Bissbark",
                        "Stoutland",
                        "바랜드",
                        "长毛狗",
                        "長毛狗",
                    ],
                },
            },
            Self::Purrloin(_) => &SpeciesData {
                national_dex_id: 509,
                names: NamesData {
                    names: [
                        "チョロネコ",
                        "Purrloin",
                        "Chacripan",
                        "Purrloin",
                        "Felilou",
                        "Purrloin",
                        "쌔비냥",
                        "扒手猫",
                        "扒手貓",
                    ],
                },
            },
            Self::Liepard(_) => &SpeciesData {
                national_dex_id: 510,
                names: NamesData {
                    names: [
                        "レパルダス",
                        "Liepard",
                        "Léopardus",
                        "Liepard",
                        "Kleoparda",
                        "Liepard",
                        "레파르다스",
                        "酷豹",
                        "酷豹",
                    ],
                },
            },
            Self::Pansage(_) => &SpeciesData {
                national_dex_id: 511,
                names: NamesData {
                    names: [
                        "ヤナップ",
                        "Pansage",
                        "Feuillajou",
                        "Pansage",
                        "Vegimak",
                        "Pansage",
                        "야나프",
                        "花椰猴",
                        "花椰猴",
                    ],
                },
            },
            Self::Simisage(_) => &SpeciesData {
                national_dex_id: 512,
                names: NamesData {
                    names: [
                        "ヤナッキー",
                        "Simisage",
                        "Feuiloutan",
                        "Simisage",
                        "Vegichita",
                        "Simisage",
                        "야나키",
                        "花椰猿",
                        "花椰猿",
                    ],
                },
            },
            Self::Pansear(_) => &SpeciesData {
                national_dex_id: 513,
                names: NamesData {
                    names: [
                        "バオップ",
                        "Pansear",
                        "Flamajou",
                        "Pansear",
                        "Grillmak",
                        "Pansear",
                        "바오프",
                        "爆香猴",
                        "爆香猴",
                    ],
                },
            },
            Self::Simisear(_) => &SpeciesData {
                national_dex_id: 514,
                names: NamesData {
                    names: [
                        "バオッキー",
                        "Simisear",
                        "Flamoutan",
                        "Simisear",
                        "Grillchita",
                        "Simisear",
                        "바오키",
                        "爆香猿",
                        "爆香猿",
                    ],
                },
            },
            Self::Panpour(_) => &SpeciesData {
                national_dex_id: 515,
                names: NamesData {
                    names: [
                        "ヒヤップ",
                        "Panpour",
                        "Flotajou",
                        "Panpour",
                        "Sodamak",
                        "Panpour",
                        "앗차프",
                        "冷水猴",
                        "冷水猴",
                    ],
                },
            },
            Self::Simipour(_) => &SpeciesData {
                national_dex_id: 516,
                names: NamesData {
                    names: [
                        "ヒヤッキー",
                        "Simipour",
                        "Flotoutan",
                        "Simipour",
                        "Sodachita",
                        "Simipour",
                        "앗차키",
                        "冷水猿",
                        "冷水猿",
                    ],
                },
            },
            Self::Munna(_) => &SpeciesData {
                national_dex_id: 517,
                names: NamesData {
                    names: [
                        "ムンナ",
                        "Munna",
                        "Munna",
                        "Munna",
                        "Somniam",
                        "Munna",
                        "몽나",
                        "食梦梦",
                        "食夢夢",
                    ],
                },
            },
            Self::Musharna(_) => &SpeciesData {
                national_dex_id: 518,
                names: NamesData {
                    names: [
                        "ムシャーナ",
                        "Musharna",
                        "Mushana",
                        "Musharna",
                        "Somnivora",
                        "Musharna",
                        "몽얌나",
                        "梦梦蚀",
                        "夢夢蝕",
                    ],
                },
            },
            Self::Pidove(_) => &SpeciesData {
                national_dex_id: 519,
                names: NamesData {
                    names: [
                        "マメパト",
                        "Pidove",
                        "Poichigeon",
                        "Pidove",
                        "Dusselgurr",
                        "Pidove",
                        "콩둘기",
                        "豆豆鸽",
                        "豆豆鴿",
                    ],
                },
            },
            Self::Tranquill(_) => &SpeciesData {
                national_dex_id: 520,
                names: NamesData {
                    names: [
                        "ハトーボー",
                        "Tranquill",
                        "Colombeau",
                        "Tranquill",
                        "Navitaub",
                        "Tranquill",
                        "유토브",
                        "咕咕鸽",
                        "咕咕鴿",
                    ],
                },
            },
            Self::Unfezant(_) => &SpeciesData {
                national_dex_id: 521,
                names: NamesData {
                    names: [
                        "ケンホロウ",
                        "Unfezant",
                        "Déflaisan",
                        "Unfezant",
                        "Fasasnob",
                        "Unfezant",
                        "켄호로우",
                        "高傲雉鸡",
                        "高傲雉雞",
                    ],
                },
            },
            Self::Blitzle(_) => &SpeciesData {
                national_dex_id: 522,
                names: NamesData {
                    names: [
                        "シママ",
                        "Blitzle",
                        "Zébibron",
                        "Blitzle",
                        "Elezeba",
                        "Blitzle",
                        "줄뮤마",
                        "斑斑马",
                        "斑斑馬",
                    ],
                },
            },
            Self::Zebstrika(_) => &SpeciesData {
                national_dex_id: 523,
                names: NamesData {
                    names: [
                        "ゼブライカ",
                        "Zebstrika",
                        "Zéblitz",
                        "Zebstrika",
                        "Zebritz",
                        "Zebstrika",
                        "제브라이카",
                        "雷电斑马",
                        "雷電斑馬",
                    ],
                },
            },
            Self::Roggenrola(_) => &SpeciesData {
                national_dex_id: 524,
                names: NamesData {
                    names: [
                        "ダンゴロ",
                        "Roggenrola",
                        "Nodulithe",
                        "Roggenrola",
                        "Kiesling",
                        "Roggenrola",
                        "단굴",
                        "石丸子",
                        "石丸子",
                    ],
                },
            },
            Self::Boldore(_) => &SpeciesData {
                national_dex_id: 525,
                names: NamesData {
                    names: [
                        "ガントル",
                        "Boldore",
                        "Géolithe",
                        "Boldore",
                        "Sedimantur",
                        "Boldore",
                        "암트르",
                        "地幔岩",
                        "地幔岩",
                    ],
                },
            },
            Self::Gigalith(_) => &SpeciesData {
                national_dex_id: 526,
                names: NamesData {
                    names: [
                        "ギガイアス",
                        "Gigalith",
                        "Gigalithe",
                        "Gigalith",
                        "Brockoloss",
                        "Gigalith",
                        "기가이어스",
                        "庞岩怪",
                        "龐岩怪",
                    ],
                },
            },
            Self::Woobat(_) => &SpeciesData {
                national_dex_id: 527,
                names: NamesData {
                    names: [
                        "コロモリ",
                        "Woobat",
                        "Chovsourir",
                        "Woobat",
                        "Fleknoil",
                        "Woobat",
                        "또르박쥐",
                        "滚滚蝙蝠",
                        "滾滾蝙蝠",
                    ],
                },
            },
            Self::Swoobat(_) => &SpeciesData {
                national_dex_id: 528,
                names: NamesData {
                    names: [
                        "ココロモリ",
                        "Swoobat",
                        "Rhinolove",
                        "Swoobat",
                        "Fletiamo",
                        "Swoobat",
                        "맘박쥐",
                        "心蝙蝠",
                        "心蝙蝠",
                    ],
                },
            },
            Self::Drilbur(_) => &SpeciesData {
                national_dex_id: 529,
                names: NamesData {
                    names: [
                        "モグリュー",
                        "Drilbur",
                        "Rototaupe",
                        "Drilbur",
                        "Rotomurf",
                        "Drilbur",
                        "두더류",
                        "螺钉地鼠",
                        "螺釘地鼠",
                    ],
                },
            },
            Self::Excadrill(_) => &SpeciesData {
                national_dex_id: 530,
                names: NamesData {
                    names: [
                        "ドリュウズ",
                        "Excadrill",
                        "Minotaupe",
                        "Excadrill",
                        "Stalobor",
                        "Excadrill",
                        "몰드류",
                        "龙头地鼠",
                        "龍頭地鼠",
                    ],
                },
            },
            Self::Audino(_) => &SpeciesData {
                national_dex_id: 531,
                names: NamesData {
                    names: [
                        "タブンネ",
                        "Audino",
                        "Nanméouïe",
                        "Audino",
                        "Ohrdoch",
                        "Audino",
                        "다부니",
                        "差不多娃娃",
                        "差不多娃娃",
                    ],
                },
            },
            Self::Timburr(_) => &SpeciesData {
                national_dex_id: 532,
                names: NamesData {
                    names: [
                        "ドッコラー",
                        "Timburr",
                        "Charpenti",
                        "Timburr",
                        "Praktibalk",
                        "Timburr",
                        "으랏차",
                        "搬运小匠",
                        "搬運小匠",
                    ],
                },
            },
            Self::Gurdurr(_) => &SpeciesData {
                national_dex_id: 533,
                names: NamesData {
                    names: [
                        "ドテッコツ",
                        "Gurdurr",
                        "Ouvrifier",
                        "Gurdurr",
                        "Strepoli",
                        "Gurdurr",
                        "토쇠골",
                        "铁骨土人",
                        "鐵骨土人",
                    ],
                },
            },
            Self::Conkeldurr(_) => &SpeciesData {
                national_dex_id: 534,
                names: NamesData {
                    names: [
                        "ローブシン",
                        "Conkeldurr",
                        "Bétochef",
                        "Conkeldurr",
                        "Meistagrif",
                        "Conkeldurr",
                        "노보청",
                        "修建老匠",
                        "修建老匠",
                    ],
                },
            },
            Self::Tympole(_) => &SpeciesData {
                national_dex_id: 535,
                names: NamesData {
                    names: [
                        "オタマロ",
                        "Tympole",
                        "Tritonde",
                        "Tympole",
                        "Schallquap",
                        "Tympole",
                        "동챙이",
                        "圆蝌蚪",
                        "圓蝌蚪",
                    ],
                },
            },
            Self::Palpitoad(_) => &SpeciesData {
                national_dex_id: 536,
                names: NamesData {
                    names: [
                        "ガマガル",
                        "Palpitoad",
                        "Batracné",
                        "Palpitoad",
                        "Mebrana",
                        "Palpitoad",
                        "두까비",
                        "蓝蟾蜍",
                        "藍蟾蜍",
                    ],
                },
            },
            Self::Seismitoad(_) => &SpeciesData {
                national_dex_id: 537,
                names: NamesData {
                    names: [
                        "ガマゲロゲ",
                        "Seismitoad",
                        "Crapustule",
                        "Seismitoad",
                        "Branawarz",
                        "Seismitoad",
                        "두빅굴",
                        "蟾蜍王",
                        "蟾蜍王",
                    ],
                },
            },
            Self::Throh(_) => &SpeciesData {
                national_dex_id: 538,
                names: NamesData {
                    names: [
                        "ナゲキ",
                        "Throh",
                        "Judokrak",
                        "Throh",
                        "Jiutesto",
                        "Throh",
                        "던지미",
                        "投摔鬼",
                        "投摔鬼",
                    ],
                },
            },
            Self::Sawk(_) => &SpeciesData {
                national_dex_id: 539,
                names: NamesData {
                    names: [
                        "ダゲキ",
                        "Sawk",
                        "Karaclée",
                        "Sawk",
                        "Karadonis",
                        "Sawk",
                        "타격귀",
                        "打击鬼",
                        "打擊鬼",
                    ],
                },
            },
            Self::Sewaddle(_) => &SpeciesData {
                national_dex_id: 540,
                names: NamesData {
                    names: [
                        "クルミル",
                        "Sewaddle",
                        "Larveyette",
                        "Sewaddle",
                        "Strawickl",
                        "Sewaddle",
                        "두르보",
                        "虫宝包",
                        "蟲寶包",
                    ],
                },
            },
            Self::Swadloon(_) => &SpeciesData {
                national_dex_id: 541,
                names: NamesData {
                    names: [
                        "クルマユ",
                        "Swadloon",
                        "Couverdure",
                        "Swadloon",
                        "Folikon",
                        "Swadloon",
                        "두르쿤",
                        "宝包茧",
                        "寶包繭",
                    ],
                },
            },
            Self::Leavanny(_) => &SpeciesData {
                national_dex_id: 542,
                names: NamesData {
                    names: [
                        "ハハコモリ",
                        "Leavanny",
                        "Manternel",
                        "Leavanny",
                        "Matrifol",
                        "Leavanny",
                        "모아머",
                        "保姆虫",
                        "保母蟲",
                    ],
                },
            },
            Self::Venipede(_) => &SpeciesData {
                national_dex_id: 543,
                names: NamesData {
                    names: [
                        "フシデ",
                        "Venipede",
                        "Venipatte",
                        "Venipede",
                        "Toxiped",
                        "Venipede",
                        "마디네",
                        "百足蜈蚣",
                        "百足蜈蚣",
                    ],
                },
            },
            Self::Whirlipede(_) => &SpeciesData {
                national_dex_id: 544,
                names: NamesData {
                    names: [
                        "ホイーガ",
                        "Whirlipede",
                        "Scobolide",
                        "Whirlipede",
                        "Rollum",
                        "Whirlipede",
                        "휠구",
                        "车轮球",
                        "車輪毬",
                    ],
                },
            },
            Self::Scolipede(_) => &SpeciesData {
                national_dex_id: 545,
                names: NamesData {
                    names: [
                        "ペンドラー",
                        "Scolipede",
                        "Brutapode",
                        "Scolipede",
                        "Cerapendra",
                        "Scolipede",
                        "펜드라",
                        "蜈蚣王",
                        "蜈蚣王",
                    ],
                },
            },
            Self::Cottonee(_) => &SpeciesData {
                national_dex_id: 546,
                names: NamesData {
                    names: [
                        "モンメン",
                        "Cottonee",
                        "Doudouvet",
                        "Cottonee",
                        "Waumboll",
                        "Cottonee",
                        "소미안",
                        "木棉球",
                        "木棉球",
                    ],
                },
            },
            Self::Whimsicott(_) => &SpeciesData {
                national_dex_id: 547,
                names: NamesData {
                    names: [
                        "エルフーン",
                        "Whimsicott",
                        "Farfaduvet",
                        "Whimsicott",
                        "Elfun",
                        "Whimsicott",
                        "엘풍",
                        "风妖精",
                        "風妖精",
                    ],
                },
            },
            Self::Petilil(_) => &SpeciesData {
                national_dex_id: 548,
                names: NamesData {
                    names: [
                        "チュリネ",
                        "Petilil",
                        "Chlorobule",
                        "Petilil",
                        "Lilminip",
                        "Petilil",
                        "치릴리",
                        "百合根娃娃",
                        "百合根娃娃",
                    ],
                },
            },
            Self::Lilligant(_) => &SpeciesData {
                national_dex_id: 549,
                names: NamesData {
                    names: [
                        "ドレディア",
                        "Lilligant",
                        "Fragilady",
                        "Lilligant",
                        "Dressella",
                        "Lilligant",
                        "드레디어",
                        "裙儿小姐",
                        "裙兒小姐",
                    ],
                },
            },
            Self::Basculin(_) => &SpeciesData {
                national_dex_id: 550,
                names: NamesData {
                    names: [
                        "バスラオ",
                        "Basculin",
                        "Bargantua",
                        "Basculin",
                        "Barschuft",
                        "Basculin",
                        "배쓰나이",
                        "野蛮鲈鱼",
                        "野蠻鱸魚",
                    ],
                },
            },
            Self::Sandile(_) => &SpeciesData {
                national_dex_id: 551,
                names: NamesData {
                    names: [
                        "メグロコ",
                        "Sandile",
                        "Mascaïman",
                        "Sandile",
                        "Ganovil",
                        "Sandile",
                        "깜눈크",
                        "黑眼鳄",
                        "黑眼鱷",
                    ],
                },
            },
            Self::Krokorok(_) => &SpeciesData {
                national_dex_id: 552,
                names: NamesData {
                    names: [
                        "ワルビル",
                        "Krokorok",
                        "Escroco",
                        "Krokorok",
                        "Rokkaiman",
                        "Krokorok",
                        "악비르",
                        "混混鳄",
                        "混混鱷",
                    ],
                },
            },
            Self::Krookodile(_) => &SpeciesData {
                national_dex_id: 553,
                names: NamesData {
                    names: [
                        "ワルビアル",
                        "Krookodile",
                        "Crocorible",
                        "Krookodile",
                        "Rabigator",
                        "Krookodile",
                        "악비아르",
                        "流氓鳄",
                        "流氓鱷",
                    ],
                },
            },
            Self::Darumaka(_) => &SpeciesData {
                national_dex_id: 554,
                names: NamesData {
                    names: [
                        "ダルマッカ",
                        "Darumaka",
                        "Darumarond",
                        "Darumaka",
                        "Flampion",
                        "Darumaka",
                        "달막화",
                        "火红不倒翁",
                        "火紅不倒翁",
                    ],
                },
            },
            Self::Darmanitan(_) => &SpeciesData {
                national_dex_id: 555,
                names: NamesData {
                    names: [
                        "ヒヒダルマ",
                        "Darmanitan",
                        "Darumacho",
                        "Darmanitan",
                        "Flampivian",
                        "Darmanitan",
                        "불비달마",
                        "达摩狒狒",
                        "達摩狒狒",
                    ],
                },
            },
            Self::Maractus(_) => &SpeciesData {
                national_dex_id: 556,
                names: NamesData {
                    names: [
                        "マラカッチ",
                        "Maractus",
                        "Maracachi",
                        "Maractus",
                        "Maracamba",
                        "Maractus",
                        "마라카치",
                        "沙铃仙人掌",
                        "沙鈴仙人掌",
                    ],
                },
            },
            Self::Dwebble(_) => &SpeciesData {
                national_dex_id: 557,
                names: NamesData {
                    names: [
                        "イシズマイ",
                        "Dwebble",
                        "Crabicoque",
                        "Dwebble",
                        "Lithomith",
                        "Dwebble",
                        "돌살이",
                        "石居蟹",
                        "石居蟹",
                    ],
                },
            },
            Self::Crustle(_) => &SpeciesData {
                national_dex_id: 558,
                names: NamesData {
                    names: [
                        "イワパレス",
                        "Crustle",
                        "Crabaraque",
                        "Crustle",
                        "Castellith",
                        "Crustle",
                        "암팰리스",
                        "岩殿居蟹",
                        "岩殿居蟹",
                    ],
                },
            },
            Self::Scraggy(_) => &SpeciesData {
                national_dex_id: 559,
                names: NamesData {
                    names: [
                        "ズルッグ",
                        "Scraggy",
                        "Baggiguane",
                        "Scraggy",
                        "Zurrokex",
                        "Scraggy",
                        "곤율랭",
                        "滑滑小子",
                        "滑滑小子",
                    ],
                },
            },
            Self::Scrafty(_) => &SpeciesData {
                national_dex_id: 560,
                names: NamesData {
                    names: [
                        "ズルズキン",
                        "Scrafty",
                        "Baggaïd",
                        "Scrafty",
                        "Irokex",
                        "Scrafty",
                        "곤율거니",
                        "头巾混混",
                        "頭巾混混",
                    ],
                },
            },
            Self::Sigilyph(_) => &SpeciesData {
                national_dex_id: 561,
                names: NamesData {
                    names: [
                        "シンボラー",
                        "Sigilyph",
                        "Cryptéro",
                        "Sigilyph",
                        "Symvolara",
                        "Sigilyph",
                        "심보러",
                        "象征鸟",
                        "象徵鳥",
                    ],
                },
            },
            Self::Yamask(_) => &SpeciesData {
                national_dex_id: 562,
                names: NamesData {
                    names: [
                        "デスマス",
                        "Yamask",
                        "Tutafeh",
                        "Yamask",
                        "Makabaja",
                        "Yamask",
                        "데스마스",
                        "哭哭面具",
                        "哭哭面具",
                    ],
                },
            },
            Self::Cofagrigus(_) => &SpeciesData {
                national_dex_id: 563,
                names: NamesData {
                    names: [
                        "デスカーン",
                        "Cofagrigus",
                        "Tutankafer",
                        "Cofagrigus",
                        "Echnatoll",
                        "Cofagrigus",
                        "데스니칸",
                        "迭失棺",
                        "死神棺",
                    ],
                },
            },
            Self::Tirtouga(_) => &SpeciesData {
                national_dex_id: 564,
                names: NamesData {
                    names: [
                        "プロトーガ",
                        "Tirtouga",
                        "Carapagos",
                        "Tirtouga",
                        "Galapaflos",
                        "Tirtouga",
                        "프로토가",
                        "原盖海龟",
                        "原蓋海龜",
                    ],
                },
            },
            Self::Carracosta(_) => &SpeciesData {
                national_dex_id: 565,
                names: NamesData {
                    names: [
                        "アバゴーラ",
                        "Carracosta",
                        "Mégapagos",
                        "Carracosta",
                        "Karippas",
                        "Carracosta",
                        "늑골라",
                        "肋骨海龟",
                        "肋骨海龜",
                    ],
                },
            },
            Self::Archen(_) => &SpeciesData {
                national_dex_id: 566,
                names: NamesData {
                    names: [
                        "アーケン",
                        "Archen",
                        "Arkéapti",
                        "Archen",
                        "Flapteryx",
                        "Archen",
                        "아켄",
                        "始祖小鸟",
                        "始祖小鳥",
                    ],
                },
            },
            Self::Archeops(_) => &SpeciesData {
                national_dex_id: 567,
                names: NamesData {
                    names: [
                        "アーケオス",
                        "Archeops",
                        "Aéroptéryx",
                        "Archeops",
                        "Aeropteryx",
                        "Archeops",
                        "아케오스",
                        "始祖大鸟",
                        "始祖大鳥",
                    ],
                },
            },
            Self::Trubbish(_) => &SpeciesData {
                national_dex_id: 568,
                names: NamesData {
                    names: [
                        "ヤブクロン",
                        "Trubbish",
                        "Miamiasme",
                        "Trubbish",
                        "Unratütox",
                        "Trubbish",
                        "깨봉이",
                        "破破袋",
                        "破破袋",
                    ],
                },
            },
            Self::Garbodor(_) => &SpeciesData {
                national_dex_id: 569,
                names: NamesData {
                    names: [
                        "ダストダス",
                        "Garbodor",
                        "Miasmax",
                        "Garbodor",
                        "Deponitox",
                        "Garbodor",
                        "더스트나",
                        "灰尘山",
                        "灰塵山",
                    ],
                },
            },
            Self::Zorua(_) => &SpeciesData {
                national_dex_id: 570,
                names: NamesData {
                    names: [
                        "ゾロア",
                        "Zorua",
                        "Zorua",
                        "Zorua",
                        "Zorua",
                        "Zorua",
                        "조로아",
                        "索罗亚",
                        "索羅亞",
                    ],
                },
            },
            Self::Zoroark(_) => &SpeciesData {
                national_dex_id: 571,
                names: NamesData {
                    names: [
                        "ゾロアーク",
                        "Zoroark",
                        "Zoroark",
                        "Zoroark",
                        "Zoroark",
                        "Zoroark",
                        "조로아크",
                        "索罗亚克",
                        "索羅亞克",
                    ],
                },
            },
            Self::Minccino(_) => &SpeciesData {
                national_dex_id: 572,
                names: NamesData {
                    names: [
                        "チラーミィ",
                        "Minccino",
                        "Chinchidou",
                        "Minccino",
                        "Picochilla",
                        "Minccino",
                        "치라미",
                        "泡沫栗鼠",
                        "泡沫栗鼠",
                    ],
                },
            },
            Self::Cinccino(_) => &SpeciesData {
                national_dex_id: 573,
                names: NamesData {
                    names: [
                        "チラチーノ",
                        "Cinccino",
                        "Pashmilla",
                        "Cinccino",
                        "Chillabell",
                        "Cinccino",
                        "치라치노",
                        "奇诺栗鼠",
                        "奇諾栗鼠",
                    ],
                },
            },
            Self::Gothita(_) => &SpeciesData {
                national_dex_id: 574,
                names: NamesData {
                    names: [
                        "ゴチム",
                        "Gothita",
                        "Scrutella",
                        "Gothita",
                        "Mollimorba",
                        "Gothita",
                        "고디탱",
                        "哥德宝宝",
                        "哥德寶寶",
                    ],
                },
            },
            Self::Gothorita(_) => &SpeciesData {
                national_dex_id: 575,
                names: NamesData {
                    names: [
                        "ゴチミル",
                        "Gothorita",
                        "Mesmérella",
                        "Gothorita",
                        "Hypnomorba",
                        "Gothorita",
                        "고디보미",
                        "哥德小童",
                        "哥德小童",
                    ],
                },
            },
            Self::Gothitelle(_) => &SpeciesData {
                national_dex_id: 576,
                names: NamesData {
                    names: [
                        "ゴチルゼル",
                        "Gothitelle",
                        "Sidérella",
                        "Gothitelle",
                        "Morbitesse",
                        "Gothitelle",
                        "고디모아젤",
                        "哥德小姐",
                        "哥德小姐",
                    ],
                },
            },
            Self::Solosis(_) => &SpeciesData {
                national_dex_id: 577,
                names: NamesData {
                    names: [
                        "ユニラン",
                        "Solosis",
                        "Nucléos",
                        "Solosis",
                        "Monozyto",
                        "Solosis",
                        "유니란",
                        "单卵细胞球",
                        "單卵細胞球",
                    ],
                },
            },
            Self::Duosion(_) => &SpeciesData {
                national_dex_id: 578,
                names: NamesData {
                    names: [
                        "ダブラン",
                        "Duosion",
                        "Méios",
                        "Duosion",
                        "Mitodos",
                        "Duosion",
                        "듀란",
                        "双卵细胞球",
                        "雙卵細胞球",
                    ],
                },
            },
            Self::Reuniclus(_) => &SpeciesData {
                national_dex_id: 579,
                names: NamesData {
                    names: [
                        "ランクルス",
                        "Reuniclus",
                        "Symbios",
                        "Reuniclus",
                        "Zytomega",
                        "Reuniclus",
                        "란쿨루스",
                        "人造细胞卵",
                        "人造細胞卵",
                    ],
                },
            },
            Self::Ducklett(_) => &SpeciesData {
                national_dex_id: 580,
                names: NamesData {
                    names: [
                        "コアルヒー",
                        "Ducklett",
                        "Couaneton",
                        "Ducklett",
                        "Piccolente",
                        "Ducklett",
                        "꼬지보리",
                        "鸭宝宝",
                        "鴨寶寶",
                    ],
                },
            },
            Self::Swanna(_) => &SpeciesData {
                national_dex_id: 581,
                names: NamesData {
                    names: [
                        "スワンナ",
                        "Swanna",
                        "Lakmécygne",
                        "Swanna",
                        "Swaroness",
                        "Swanna",
                        "스완나",
                        "舞天鹅",
                        "舞天鵝",
                    ],
                },
            },
            Self::Vanillite(_) => &SpeciesData {
                national_dex_id: 582,
                names: NamesData {
                    names: [
                        "バニプッチ",
                        "Vanillite",
                        "Sorbébé",
                        "Vanillite",
                        "Gelatini",
                        "Vanillite",
                        "바닐프티",
                        "迷你冰",
                        "迷你冰",
                    ],
                },
            },
            Self::Vanillish(_) => &SpeciesData {
                national_dex_id: 583,
                names: NamesData {
                    names: [
                        "バニリッチ",
                        "Vanillish",
                        "Sorboul",
                        "Vanillish",
                        "Gelatroppo",
                        "Vanillish",
                        "바닐리치",
                        "多多冰",
                        "多多冰",
                    ],
                },
            },
            Self::Vanilluxe(_) => &SpeciesData {
                national_dex_id: 584,
                names: NamesData {
                    names: [
                        "バイバニラ",
                        "Vanilluxe",
                        "Sorbouboul",
                        "Vanilluxe",
                        "Gelatwino",
                        "Vanilluxe",
                        "배바닐라",
                        "双倍多多冰",
                        "雙倍多多冰",
                    ],
                },
            },
            Self::Deerling(_) => &SpeciesData {
                national_dex_id: 585,
                names: NamesData {
                    names: [
                        "シキジカ",
                        "Deerling",
                        "Vivaldaim",
                        "Deerling",
                        "Sesokitz",
                        "Deerling",
                        "사철록",
                        "四季鹿",
                        "四季鹿",
                    ],
                },
            },
            Self::Sawsbuck(_) => &SpeciesData {
                national_dex_id: 586,
                names: NamesData {
                    names: [
                        "メブキジカ",
                        "Sawsbuck",
                        "Haydaim",
                        "Sawsbuck",
                        "Kronjuwild",
                        "Sawsbuck",
                        "바라철록",
                        "萌芽鹿",
                        "萌芽鹿",
                    ],
                },
            },
            Self::Emolga(_) => &SpeciesData {
                national_dex_id: 587,
                names: NamesData {
                    names: [
                        "エモンガ",
                        "Emolga",
                        "Emolga",
                        "Emolga",
                        "Emolga",
                        "Emolga",
                        "에몽가",
                        "电飞鼠",
                        "電飛鼠",
                    ],
                },
            },
            Self::Karrablast(_) => &SpeciesData {
                national_dex_id: 588,
                names: NamesData {
                    names: [
                        "カブルモ",
                        "Karrablast",
                        "Carabing",
                        "Karrablast",
                        "Laukaps",
                        "Karrablast",
                        "딱정곤",
                        "盖盖虫",
                        "蓋蓋蟲",
                    ],
                },
            },
            Self::Escavalier(_) => &SpeciesData {
                national_dex_id: 589,
                names: NamesData {
                    names: [
                        "シュバルゴ",
                        "Escavalier",
                        "Lançargot",
                        "Escavalier",
                        "Cavalanzas",
                        "Escavalier",
                        "슈바르고",
                        "骑士蜗牛",
                        "騎士蝸牛",
                    ],
                },
            },
            Self::Foongus(_) => &SpeciesData {
                national_dex_id: 590,
                names: NamesData {
                    names: [
                        "タマゲタケ",
                        "Foongus",
                        "Trompignon",
                        "Foongus",
                        "Tarnpignon",
                        "Foongus",
                        "깜놀버슬",
                        "哎呀球菇",
                        "哎呀球菇",
                    ],
                },
            },
            Self::Amoonguss(_) => &SpeciesData {
                national_dex_id: 591,
                names: NamesData {
                    names: [
                        "モロバレル",
                        "Amoonguss",
                        "Gaulet",
                        "Amoonguss",
                        "Hutsassa",
                        "Amoonguss",
                        "뽀록나",
                        "败露球菇",
                        "敗露球菇",
                    ],
                },
            },
            Self::Frillish(_) => &SpeciesData {
                national_dex_id: 592,
                names: NamesData {
                    names: [
                        "プルリル",
                        "Frillish",
                        "Viskuse",
                        "Frillish",
                        "Quabbel",
                        "Frillish",
                        "탱그릴",
                        "轻飘飘",
                        "輕飄飄",
                    ],
                },
            },
            Self::Jellicent(_) => &SpeciesData {
                national_dex_id: 593,
                names: NamesData {
                    names: [
                        "ブルンゲル",
                        "Jellicent",
                        "Moyade",
                        "Jellicent",
                        "Apoquallyp",
                        "Jellicent",
                        "탱탱겔",
                        "胖嘟嘟",
                        "胖嘟嘟",
                    ],
                },
            },
            Self::Alomomola(_) => &SpeciesData {
                national_dex_id: 594,
                names: NamesData {
                    names: [
                        "ママンボウ",
                        "Alomomola",
                        "Mamanbo",
                        "Alomomola",
                        "Mamolida",
                        "Alomomola",
                        "맘복치",
                        "保姆曼波",
                        "保母曼波",
                    ],
                },
            },
            Self::Joltik(_) => &SpeciesData {
                national_dex_id: 595,
                names: NamesData {
                    names: [
                        "バチュル",
                        "Joltik",
                        "Statitik",
                        "Joltik",
                        "Wattzapf",
                        "Joltik",
                        "파쪼옥",
                        "电电虫",
                        "電電蟲",
                    ],
                },
            },
            Self::Galvantula(_) => &SpeciesData {
                national_dex_id: 596,
                names: NamesData {
                    names: [
                        "デンチュラ",
                        "Galvantula",
                        "Mygavolt",
                        "Galvantula",
                        "Voltula",
                        "Galvantula",
                        "전툴라",
                        "电蜘蛛",
                        "電蜘蛛",
                    ],
                },
            },
            Self::Ferroseed(_) => &SpeciesData {
                national_dex_id: 597,
                names: NamesData {
                    names: [
                        "テッシード",
                        "Ferroseed",
                        "Grindur",
                        "Ferroseed",
                        "Kastadur",
                        "Ferroseed",
                        "철시드",
                        "种子铁球",
                        "種子鐵球",
                    ],
                },
            },
            Self::Ferrothorn(_) => &SpeciesData {
                national_dex_id: 598,
                names: NamesData {
                    names: [
                        "ナットレイ",
                        "Ferrothorn",
                        "Noacier",
                        "Ferrothorn",
                        "Tentantel",
                        "Ferrothorn",
                        "너트령",
                        "坚果哑铃",
                        "堅果啞鈴",
                    ],
                },
            },
            Self::Klink(_) => &SpeciesData {
                national_dex_id: 599,
                names: NamesData {
                    names: [
                        "ギアル",
                        "Klink",
                        "Tic",
                        "Klink",
                        "Klikk",
                        "Klink",
                        "기어르",
                        "齿轮儿",
                        "齒輪兒",
                    ],
                },
            },
            Self::Klang(_) => &SpeciesData {
                national_dex_id: 600,
                names: NamesData {
                    names: [
                        "ギギアル",
                        "Klang",
                        "Clic",
                        "Klang",
                        "Kliklak",
                        "Klang",
                        "기기어르",
                        "齿轮组",
                        "齒輪組",
                    ],
                },
            },
            Self::Klinklang(_) => &SpeciesData {
                national_dex_id: 601,
                names: NamesData {
                    names: [
                        "ギギギアル",
                        "Klinklang",
                        "Cliticlic",
                        "Klinklang",
                        "Klikdiklak",
                        "Klinklang",
                        "기기기어르",
                        "齿轮怪",
                        "齒輪怪",
                    ],
                },
            },
            Self::Tynamo(_) => &SpeciesData {
                national_dex_id: 602,
                names: NamesData {
                    names: [
                        "シビシラス",
                        "Tynamo",
                        "Anchwatt",
                        "Tynamo",
                        "Zapplardin",
                        "Tynamo",
                        "저리어",
                        "麻麻小鱼",
                        "麻麻小魚",
                    ],
                },
            },
            Self::Eelektrik(_) => &SpeciesData {
                national_dex_id: 603,
                names: NamesData {
                    names: [
                        "シビビール",
                        "Eelektrik",
                        "Lampéroie",
                        "Eelektrik",
                        "Zapplalek",
                        "Eelektrik",
                        "저리릴",
                        "麻麻鳗",
                        "麻麻鰻",
                    ],
                },
            },
            Self::Eelektross(_) => &SpeciesData {
                national_dex_id: 604,
                names: NamesData {
                    names: [
                        "シビルドン",
                        "Eelektross",
                        "Ohmassacre",
                        "Eelektross",
                        "Zapplarang",
                        "Eelektross",
                        "저리더프",
                        "麻麻鳗鱼王",
                        "麻麻鰻魚王",
                    ],
                },
            },
            Self::Elgyem(_) => &SpeciesData {
                national_dex_id: 605,
                names: NamesData {
                    names: [
                        "リグレー",
                        "Elgyem",
                        "Lewsor",
                        "Elgyem",
                        "Pygraulon",
                        "Elgyem",
                        "리그레",
                        "小灰怪",
                        "小灰怪",
                    ],
                },
            },
            Self::Beheeyem(_) => &SpeciesData {
                national_dex_id: 606,
                names: NamesData {
                    names: [
                        "オーベム",
                        "Beheeyem",
                        "Neitram",
                        "Beheeyem",
                        "Megalon",
                        "Beheeyem",
                        "벰크",
                        "大宇怪",
                        "大宇怪",
                    ],
                },
            },
            Self::Litwick(_) => &SpeciesData {
                national_dex_id: 607,
                names: NamesData {
                    names: [
                        "ヒトモシ",
                        "Litwick",
                        "Funécire",
                        "Litwick",
                        "Lichtel",
                        "Litwick",
                        "불켜미",
                        "烛光灵",
                        "燭光靈",
                    ],
                },
            },
            Self::Lampent(_) => &SpeciesData {
                national_dex_id: 608,
                names: NamesData {
                    names: [
                        "ランプラー",
                        "Lampent",
                        "Mélancolux",
                        "Lampent",
                        "Laternecto",
                        "Lampent",
                        "램프라",
                        "灯火幽灵",
                        "燈火幽靈",
                    ],
                },
            },
            Self::Chandelure(_) => &SpeciesData {
                national_dex_id: 609,
                names: NamesData {
                    names: [
                        "シャンデラ",
                        "Chandelure",
                        "Lugulabre",
                        "Chandelure",
                        "Skelabra",
                        "Chandelure",
                        "샹델라",
                        "水晶灯火灵",
                        "水晶燈火靈",
                    ],
                },
            },
            Self::Axew(_) => &SpeciesData {
                national_dex_id: 610,
                names: NamesData {
                    names: [
                        "キバゴ",
                        "Axew",
                        "Coupenotte",
                        "Axew",
                        "Milza",
                        "Axew",
                        "터검니",
                        "牙牙",
                        "牙牙",
                    ],
                },
            },
            Self::Fraxure(_) => &SpeciesData {
                national_dex_id: 611,
                names: NamesData {
                    names: [
                        "オノンド",
                        "Fraxure",
                        "Incisache",
                        "Fraxure",
                        "Sharfax",
                        "Fraxure",
                        "액슨도",
                        "斧牙龙",
                        "斧牙龍",
                    ],
                },
            },
            Self::Haxorus(_) => &SpeciesData {
                national_dex_id: 612,
                names: NamesData {
                    names: [
                        "オノノクス",
                        "Haxorus",
                        "Tranchodon",
                        "Haxorus",
                        "Maxax",
                        "Haxorus",
                        "액스라이즈",
                        "双斧战龙",
                        "雙斧戰龍",
                    ],
                },
            },
            Self::Cubchoo(_) => &SpeciesData {
                national_dex_id: 613,
                names: NamesData {
                    names: [
                        "クマシュン",
                        "Cubchoo",
                        "Polarhume",
                        "Cubchoo",
                        "Petznief",
                        "Cubchoo",
                        "코고미",
                        "喷嚏熊",
                        "噴嚏熊",
                    ],
                },
            },
            Self::Beartic(_) => &SpeciesData {
                national_dex_id: 614,
                names: NamesData {
                    names: [
                        "ツンベアー",
                        "Beartic",
                        "Polagriffe",
                        "Beartic",
                        "Siberio",
                        "Beartic",
                        "툰베어",
                        "冻原熊",
                        "凍原熊",
                    ],
                },
            },
            Self::Cryogonal(_) => &SpeciesData {
                national_dex_id: 615,
                names: NamesData {
                    names: [
                        "フリージオ",
                        "Cryogonal",
                        "Hexagel",
                        "Cryogonal",
                        "Frigometri",
                        "Cryogonal",
                        "프리지오",
                        "几何雪花",
                        "幾何雪花",
                    ],
                },
            },
            Self::Shelmet(_) => &SpeciesData {
                national_dex_id: 616,
                names: NamesData {
                    names: [
                        "チョボマキ",
                        "Shelmet",
                        "Escargaume",
                        "Shelmet",
                        "Schnuthelm",
                        "Shelmet",
                        "쪼마리",
                        "小嘴蜗",
                        "小嘴蝸",
                    ],
                },
            },
            Self::Accelgor(_) => &SpeciesData {
                national_dex_id: 617,
                names: NamesData {
                    names: [
                        "アギルダー",
                        "Accelgor",
                        "Limaspeed",
                        "Accelgor",
                        "Hydragil",
                        "Accelgor",
                        "어지리더",
                        "敏捷虫",
                        "敏捷蟲",
                    ],
                },
            },
            Self::Stunfisk(_) => &SpeciesData {
                national_dex_id: 618,
                names: NamesData {
                    names: [
                        "マッギョ",
                        "Stunfisk",
                        "Limonde",
                        "Stunfisk",
                        "Flunschlik",
                        "Stunfisk",
                        "메더",
                        "泥巴鱼",
                        "泥巴魚",
                    ],
                },
            },
            Self::Mienfoo(_) => &SpeciesData {
                national_dex_id: 619,
                names: NamesData {
                    names: [
                        "コジョフー",
                        "Mienfoo",
                        "Kungfouine",
                        "Mienfoo",
                        "Lin-Fu",
                        "Mienfoo",
                        "비조푸",
                        "功夫鼬",
                        "功夫鼬",
                    ],
                },
            },
            Self::Mienshao(_) => &SpeciesData {
                national_dex_id: 620,
                names: NamesData {
                    names: [
                        "コジョンド",
                        "Mienshao",
                        "Shaofouine",
                        "Mienshao",
                        "Wie-Shu",
                        "Mienshao",
                        "비조도",
                        "师父鼬",
                        "師父鼬",
                    ],
                },
            },
            Self::Druddigon(_) => &SpeciesData {
                national_dex_id: 621,
                names: NamesData {
                    names: [
                        "クリムガン",
                        "Druddigon",
                        "Drakkarmin",
                        "Druddigon",
                        "Shardrago",
                        "Druddigon",
                        "크리만",
                        "赤面龙",
                        "赤面龍",
                    ],
                },
            },
            Self::Golett(_) => &SpeciesData {
                national_dex_id: 622,
                names: NamesData {
                    names: [
                        "ゴビット",
                        "Golett",
                        "Gringolem",
                        "Golett",
                        "Golbit",
                        "Golett",
                        "골비람",
                        "泥偶小人",
                        "泥偶小人",
                    ],
                },
            },
            Self::Golurk(_) => &SpeciesData {
                national_dex_id: 623,
                names: NamesData {
                    names: [
                        "ゴルーグ",
                        "Golurk",
                        "Golemastoc",
                        "Golurk",
                        "Golgantes",
                        "Golurk",
                        "골루그",
                        "泥偶巨人",
                        "泥偶巨人",
                    ],
                },
            },
            Self::Pawniard(_) => &SpeciesData {
                national_dex_id: 624,
                names: NamesData {
                    names: [
                        "コマタナ",
                        "Pawniard",
                        "Scalpion",
                        "Pawniard",
                        "Gladiantri",
                        "Pawniard",
                        "자망칼",
                        "驹刀小兵",
                        "駒刀小兵",
                    ],
                },
            },
            Self::Bisharp(_) => &SpeciesData {
                national_dex_id: 625,
                names: NamesData {
                    names: [
                        "キリキザン",
                        "Bisharp",
                        "Scalproie",
                        "Bisharp",
                        "Caesurio",
                        "Bisharp",
                        "절각참",
                        "劈斩司令",
                        "劈斬司令",
                    ],
                },
            },
            Self::Bouffalant(_) => &SpeciesData {
                national_dex_id: 626,
                names: NamesData {
                    names: [
                        "バッフロン",
                        "Bouffalant",
                        "Frison",
                        "Bouffalant",
                        "Bisofank",
                        "Bouffalant",
                        "버프론",
                        "爆炸头水牛",
                        "爆炸頭水牛",
                    ],
                },
            },
            Self::Rufflet(_) => &SpeciesData {
                national_dex_id: 627,
                names: NamesData {
                    names: [
                        "ワシボン",
                        "Rufflet",
                        "Furaiglon",
                        "Rufflet",
                        "Geronimatz",
                        "Rufflet",
                        "수리둥보",
                        "毛头小鹰",
                        "毛頭小鷹",
                    ],
                },
            },
            Self::Braviary(_) => &SpeciesData {
                national_dex_id: 628,
                names: NamesData {
                    names: [
                        "ウォーグル",
                        "Braviary",
                        "Gueriaigle",
                        "Braviary",
                        "Washakwil",
                        "Braviary",
                        "워글",
                        "勇士雄鹰",
                        "勇士雄鷹",
                    ],
                },
            },
            Self::Vullaby(_) => &SpeciesData {
                national_dex_id: 629,
                names: NamesData {
                    names: [
                        "バルチャイ",
                        "Vullaby",
                        "Vostourno",
                        "Vullaby",
                        "Skallyk",
                        "Vullaby",
                        "벌차이",
                        "秃鹰丫头",
                        "禿鷹丫頭",
                    ],
                },
            },
            Self::Mandibuzz(_) => &SpeciesData {
                national_dex_id: 630,
                names: NamesData {
                    names: [
                        "バルジーナ",
                        "Mandibuzz",
                        "Vaututrice",
                        "Mandibuzz",
                        "Grypheldis",
                        "Mandibuzz",
                        "버랜지나",
                        "秃鹰娜",
                        "禿鷹娜",
                    ],
                },
            },
            Self::Heatmor(_) => &SpeciesData {
                national_dex_id: 631,
                names: NamesData {
                    names: [
                        "クイタラン",
                        "Heatmor",
                        "Aflamanoir",
                        "Heatmor",
                        "Furnifraß",
                        "Heatmor",
                        "앤티골",
                        "熔蚁兽",
                        "熔蟻獸",
                    ],
                },
            },
            Self::Durant(_) => &SpeciesData {
                national_dex_id: 632,
                names: NamesData {
                    names: [
                        "アイアント",
                        "Durant",
                        "Fermite",
                        "Durant",
                        "Fermicula",
                        "Durant",
                        "아이앤트",
                        "铁蚁",
                        "鐵蟻",
                    ],
                },
            },
            Self::Deino(_) => &SpeciesData {
                national_dex_id: 633,
                names: NamesData {
                    names: [
                        "モノズ",
                        "Deino",
                        "Solochi",
                        "Deino",
                        "Kapuno",
                        "Deino",
                        "모노두",
                        "单首龙",
                        "單首龍",
                    ],
                },
            },
            Self::Zweilous(_) => &SpeciesData {
                national_dex_id: 634,
                names: NamesData {
                    names: [
                        "ジヘッド",
                        "Zweilous",
                        "Diamat",
                        "Zweilous",
                        "Duodino",
                        "Zweilous",
                        "디헤드",
                        "双首暴龙",
                        "雙首暴龍",
                    ],
                },
            },
            Self::Hydreigon(_) => &SpeciesData {
                national_dex_id: 635,
                names: NamesData {
                    names: [
                        "サザンドラ",
                        "Hydreigon",
                        "Trioxhydre",
                        "Hydreigon",
                        "Trikephalo",
                        "Hydreigon",
                        "삼삼드래",
                        "三首恶龙",
                        "三首惡龍",
                    ],
                },
            },
            Self::Larvesta(_) => &SpeciesData {
                national_dex_id: 636,
                names: NamesData {
                    names: [
                        "メラルバ",
                        "Larvesta",
                        "Pyronille",
                        "Larvesta",
                        "Ignivor",
                        "Larvesta",
                        "활화르바",
                        "燃烧虫",
                        "燃燒蟲",
                    ],
                },
            },
            Self::Volcarona(_) => &SpeciesData {
                national_dex_id: 637,
                names: NamesData {
                    names: [
                        "ウルガモス",
                        "Volcarona",
                        "Pyrax",
                        "Volcarona",
                        "Ramoth",
                        "Volcarona",
                        "불카모스",
                        "火神蛾",
                        "火神蛾",
                    ],
                },
            },
            Self::Cobalion(_) => &SpeciesData {
                national_dex_id: 638,
                names: NamesData {
                    names: [
                        "コバルオン",
                        "Cobalion",
                        "Cobaltium",
                        "Cobalion",
                        "Kobalium",
                        "Cobalion",
                        "코바르온",
                        "勾帕路翁",
                        "勾帕路翁",
                    ],
                },
            },
            Self::Terrakion(_) => &SpeciesData {
                national_dex_id: 639,
                names: NamesData {
                    names: [
                        "テラキオン",
                        "Terrakion",
                        "Terrakium",
                        "Terrakion",
                        "Terrakium",
                        "Terrakion",
                        "테라키온",
                        "代拉基翁",
                        "代拉基翁",
                    ],
                },
            },
            Self::Virizion(_) => &SpeciesData {
                national_dex_id: 640,
                names: NamesData {
                    names: [
                        "ビリジオン",
                        "Virizion",
                        "Viridium",
                        "Virizion",
                        "Viridium",
                        "Virizion",
                        "비리디온",
                        "毕力吉翁",
                        "畢力吉翁",
                    ],
                },
            },
            Self::Tornadus(_) => &SpeciesData {
                national_dex_id: 641,
                names: NamesData {
                    names: [
                        "トルネロス",
                        "Tornadus",
                        "Boréas",
                        "Tornadus",
                        "Boreos",
                        "Tornadus",
                        "토네로스",
                        "龙卷云",
                        "龍捲雲",
                    ],
                },
            },
            Self::Thundurus(_) => &SpeciesData {
                national_dex_id: 642,
                names: NamesData {
                    names: [
                        "ボルトロス",
                        "Thundurus",
                        "Fulguris",
                        "Thundurus",
                        "Voltolos",
                        "Thundurus",
                        "볼트로스",
                        "雷电云",
                        "雷電雲",
                    ],
                },
            },
            Self::Reshiram(_) => &SpeciesData {
                national_dex_id: 643,
                names: NamesData {
                    names: [
                        "レシラム",
                        "Reshiram",
                        "Reshiram",
                        "Reshiram",
                        "Reshiram",
                        "Reshiram",
                        "레시라무",
                        "莱希拉姆",
                        "萊希拉姆",
                    ],
                },
            },
            Self::Zekrom(_) => &SpeciesData {
                national_dex_id: 644,
                names: NamesData {
                    names: [
                        "ゼクロム",
                        "Zekrom",
                        "Zekrom",
                        "Zekrom",
                        "Zekrom",
                        "Zekrom",
                        "제크로무",
                        "捷克罗姆",
                        "捷克羅姆",
                    ],
                },
            },
            Self::Landorus(_) => &SpeciesData {
                national_dex_id: 645,
                names: NamesData {
                    names: [
                        "ランドロス",
                        "Landorus",
                        "Démétéros",
                        "Landorus",
                        "Demeteros",
                        "Landorus",
                        "랜드로스",
                        "土地云",
                        "土地雲",
                    ],
                },
            },
            Self::Kyurem(_) => &SpeciesData {
                national_dex_id: 646,
                names: NamesData {
                    names: [
                        "キュレム",
                        "Kyurem",
                        "Kyurem",
                        "Kyurem",
                        "Kyurem",
                        "Kyurem",
                        "큐레무",
                        "酋雷姆",
                        "酋雷姆",
                    ],
                },
            },
            Self::Keldeo(_) => &SpeciesData {
                national_dex_id: 647,
                names: NamesData {
                    names: [
                        "ケルディオ",
                        "Keldeo",
                        "Keldeo",
                        "Keldeo",
                        "Keldeo",
                        "Keldeo",
                        "케르디오",
                        "凯路迪欧",
                        "凱路迪歐",
                    ],
                },
            },
            Self::Meloetta(_) => &SpeciesData {
                national_dex_id: 648,
                names: NamesData {
                    names: [
                        "メロエッタ",
                        "Meloetta",
                        "Meloetta",
                        "Meloetta",
                        "Meloetta",
                        "Meloetta",
                        "메로엣타",
                        "美洛耶塔",
                        "美洛耶塔",
                    ],
                },
            },
            Self::Genesect(_) => &SpeciesData {
                national_dex_id: 649,
                names: NamesData {
                    names: [
                        "ゲノセクト",
                        "Genesect",
                        "Genesect",
                        "Genesect",
                        "Genesect",
                        "Genesect",
                        "게노세크트",
                        "盖诺赛克特",
                        "蓋諾賽克特",
                    ],
                },
            },
            Self::Chespin(_) => &SpeciesData {
                national_dex_id: 650,
                names: NamesData {
                    names: [
                        "ハリマロン",
                        "Chespin",
                        "Marisson",
                        "Chespin",
                        "Igamaro",
                        "Chespin",
                        "도치마론",
                        "哈力栗",
                        "哈力栗",
                    ],
                },
            },
            Self::Quilladin(_) => &SpeciesData {
                national_dex_id: 651,
                names: NamesData {
                    names: [
                        "ハリボーグ",
                        "Quilladin",
                        "Boguérisse",
                        "Quilladin",
                        "Igastarnish",
                        "Quilladin",
                        "도치보구",
                        "胖胖哈力",
                        "胖胖哈力",
                    ],
                },
            },
            Self::Chesnaught(_) => &SpeciesData {
                national_dex_id: 652,
                names: NamesData {
                    names: [
                        "ブリガロン",
                        "Chesnaught",
                        "Blindépique",
                        "Chesnaught",
                        "Brigaron",
                        "Chesnaught",
                        "브리가론",
                        "布里卡隆",
                        "布里卡隆",
                    ],
                },
            },
            Self::Fennekin(_) => &SpeciesData {
                national_dex_id: 653,
                names: NamesData {
                    names: [
                        "フォッコ",
                        "Fennekin",
                        "Feunnec",
                        "Fennekin",
                        "Fynx",
                        "Fennekin",
                        "푸호꼬",
                        "火狐狸",
                        "火狐狸",
                    ],
                },
            },
            Self::Braixen(_) => &SpeciesData {
                national_dex_id: 654,
                names: NamesData {
                    names: [
                        "テールナー",
                        "Braixen",
                        "Roussil",
                        "Braixen",
                        "Rutena",
                        "Braixen",
                        "테르나",
                        "长尾火狐",
                        "長尾火狐",
                    ],
                },
            },
            Self::Delphox(_) => &SpeciesData {
                national_dex_id: 655,
                names: NamesData {
                    names: [
                        "マフォクシー",
                        "Delphox",
                        "Goupelin",
                        "Delphox",
                        "Fennexis",
                        "Delphox",
                        "마폭시",
                        "妖火红狐",
                        "妖火紅狐",
                    ],
                },
            },
            Self::Froakie(_) => &SpeciesData {
                national_dex_id: 656,
                names: NamesData {
                    names: [
                        "ケロマツ",
                        "Froakie",
                        "Grenousse",
                        "Froakie",
                        "Froxy",
                        "Froakie",
                        "개구마르",
                        "呱呱泡蛙",
                        "呱呱泡蛙",
                    ],
                },
            },
            Self::Frogadier(_) => &SpeciesData {
                national_dex_id: 657,
                names: NamesData {
                    names: [
                        "ゲコガシラ",
                        "Frogadier",
                        "Croâporal",
                        "Frogadier",
                        "Amphizel",
                        "Frogadier",
                        "개굴반장",
                        "呱头蛙",
                        "呱頭蛙",
                    ],
                },
            },
            Self::Greninja(_) => &SpeciesData {
                national_dex_id: 658,
                names: NamesData {
                    names: [
                        "ゲッコウガ",
                        "Greninja",
                        "Amphinobi",
                        "Greninja",
                        "Quajutsu",
                        "Greninja",
                        "개굴닌자",
                        "甲贺忍蛙",
                        "甲賀忍蛙",
                    ],
                },
            },
            Self::Bunnelby(_) => &SpeciesData {
                national_dex_id: 659,
                names: NamesData {
                    names: [
                        "ホルビー",
                        "Bunnelby",
                        "Sapereau",
                        "Bunnelby",
                        "Scoppel",
                        "Bunnelby",
                        "파르빗",
                        "掘掘兔",
                        "掘掘兔",
                    ],
                },
            },
            Self::Diggersby(_) => &SpeciesData {
                national_dex_id: 660,
                names: NamesData {
                    names: [
                        "ホルード",
                        "Diggersby",
                        "Excavarenne",
                        "Diggersby",
                        "Grebbit",
                        "Diggersby",
                        "파르토",
                        "掘地兔",
                        "掘地兔",
                    ],
                },
            },
            Self::Fletchling(_) => &SpeciesData {
                national_dex_id: 661,
                names: NamesData {
                    names: [
                        "ヤヤコマ",
                        "Fletchling",
                        "Passerouge",
                        "Fletchling",
                        "Dartiri",
                        "Fletchling",
                        "화살꼬빈",
                        "小箭雀",
                        "小箭雀",
                    ],
                },
            },
            Self::Fletchinder(_) => &SpeciesData {
                national_dex_id: 662,
                names: NamesData {
                    names: [
                        "ヒノヤコマ",
                        "Fletchinder",
                        "Braisillon",
                        "Fletchinder",
                        "Dartignis",
                        "Fletchinder",
                        "불화살빈",
                        "火箭雀",
                        "火箭雀",
                    ],
                },
            },
            Self::Talonflame(_) => &SpeciesData {
                national_dex_id: 663,
                names: NamesData {
                    names: [
                        "ファイアロー",
                        "Talonflame",
                        "Flambusard",
                        "Talonflame",
                        "Fiaro",
                        "Talonflame",
                        "파이어로",
                        "烈箭鹰",
                        "烈箭鷹",
                    ],
                },
            },
            Self::Scatterbug(_) => &SpeciesData {
                national_dex_id: 664,
                names: NamesData {
                    names: [
                        "コフキムシ",
                        "Scatterbug",
                        "Lépidonille",
                        "Scatterbug",
                        "Purmel",
                        "Scatterbug",
                        "분이벌레",
                        "粉蝶虫",
                        "粉蝶蟲",
                    ],
                },
            },
            Self::Spewpa(_) => &SpeciesData {
                national_dex_id: 665,
                names: NamesData {
                    names: [
                        "コフーライ",
                        "Spewpa",
                        "Pérégrain",
                        "Spewpa",
                        "Puponcho",
                        "Spewpa",
                        "분떠도리",
                        "粉蝶蛹",
                        "粉蝶蛹",
                    ],
                },
            },
            Self::Vivillon(_) => &SpeciesData {
                national_dex_id: 666,
                names: NamesData {
                    names: [
                        "ビビヨン",
                        "Vivillon",
                        "Prismillon",
                        "Vivillon",
                        "Vivillon",
                        "Vivillon",
                        "비비용",
                        "彩粉蝶",
                        "彩粉蝶",
                    ],
                },
            },
            Self::Litleo(_) => &SpeciesData {
                national_dex_id: 667,
                names: NamesData {
                    names: [
                        "シシコ",
                        "Litleo",
                        "Hélionceau",
                        "Litleo",
                        "Leufeo",
                        "Litleo",
                        "레오꼬",
                        "小狮狮",
                        "小獅獅",
                    ],
                },
            },
            Self::Pyroar(_) => &SpeciesData {
                national_dex_id: 668,
                names: NamesData {
                    names: [
                        "カエンジシ",
                        "Pyroar",
                        "Némélios",
                        "Pyroar",
                        "Pyroleo",
                        "Pyroar",
                        "화염레오",
                        "火炎狮",
                        "火炎獅",
                    ],
                },
            },
            Self::Flabebe(_) => &SpeciesData {
                national_dex_id: 669,
                names: NamesData {
                    names: [
                        "フラベベ",
                        "Flabébé",
                        "Flabébé",
                        "Flabébé",
                        "Flabébé",
                        "Flabébé",
                        "플라베베",
                        "花蓓蓓",
                        "花蓓蓓",
                    ],
                },
            },
            Self::Floette(_) => &SpeciesData {
                national_dex_id: 670,
                names: NamesData {
                    names: [
                        "フラエッテ",
                        "Floette",
                        "Floette",
                        "Floette",
                        "Floette",
                        "Floette",
                        "플라엣테",
                        "花叶蒂",
                        "花葉蒂",
                    ],
                },
            },
            Self::Florges(_) => &SpeciesData {
                national_dex_id: 671,
                names: NamesData {
                    names: [
                        "フラージェス",
                        "Florges",
                        "Florges",
                        "Florges",
                        "Florges",
                        "Florges",
                        "플라제스",
                        "花洁夫人",
                        "花潔夫人",
                    ],
                },
            },
            Self::Skiddo(_) => &SpeciesData {
                national_dex_id: 672,
                names: NamesData {
                    names: [
                        "メェークル",
                        "Skiddo",
                        "Cabriolaine",
                        "Skiddo",
                        "Mähikel",
                        "Skiddo",
                        "메이클",
                        "坐骑小羊",
                        "坐騎小羊",
                    ],
                },
            },
            Self::Gogoat(_) => &SpeciesData {
                national_dex_id: 673,
                names: NamesData {
                    names: [
                        "ゴーゴート",
                        "Gogoat",
                        "Chevroum",
                        "Gogoat",
                        "Chevrumm",
                        "Gogoat",
                        "고고트",
                        "坐骑山羊",
                        "坐騎山羊",
                    ],
                },
            },
            Self::Pancham(_) => &SpeciesData {
                national_dex_id: 674,
                names: NamesData {
                    names: [
                        "ヤンチャム",
                        "Pancham",
                        "Pandespiègle",
                        "Pancham",
                        "Pam-Pam",
                        "Pancham",
                        "판짱",
                        "顽皮熊猫",
                        "頑皮熊貓",
                    ],
                },
            },
            Self::Pangoro(_) => &SpeciesData {
                national_dex_id: 675,
                names: NamesData {
                    names: [
                        "ゴロンダ",
                        "Pangoro",
                        "Pandarbare",
                        "Pangoro",
                        "Pandagro",
                        "Pangoro",
                        "부란다",
                        "霸道熊猫",
                        "流氓熊貓",
                    ],
                },
            },
            Self::Furfrou(_) => &SpeciesData {
                national_dex_id: 676,
                names: NamesData {
                    names: [
                        "トリミアン",
                        "Furfrou",
                        "Couafarel",
                        "Furfrou",
                        "Coiffwaff",
                        "Furfrou",
                        "트리미앙",
                        "多丽米亚",
                        "多麗米亞",
                    ],
                },
            },
            Self::Espurr(_) => &SpeciesData {
                national_dex_id: 677,
                names: NamesData {
                    names: [
                        "ニャスパー",
                        "Espurr",
                        "Psystigri",
                        "Espurr",
                        "Psiau",
                        "Espurr",
                        "냐스퍼",
                        "妙喵",
                        "妙喵",
                    ],
                },
            },
            Self::Meowstic(_) => &SpeciesData {
                national_dex_id: 678,
                names: NamesData {
                    names: [
                        "ニャオニクス",
                        "Meowstic",
                        "Mistigrix",
                        "Meowstic",
                        "Psiaugon",
                        "Meowstic",
                        "냐오닉스",
                        "超能妙喵",
                        "超能妙喵",
                    ],
                },
            },
            Self::Honedge(_) => &SpeciesData {
                national_dex_id: 679,
                names: NamesData {
                    names: [
                        "ヒトツキ",
                        "Honedge",
                        "Monorpale",
                        "Honedge",
                        "Gramokles",
                        "Honedge",
                        "단칼빙",
                        "独剑鞘",
                        "獨劍鞘",
                    ],
                },
            },
            Self::Doublade(_) => &SpeciesData {
                national_dex_id: 680,
                names: NamesData {
                    names: [
                        "ニダンギル",
                        "Doublade",
                        "Dimoclès",
                        "Doublade",
                        "Duokles",
                        "Doublade",
                        "쌍검킬",
                        "双剑鞘",
                        "雙劍鞘",
                    ],
                },
            },
            Self::Aegislash(_) => &SpeciesData {
                national_dex_id: 681,
                names: NamesData {
                    names: [
                        "ギルガルド",
                        "Aegislash",
                        "Exagide",
                        "Aegislash",
                        "Durengard",
                        "Aegislash",
                        "킬가르도",
                        "坚盾剑怪",
                        "堅盾劍怪",
                    ],
                },
            },
            Self::Spritzee(_) => &SpeciesData {
                national_dex_id: 682,
                names: NamesData {
                    names: [
                        "シュシュプ",
                        "Spritzee",
                        "Fluvetin",
                        "Spritzee",
                        "Parfi",
                        "Spritzee",
                        "슈쁘",
                        "粉香香",
                        "粉香香",
                    ],
                },
            },
            Self::Aromatisse(_) => &SpeciesData {
                national_dex_id: 683,
                names: NamesData {
                    names: [
                        "フレフワン",
                        "Aromatisse",
                        "Cocotine",
                        "Aromatisse",
                        "Parfinesse",
                        "Aromatisse",
                        "프레프티르",
                        "芳香精",
                        "芳香精",
                    ],
                },
            },
            Self::Swirlix(_) => &SpeciesData {
                national_dex_id: 684,
                names: NamesData {
                    names: [
                        "ペロッパフ",
                        "Swirlix",
                        "Sucroquin",
                        "Swirlix",
                        "Flauschling",
                        "Swirlix",
                        "나룸퍼프",
                        "绵绵泡芙",
                        "綿綿泡芙",
                    ],
                },
            },
            Self::Slurpuff(_) => &SpeciesData {
                national_dex_id: 685,
                names: NamesData {
                    names: [
                        "ペロリーム",
                        "Slurpuff",
                        "Cupcanaille",
                        "Slurpuff",
                        "Sabbaione",
                        "Slurpuff",
                        "나루림",
                        "胖甜妮",
                        "胖甜妮",
                    ],
                },
            },
            Self::Inkay(_) => &SpeciesData {
                national_dex_id: 686,
                names: NamesData {
                    names: [
                        "マーイーカ",
                        "Inkay",
                        "Sepiatop",
                        "Inkay",
                        "Iscalar",
                        "Inkay",
                        "오케이징",
                        "好啦鱿",
                        "好啦魷",
                    ],
                },
            },
            Self::Malamar(_) => &SpeciesData {
                national_dex_id: 687,
                names: NamesData {
                    names: [
                        "カラマネロ",
                        "Malamar",
                        "Sepiatroce",
                        "Malamar",
                        "Calamanero",
                        "Malamar",
                        "칼라마네로",
                        "乌贼王",
                        "烏賊王",
                    ],
                },
            },
            Self::Binacle(_) => &SpeciesData {
                national_dex_id: 688,
                names: NamesData {
                    names: [
                        "カメテテ",
                        "Binacle",
                        "Opermine",
                        "Binacle",
                        "Bithora",
                        "Binacle",
                        "거북손손",
                        "龟脚脚",
                        "龜腳腳",
                    ],
                },
            },
            Self::Barbaracle(_) => &SpeciesData {
                national_dex_id: 689,
                names: NamesData {
                    names: [
                        "ガメノデス",
                        "Barbaracle",
                        "Golgopathe",
                        "Barbaracle",
                        "Thanathora",
                        "Barbaracle",
                        "거북손데스",
                        "龟足巨铠",
                        "龜足巨鎧",
                    ],
                },
            },
            Self::Skrelp(_) => &SpeciesData {
                national_dex_id: 690,
                names: NamesData {
                    names: [
                        "クズモー",
                        "Skrelp",
                        "Venalgue",
                        "Skrelp",
                        "Algitt",
                        "Skrelp",
                        "수레기",
                        "垃垃藻",
                        "垃垃藻",
                    ],
                },
            },
            Self::Dragalge(_) => &SpeciesData {
                national_dex_id: 691,
                names: NamesData {
                    names: [
                        "ドラミドロ",
                        "Dragalge",
                        "Kravarech",
                        "Dragalge",
                        "Tandrak",
                        "Dragalge",
                        "드래캄",
                        "毒藻龙",
                        "毒藻龍",
                    ],
                },
            },
            Self::Clauncher(_) => &SpeciesData {
                national_dex_id: 692,
                names: NamesData {
                    names: [
                        "ウデッポウ",
                        "Clauncher",
                        "Flingouste",
                        "Clauncher",
                        "Scampisto",
                        "Clauncher",
                        "완철포",
                        "铁臂枪虾",
                        "鐵臂槍蝦",
                    ],
                },
            },
            Self::Clawitzer(_) => &SpeciesData {
                national_dex_id: 693,
                names: NamesData {
                    names: [
                        "ブロスター",
                        "Clawitzer",
                        "Gamblast",
                        "Clawitzer",
                        "Wummer",
                        "Clawitzer",
                        "블로스터",
                        "钢炮臂虾",
                        "鋼炮臂蝦",
                    ],
                },
            },
            Self::Helioptile(_) => &SpeciesData {
                national_dex_id: 694,
                names: NamesData {
                    names: [
                        "エリキテル",
                        "Helioptile",
                        "Galvaran",
                        "Helioptile",
                        "Eguana",
                        "Helioptile",
                        "목도리키텔",
                        "伞电蜥",
                        "傘電蜥",
                    ],
                },
            },
            Self::Heliolisk(_) => &SpeciesData {
                national_dex_id: 695,
                names: NamesData {
                    names: [
                        "エレザード",
                        "Heliolisk",
                        "Iguolta",
                        "Heliolisk",
                        "Elezard",
                        "Heliolisk",
                        "일레도리자드",
                        "光电伞蜥",
                        "光電傘蜥",
                    ],
                },
            },
            Self::Tyrunt(_) => &SpeciesData {
                national_dex_id: 696,
                names: NamesData {
                    names: [
                        "チゴラス",
                        "Tyrunt",
                        "Ptyranidur",
                        "Tyrunt",
                        "Balgoras",
                        "Tyrunt",
                        "티고라스",
                        "宝宝暴龙",
                        "寶寶暴龍",
                    ],
                },
            },
            Self::Tyrantrum(_) => &SpeciesData {
                national_dex_id: 697,
                names: NamesData {
                    names: [
                        "ガチゴラス",
                        "Tyrantrum",
                        "Rexillius",
                        "Tyrantrum",
                        "Monargoras",
                        "Tyrantrum",
                        "견고라스",
                        "怪颚龙",
                        "怪顎龍",
                    ],
                },
            },
            Self::Amaura(_) => &SpeciesData {
                national_dex_id: 698,
                names: NamesData {
                    names: [
                        "アマルス",
                        "Amaura",
                        "Amagara",
                        "Amaura",
                        "Amarino",
                        "Amaura",
                        "아마루스",
                        "冰雪龙",
                        "冰雪龍",
                    ],
                },
            },
            Self::Aurorus(_) => &SpeciesData {
                national_dex_id: 699,
                names: NamesData {
                    names: [
                        "アマルルガ",
                        "Aurorus",
                        "Dragmara",
                        "Aurorus",
                        "Amagarga",
                        "Aurorus",
                        "아마루르가",
                        "冰雪巨龙",
                        "冰雪巨龍",
                    ],
                },
            },
            Self::Sylveon(_) => &SpeciesData {
                national_dex_id: 700,
                names: NamesData {
                    names: [
                        "ニンフィア",
                        "Sylveon",
                        "Nymphali",
                        "Sylveon",
                        "Feelinara",
                        "Sylveon",
                        "님피아",
                        "仙子伊布",
                        "仙子伊布",
                    ],
                },
            },
            Self::Hawlucha(_) => &SpeciesData {
                national_dex_id: 701,
                names: NamesData {
                    names: [
                        "ルチャブル",
                        "Hawlucha",
                        "Brutalibré",
                        "Hawlucha",
                        "Resladero",
                        "Hawlucha",
                        "루차불",
                        "摔角鹰人",
                        "摔角鷹人",
                    ],
                },
            },
            Self::Dedenne(_) => &SpeciesData {
                national_dex_id: 702,
                names: NamesData {
                    names: [
                        "デデンネ",
                        "Dedenne",
                        "Dedenne",
                        "Dedenne",
                        "Dedenne",
                        "Dedenne",
                        "데덴네",
                        "咚咚鼠",
                        "咚咚鼠",
                    ],
                },
            },
            Self::Carbink(_) => &SpeciesData {
                national_dex_id: 703,
                names: NamesData {
                    names: [
                        "メレシー",
                        "Carbink",
                        "Strassie",
                        "Carbink",
                        "Rocara",
                        "Carbink",
                        "멜리시",
                        "小碎钻",
                        "小碎鑽",
                    ],
                },
            },
            Self::Goomy(_) => &SpeciesData {
                national_dex_id: 704,
                names: NamesData {
                    names: [
                        "ヌメラ",
                        "Goomy",
                        "Mucuscule",
                        "Goomy",
                        "Viscora",
                        "Goomy",
                        "미끄메라",
                        "黏黏宝",
                        "黏黏寶",
                    ],
                },
            },
            Self::Sliggoo(_) => &SpeciesData {
                national_dex_id: 705,
                names: NamesData {
                    names: [
                        "ヌメイル",
                        "Sliggoo",
                        "Colimucus",
                        "Sliggoo",
                        "Viscargot",
                        "Sliggoo",
                        "미끄네일",
                        "黏美儿",
                        "黏美兒",
                    ],
                },
            },
            Self::Goodra(_) => &SpeciesData {
                national_dex_id: 706,
                names: NamesData {
                    names: [
                        "ヌメルゴン",
                        "Goodra",
                        "Muplodocus",
                        "Goodra",
                        "Viscogon",
                        "Goodra",
                        "미끄래곤",
                        "黏美龙",
                        "黏美龍",
                    ],
                },
            },
            Self::Klefki(_) => &SpeciesData {
                national_dex_id: 707,
                names: NamesData {
                    names: [
                        "クレッフィ",
                        "Klefki",
                        "Trousselin",
                        "Klefki",
                        "Clavion",
                        "Klefki",
                        "클레피",
                        "钥圈儿",
                        "鑰圈兒",
                    ],
                },
            },
            Self::Phantump(_) => &SpeciesData {
                national_dex_id: 708,
                names: NamesData {
                    names: [
                        "ボクレー",
                        "Phantump",
                        "Brocélôme",
                        "Phantump",
                        "Paragoni",
                        "Phantump",
                        "나목령",
                        "小木灵",
                        "小木靈",
                    ],
                },
            },
            Self::Trevenant(_) => &SpeciesData {
                national_dex_id: 709,
                names: NamesData {
                    names: [
                        "オーロット",
                        "Trevenant",
                        "Desséliande",
                        "Trevenant",
                        "Trombork",
                        "Trevenant",
                        "대로트",
                        "朽木妖",
                        "朽木妖",
                    ],
                },
            },
            Self::Pumpkaboo(_) => &SpeciesData {
                national_dex_id: 710,
                names: NamesData {
                    names: [
                        "バケッチャ",
                        "Pumpkaboo",
                        "Pitrouille",
                        "Pumpkaboo",
                        "Irrbis",
                        "Pumpkaboo",
                        "호바귀",
                        "南瓜精",
                        "南瓜精",
                    ],
                },
            },
            Self::Gourgeist(_) => &SpeciesData {
                national_dex_id: 711,
                names: NamesData {
                    names: [
                        "パンプジン",
                        "Gourgeist",
                        "Banshitrouye",
                        "Gourgeist",
                        "Pumpdjinn",
                        "Gourgeist",
                        "펌킨인",
                        "南瓜怪人",
                        "南瓜怪人",
                    ],
                },
            },
            Self::Bergmite(_) => &SpeciesData {
                national_dex_id: 712,
                names: NamesData {
                    names: [
                        "カチコール",
                        "Bergmite",
                        "Grelaçon",
                        "Bergmite",
                        "Arktip",
                        "Bergmite",
                        "꽁어름",
                        "冰宝",
                        "冰寶",
                    ],
                },
            },
            Self::Avalugg(_) => &SpeciesData {
                national_dex_id: 713,
                names: NamesData {
                    names: [
                        "クレベース",
                        "Avalugg",
                        "Séracrawl",
                        "Avalugg",
                        "Arktilas",
                        "Avalugg",
                        "크레베이스",
                        "冰岩怪",
                        "冰岩怪",
                    ],
                },
            },
            Self::Noibat(_) => &SpeciesData {
                national_dex_id: 714,
                names: NamesData {
                    names: [
                        "オンバット",
                        "Noibat",
                        "Sonistrelle",
                        "Noibat",
                        "eF-eM",
                        "Noibat",
                        "음뱃",
                        "嗡蝠",
                        "嗡蝠",
                    ],
                },
            },
            Self::Noivern(_) => &SpeciesData {
                national_dex_id: 715,
                names: NamesData {
                    names: [
                        "オンバーン",
                        "Noivern",
                        "Bruyverne",
                        "Noivern",
                        "UHaFnir",
                        "Noivern",
                        "음번",
                        "音波龙",
                        "音波龍",
                    ],
                },
            },
            Self::Xerneas(_) => &SpeciesData {
                national_dex_id: 716,
                names: NamesData {
                    names: [
                        "ゼルネアス",
                        "Xerneas",
                        "Xerneas",
                        "Xerneas",
                        "Xerneas",
                        "Xerneas",
                        "제르네아스",
                        "哲尔尼亚斯",
                        "哲爾尼亞斯",
                    ],
                },
            },
            Self::Yveltal(_) => &SpeciesData {
                national_dex_id: 717,
                names: NamesData {
                    names: [
                        "イベルタル",
                        "Yveltal",
                        "Yveltal",
                        "Yveltal",
                        "Yveltal",
                        "Yveltal",
                        "이벨타르",
                        "伊裴尔塔尔",
                        "伊裴爾塔爾",
                    ],
                },
            },
            Self::Zygarde(_) => &SpeciesData {
                national_dex_id: 718,
                names: NamesData {
                    names: [
                        "ジガルデ",
                        "Zygarde",
                        "Zygarde",
                        "Zygarde",
                        "Zygarde",
                        "Zygarde",
                        "지가르데",
                        "基格尔德",
                        "基格爾德",
                    ],
                },
            },
            Self::Diancie(_) => &SpeciesData {
                national_dex_id: 719,
                names: NamesData {
                    names: [
                        "ディアンシー",
                        "Diancie",
                        "Diancie",
                        "Diancie",
                        "Diancie",
                        "Diancie",
                        "디안시",
                        "蒂安希",
                        "蒂安希",
                    ],
                },
            },
            Self::Hoopa(_) => &SpeciesData {
                national_dex_id: 720,
                names: NamesData {
                    names: [
                        "フーパ",
                        "Hoopa",
                        "Hoopa",
                        "Hoopa",
                        "Hoopa",
                        "Hoopa",
                        "후파",
                        "胡帕",
                        "胡帕",
                    ],
                },
            },
            Self::Volcanion(_) => &SpeciesData {
                national_dex_id: 721,
                names: NamesData {
                    names: [
                        "ボルケニオン",
                        "Volcanion",
                        "Volcanion",
                        "Volcanion",
                        "Volcanion",
                        "Volcanion",
                        "볼케니온",
                        "波尔凯尼恩",
                        "波爾凱尼恩",
                    ],
                },
            },
            Self::Rowlet(_) => &SpeciesData {
                national_dex_id: 722,
                names: NamesData {
                    names: [
                        "モクロー",
                        "Rowlet",
                        "Brindibou",
                        "Rowlet",
                        "Bauz",
                        "Rowlet",
                        "나몰빼미",
                        "木木枭",
                        "木木梟",
                    ],
                },
            },
            Self::Dartrix(_) => &SpeciesData {
                national_dex_id: 723,
                names: NamesData {
                    names: [
                        "フクスロー",
                        "Dartrix",
                        "Efflèche",
                        "Dartrix",
                        "Arboretoss",
                        "Dartrix",
                        "빼미스로우",
                        "投羽枭",
                        "投羽梟",
                    ],
                },
            },
            Self::Decidueye(_) => &SpeciesData {
                national_dex_id: 724,
                names: NamesData {
                    names: [
                        "ジュナイパー",
                        "Decidueye",
                        "Archéduc",
                        "Decidueye",
                        "Silvarro",
                        "Decidueye",
                        "모크나이퍼",
                        "狙射树枭",
                        "狙射樹梟",
                    ],
                },
            },
            Self::Litten(_) => &SpeciesData {
                national_dex_id: 725,
                names: NamesData {
                    names: [
                        "ニャビー",
                        "Litten",
                        "Flamiaou",
                        "Litten",
                        "Flamiau",
                        "Litten",
                        "냐오불",
                        "火斑喵",
                        "火斑喵",
                    ],
                },
            },
            Self::Torracat(_) => &SpeciesData {
                national_dex_id: 726,
                names: NamesData {
                    names: [
                        "ニャヒート",
                        "Torracat",
                        "Matoufeu",
                        "Torracat",
                        "Miezunder",
                        "Torracat",
                        "냐오히트",
                        "炎热喵",
                        "炎熱喵",
                    ],
                },
            },
            Self::Incineroar(_) => &SpeciesData {
                national_dex_id: 727,
                names: NamesData {
                    names: [
                        "ガオガエン",
                        "Incineroar",
                        "Félinferno",
                        "Incineroar",
                        "Fuegro",
                        "Incineroar",
                        "어흥염",
                        "炽焰咆哮虎",
                        "熾焰咆哮虎",
                    ],
                },
            },
            Self::Popplio(_) => &SpeciesData {
                national_dex_id: 728,
                names: NamesData {
                    names: [
                        "アシマリ",
                        "Popplio",
                        "Otaquin",
                        "Popplio",
                        "Robball",
                        "Popplio",
                        "누리공",
                        "球球海狮",
                        "球球海獅",
                    ],
                },
            },
            Self::Brionne(_) => &SpeciesData {
                national_dex_id: 729,
                names: NamesData {
                    names: [
                        "オシャマリ",
                        "Brionne",
                        "Otarlette",
                        "Brionne",
                        "Marikeck",
                        "Brionne",
                        "키요공",
                        "花漾海狮",
                        "花漾海獅",
                    ],
                },
            },
            Self::Primarina(_) => &SpeciesData {
                national_dex_id: 730,
                names: NamesData {
                    names: [
                        "アシレーヌ",
                        "Primarina",
                        "Oratoria",
                        "Primarina",
                        "Primarene",
                        "Primarina",
                        "누리레느",
                        "西狮海壬",
                        "西獅海壬",
                    ],
                },
            },
            Self::Pikipek(_) => &SpeciesData {
                national_dex_id: 731,
                names: NamesData {
                    names: [
                        "ツツケラ",
                        "Pikipek",
                        "Picassaut",
                        "Pikipek",
                        "Peppeck",
                        "Pikipek",
                        "콕코구리",
                        "小笃儿",
                        "小篤兒",
                    ],
                },
            },
            Self::Trumbeak(_) => &SpeciesData {
                national_dex_id: 732,
                names: NamesData {
                    names: [
                        "ケララッパ",
                        "Trumbeak",
                        "Piclairon",
                        "Trumbeak",
                        "Trompeck",
                        "Trumbeak",
                        "크라파",
                        "喇叭啄鸟",
                        "喇叭啄鳥",
                    ],
                },
            },
            Self::Toucannon(_) => &SpeciesData {
                national_dex_id: 733,
                names: NamesData {
                    names: [
                        "ドデカバシ",
                        "Toucannon",
                        "Bazoucan",
                        "Toucannon",
                        "Tukanon",
                        "Toucannon",
                        "왕큰부리",
                        "铳嘴大鸟",
                        "銃嘴大鳥",
                    ],
                },
            },
            Self::Yungoos(_) => &SpeciesData {
                national_dex_id: 734,
                names: NamesData {
                    names: [
                        "ヤングース",
                        "Yungoos",
                        "Manglouton",
                        "Yungoos",
                        "Mangunior",
                        "Yungoos",
                        "영구스",
                        "猫鼬少",
                        "貓鼬少",
                    ],
                },
            },
            Self::Gumshoos(_) => &SpeciesData {
                national_dex_id: 735,
                names: NamesData {
                    names: [
                        "デカグース",
                        "Gumshoos",
                        "Argouste",
                        "Gumshoos",
                        "Manguspektor",
                        "Gumshoos",
                        "형사구스",
                        "猫鼬探长",
                        "貓鼬探長",
                    ],
                },
            },
            Self::Grubbin(_) => &SpeciesData {
                national_dex_id: 736,
                names: NamesData {
                    names: [
                        "アゴジムシ",
                        "Grubbin",
                        "Larvibule",
                        "Grubbin",
                        "Mabula",
                        "Grubbin",
                        "턱지충이",
                        "强颚鸡母虫",
                        "強顎雞母蟲",
                    ],
                },
            },
            Self::Charjabug(_) => &SpeciesData {
                national_dex_id: 737,
                names: NamesData {
                    names: [
                        "デンヂムシ",
                        "Charjabug",
                        "Chrysapile",
                        "Charjabug",
                        "Akkup",
                        "Charjabug",
                        "전지충이",
                        "虫电宝",
                        "蟲電寶",
                    ],
                },
            },
            Self::Vikavolt(_) => &SpeciesData {
                national_dex_id: 738,
                names: NamesData {
                    names: [
                        "クワガノン",
                        "Vikavolt",
                        "Lucanon",
                        "Vikavolt",
                        "Donarion",
                        "Vikavolt",
                        "투구뿌논",
                        "锹农炮虫",
                        "鍬農炮蟲",
                    ],
                },
            },
            Self::Crabrawler(_) => &SpeciesData {
                national_dex_id: 739,
                names: NamesData {
                    names: [
                        "マケンカニ",
                        "Crabrawler",
                        "Crabagarre",
                        "Crabrawler",
                        "Krabbox",
                        "Crabrawler",
                        "오기지게",
                        "好胜蟹",
                        "好勝蟹",
                    ],
                },
            },
            Self::Crabominable(_) => &SpeciesData {
                national_dex_id: 740,
                names: NamesData {
                    names: [
                        "ケケンカニ",
                        "Crabominable",
                        "Crabominable",
                        "Crabominable",
                        "Krawell",
                        "Crabominable",
                        "모단단게",
                        "好胜毛蟹",
                        "好勝毛蟹",
                    ],
                },
            },
            Self::Oricorio(_) => &SpeciesData {
                national_dex_id: 741,
                names: NamesData {
                    names: [
                        "オドリドリ",
                        "Oricorio",
                        "Plumeline",
                        "Oricorio",
                        "Choreogel",
                        "Oricorio",
                        "춤추새",
                        "花舞鸟",
                        "花舞鳥",
                    ],
                },
            },
            Self::Cutiefly(_) => &SpeciesData {
                national_dex_id: 742,
                names: NamesData {
                    names: [
                        "アブリー",
                        "Cutiefly",
                        "Bombydou",
                        "Cutiefly",
                        "Wommel",
                        "Cutiefly",
                        "에블리",
                        "萌虻",
                        "萌虻",
                    ],
                },
            },
            Self::Ribombee(_) => &SpeciesData {
                national_dex_id: 743,
                names: NamesData {
                    names: [
                        "アブリボン",
                        "Ribombee",
                        "Rubombelle",
                        "Ribombee",
                        "Bandelby",
                        "Ribombee",
                        "에리본",
                        "蝶结萌虻",
                        "蝶結萌虻",
                    ],
                },
            },
            Self::Rockruff(_) => &SpeciesData {
                national_dex_id: 744,
                names: NamesData {
                    names: [
                        "イワンコ",
                        "Rockruff",
                        "Rocabot",
                        "Rockruff",
                        "Wuffels",
                        "Rockruff",
                        "암멍이",
                        "岩狗狗",
                        "岩狗狗",
                    ],
                },
            },
            Self::Lycanroc(_) => &SpeciesData {
                national_dex_id: 745,
                names: NamesData {
                    names: [
                        "ルガルガン",
                        "Lycanroc",
                        "Lougaroc",
                        "Lycanroc",
                        "Wolwerock",
                        "Lycanroc",
                        "루가루암",
                        "鬃岩狼人",
                        "鬃岩狼人",
                    ],
                },
            },
            Self::Wishiwashi(_) => &SpeciesData {
                national_dex_id: 746,
                names: NamesData {
                    names: [
                        "ヨワシ",
                        "Wishiwashi",
                        "Froussardine",
                        "Wishiwashi",
                        "Lusardin",
                        "Wishiwashi",
                        "약어리",
                        "弱丁鱼",
                        "弱丁魚",
                    ],
                },
            },
            Self::Mareanie(_) => &SpeciesData {
                national_dex_id: 747,
                names: NamesData {
                    names: [
                        "ヒドイデ",
                        "Mareanie",
                        "Vorastérie",
                        "Mareanie",
                        "Garstella",
                        "Mareanie",
                        "시마사리",
                        "好坏星",
                        "好壞星",
                    ],
                },
            },
            Self::Toxapex(_) => &SpeciesData {
                national_dex_id: 748,
                names: NamesData {
                    names: [
                        "ドヒドイデ",
                        "Toxapex",
                        "Prédastérie",
                        "Toxapex",
                        "Aggrostella",
                        "Toxapex",
                        "더시마사리",
                        "超坏星",
                        "超壞星",
                    ],
                },
            },
            Self::Mudbray(_) => &SpeciesData {
                national_dex_id: 749,
                names: NamesData {
                    names: [
                        "ドロバンコ",
                        "Mudbray",
                        "Tiboudet",
                        "Mudbray",
                        "Pampuli",
                        "Mudbray",
                        "머드나기",
                        "泥驴仔",
                        "泥驢仔",
                    ],
                },
            },
            Self::Mudsdale(_) => &SpeciesData {
                national_dex_id: 750,
                names: NamesData {
                    names: [
                        "バンバドロ",
                        "Mudsdale",
                        "Bourrinos",
                        "Mudsdale",
                        "Pampross",
                        "Mudsdale",
                        "만마드",
                        "重泥挽马",
                        "重泥挽馬",
                    ],
                },
            },
            Self::Dewpider(_) => &SpeciesData {
                national_dex_id: 751,
                names: NamesData {
                    names: [
                        "シズクモ",
                        "Dewpider",
                        "Araqua",
                        "Dewpider",
                        "Araqua",
                        "Dewpider",
                        "물거미",
                        "滴蛛",
                        "滴蛛",
                    ],
                },
            },
            Self::Araquanid(_) => &SpeciesData {
                national_dex_id: 752,
                names: NamesData {
                    names: [
                        "オニシズクモ",
                        "Araquanid",
                        "Tarenbulle",
                        "Araquanid",
                        "Aranestro",
                        "Araquanid",
                        "깨비물거미",
                        "滴蛛霸",
                        "滴蛛霸",
                    ],
                },
            },
            Self::Fomantis(_) => &SpeciesData {
                national_dex_id: 753,
                names: NamesData {
                    names: [
                        "カリキリ",
                        "Fomantis",
                        "Mimantis",
                        "Fomantis",
                        "Imantis",
                        "Fomantis",
                        "짜랑랑",
                        "伪螳草",
                        "偽螳草",
                    ],
                },
            },
            Self::Lurantis(_) => &SpeciesData {
                national_dex_id: 754,
                names: NamesData {
                    names: [
                        "ラランテス",
                        "Lurantis",
                        "Floramantis",
                        "Lurantis",
                        "Mantidea",
                        "Lurantis",
                        "라란티스",
                        "兰螳花",
                        "蘭螳花",
                    ],
                },
            },
            Self::Morelull(_) => &SpeciesData {
                national_dex_id: 755,
                names: NamesData {
                    names: [
                        "ネマシュ",
                        "Morelull",
                        "Spododo",
                        "Morelull",
                        "Bubungus",
                        "Morelull",
                        "자마슈",
                        "睡睡菇",
                        "睡睡菇",
                    ],
                },
            },
            Self::Shiinotic(_) => &SpeciesData {
                national_dex_id: 756,
                names: NamesData {
                    names: [
                        "マシェード",
                        "Shiinotic",
                        "Lampignon",
                        "Shiinotic",
                        "Lamellux",
                        "Shiinotic",
                        "마셰이드",
                        "灯罩夜菇",
                        "燈罩夜菇",
                    ],
                },
            },
            Self::Salandit(_) => &SpeciesData {
                national_dex_id: 757,
                names: NamesData {
                    names: [
                        "ヤトウモリ",
                        "Salandit",
                        "Tritox",
                        "Salandit",
                        "Molunk",
                        "Salandit",
                        "야도뇽",
                        "夜盗火蜥",
                        "夜盜火蜥",
                    ],
                },
            },
            Self::Salazzle(_) => &SpeciesData {
                national_dex_id: 758,
                names: NamesData {
                    names: [
                        "エンニュート",
                        "Salazzle",
                        "Malamandre",
                        "Salazzle",
                        "Amfira",
                        "Salazzle",
                        "염뉴트",
                        "焰后蜥",
                        "焰后蜥",
                    ],
                },
            },
            Self::Stufful(_) => &SpeciesData {
                national_dex_id: 759,
                names: NamesData {
                    names: [
                        "ヌイコグマ",
                        "Stufful",
                        "Nounourson",
                        "Stufful",
                        "Velursi",
                        "Stufful",
                        "포곰곰",
                        "童偶熊",
                        "童偶熊",
                    ],
                },
            },
            Self::Bewear(_) => &SpeciesData {
                national_dex_id: 760,
                names: NamesData {
                    names: [
                        "キテルグマ",
                        "Bewear",
                        "Chelours",
                        "Bewear",
                        "Kosturso",
                        "Bewear",
                        "이븐곰",
                        "穿着熊",
                        "穿著熊",
                    ],
                },
            },
            Self::Bounsweet(_) => &SpeciesData {
                national_dex_id: 761,
                names: NamesData {
                    names: [
                        "アマカジ",
                        "Bounsweet",
                        "Croquine",
                        "Bounsweet",
                        "Frubberl",
                        "Bounsweet",
                        "달콤아",
                        "甜竹竹",
                        "甜竹竹",
                    ],
                },
            },
            Self::Steenee(_) => &SpeciesData {
                national_dex_id: 762,
                names: NamesData {
                    names: [
                        "アママイコ",
                        "Steenee",
                        "Candine",
                        "Steenee",
                        "Frubaila",
                        "Steenee",
                        "달무리나",
                        "甜舞妮",
                        "甜舞妮",
                    ],
                },
            },
            Self::Tsareena(_) => &SpeciesData {
                national_dex_id: 763,
                names: NamesData {
                    names: [
                        "アマージョ",
                        "Tsareena",
                        "Sucreine",
                        "Tsareena",
                        "Fruyal",
                        "Tsareena",
                        "달코퀸",
                        "甜冷美后",
                        "甜冷美后",
                    ],
                },
            },
            Self::Comfey(_) => &SpeciesData {
                national_dex_id: 764,
                names: NamesData {
                    names: [
                        "キュワワー",
                        "Comfey",
                        "Guérilande",
                        "Comfey",
                        "Curelei",
                        "Comfey",
                        "큐아링",
                        "花疗环环",
                        "花療環環",
                    ],
                },
            },
            Self::Oranguru(_) => &SpeciesData {
                national_dex_id: 765,
                names: NamesData {
                    names: [
                        "ヤレユータン",
                        "Oranguru",
                        "Gouroutan",
                        "Oranguru",
                        "Kommandutan",
                        "Oranguru",
                        "하랑우탄",
                        "智挥猩",
                        "智揮猩",
                    ],
                },
            },
            Self::Passimian(_) => &SpeciesData {
                national_dex_id: 766,
                names: NamesData {
                    names: [
                        "ナゲツケサル",
                        "Passimian",
                        "Quartermac",
                        "Passimian",
                        "Quartermak",
                        "Passimian",
                        "내던숭이",
                        "投掷猴",
                        "投擲猴",
                    ],
                },
            },
            Self::Wimpod(_) => &SpeciesData {
                national_dex_id: 767,
                names: NamesData {
                    names: [
                        "コソクムシ",
                        "Wimpod",
                        "Sovkipou",
                        "Wimpod",
                        "Reißlaus",
                        "Wimpod",
                        "꼬시레",
                        "胆小虫",
                        "膽小蟲",
                    ],
                },
            },
            Self::Golisopod(_) => &SpeciesData {
                national_dex_id: 768,
                names: NamesData {
                    names: [
                        "グソクムシャ",
                        "Golisopod",
                        "Sarmuraï",
                        "Golisopod",
                        "Tectass",
                        "Golisopod",
                        "갑주무사",
                        "具甲武者",
                        "具甲武者",
                    ],
                },
            },
            Self::Sandygast(_) => &SpeciesData {
                national_dex_id: 769,
                names: NamesData {
                    names: [
                        "スナバァ",
                        "Sandygast",
                        "Bacabouh",
                        "Sandygast",
                        "Sankabuh",
                        "Sandygast",
                        "모래꿍",
                        "沙丘娃",
                        "沙丘娃",
                    ],
                },
            },
            Self::Palossand(_) => &SpeciesData {
                national_dex_id: 770,
                names: NamesData {
                    names: [
                        "シロデスナ",
                        "Palossand",
                        "Trépassable",
                        "Palossand",
                        "Colossand",
                        "Palossand",
                        "모래성이당",
                        "噬沙堡爷",
                        "噬沙堡爺",
                    ],
                },
            },
            Self::Pyukumuku(_) => &SpeciesData {
                national_dex_id: 771,
                names: NamesData {
                    names: [
                        "ナマコブシ",
                        "Pyukumuku",
                        "Concombaffe",
                        "Pyukumuku",
                        "Gufa",
                        "Pyukumuku",
                        "해무기",
                        "拳海参",
                        "拳海參",
                    ],
                },
            },
            Self::TypeNull(_) => &SpeciesData {
                national_dex_id: 772,
                names: NamesData {
                    names: [
                        "タイプ：ヌル",
                        "Type: Null",
                        "Type:0",
                        "Tipo Zero",
                        "Typ:Null",
                        "Código Cero",
                        "타입:널",
                        "属性：空",
                        "屬性：空",
                    ],
                },
            },
            Self::Silvally(_) => &SpeciesData {
                national_dex_id: 773,
                names: NamesData {
                    names: [
                        "シルヴァディ",
                        "Silvally",
                        "Silvallié",
                        "Silvally",
                        "Amigento",
                        "Silvally",
                        "실버디",
                        "银伴战兽",
                        "銀伴戰獸",
                    ],
                },
            },
            Self::Minior(_) => &SpeciesData {
                national_dex_id: 774,
                names: NamesData {
                    names: [
                        "メテノ",
                        "Minior",
                        "Météno",
                        "Minior",
                        "Meteno",
                        "Minior",
                        "메테노",
                        "小陨星",
                        "小隕星",
                    ],
                },
            },
            Self::Komala(_) => &SpeciesData {
                national_dex_id: 775,
                names: NamesData {
                    names: [
                        "ネッコアラ",
                        "Komala",
                        "Dodoala",
                        "Komala",
                        "Koalelu",
                        "Komala",
                        "자말라",
                        "树枕尾熊",
                        "樹枕尾熊",
                    ],
                },
            },
            Self::Turtonator(_) => &SpeciesData {
                national_dex_id: 776,
                names: NamesData {
                    names: [
                        "バクガメス",
                        "Turtonator",
                        "Boumata",
                        "Turtonator",
                        "Tortunator",
                        "Turtonator",
                        "폭거북스",
                        "爆焰龟兽",
                        "爆焰龜獸",
                    ],
                },
            },
            Self::Togedemaru(_) => &SpeciesData {
                national_dex_id: 777,
                names: NamesData {
                    names: [
                        "トゲデマル",
                        "Togedemaru",
                        "Togedemaru",
                        "Togedemaru",
                        "Togedemaru",
                        "Togedemaru",
                        "토게데마루",
                        "托戈德玛尔",
                        "托戈德瑪爾",
                    ],
                },
            },
            Self::Mimikyu(_) => &SpeciesData {
                national_dex_id: 778,
                names: NamesData {
                    names: [
                        "ミミッキュ",
                        "Mimikyu",
                        "Mimiqui",
                        "Mimikyu",
                        "Mimigma",
                        "Mimikyu",
                        "따라큐",
                        "谜拟丘",
                        "謎擬Ｑ",
                    ],
                },
            },
            Self::Bruxish(_) => &SpeciesData {
                national_dex_id: 779,
                names: NamesData {
                    names: [
                        "ハギギシリ",
                        "Bruxish",
                        "Denticrisse",
                        "Bruxish",
                        "Knirfish",
                        "Bruxish",
                        "치갈기",
                        "磨牙彩皮鱼",
                        "磨牙彩皮魚",
                    ],
                },
            },
            Self::Drampa(_) => &SpeciesData {
                national_dex_id: 780,
                names: NamesData {
                    names: [
                        "ジジーロン",
                        "Drampa",
                        "Draïeul",
                        "Drampa",
                        "Sen-Long",
                        "Drampa",
                        "할비롱",
                        "老翁龙",
                        "老翁龍",
                    ],
                },
            },
            Self::Dhelmise(_) => &SpeciesData {
                national_dex_id: 781,
                names: NamesData {
                    names: [
                        "ダダリン",
                        "Dhelmise",
                        "Sinistrail",
                        "Dhelmise",
                        "Moruda",
                        "Dhelmise",
                        "타타륜",
                        "破破舵轮",
                        "破破舵輪",
                    ],
                },
            },
            Self::Jangmoo(_) => &SpeciesData {
                national_dex_id: 782,
                names: NamesData {
                    names: [
                        "ジャラコ",
                        "Jangmo-o",
                        "Bébécaille",
                        "Jangmo-o",
                        "Miniras",
                        "Jangmo-o",
                        "짜랑꼬",
                        "心鳞宝",
                        "心鱗寶",
                    ],
                },
            },
            Self::Hakamoo(_) => &SpeciesData {
                national_dex_id: 783,
                names: NamesData {
                    names: [
                        "ジャランゴ",
                        "Hakamo-o",
                        "Écaïd",
                        "Hakamo-o",
                        "Mediras",
                        "Hakamo-o",
                        "짜랑고우",
                        "鳞甲龙",
                        "鱗甲龍",
                    ],
                },
            },
            Self::Kommoo(_) => &SpeciesData {
                national_dex_id: 784,
                names: NamesData {
                    names: [
                        "ジャラランガ",
                        "Kommo-o",
                        "Ékaïser",
                        "Kommo-o",
                        "Grandiras",
                        "Kommo-o",
                        "짜랑고우거",
                        "杖尾鳞甲龙",
                        "杖尾鱗甲龍",
                    ],
                },
            },
            Self::TapuKoko(_) => &SpeciesData {
                national_dex_id: 785,
                names: NamesData {
                    names: [
                        "カプ・コケコ",
                        "Tapu Koko",
                        "Tokorico",
                        "Tapu Koko",
                        "Kapu-Riki",
                        "Tapu Koko",
                        "카푸꼬꼬꼭",
                        "卡璞・鸣鸣",
                        "卡璞・鳴鳴",
                    ],
                },
            },
            Self::TapuLele(_) => &SpeciesData {
                national_dex_id: 786,
                names: NamesData {
                    names: [
                        "カプ・テテフ",
                        "Tapu Lele",
                        "Tokopiyon",
                        "Tapu Lele",
                        "Kapu-Fala",
                        "Tapu Lele",
                        "카푸나비나",
                        "卡璞・蝶蝶",
                        "卡璞・蝶蝶",
                    ],
                },
            },
            Self::TapuBulu(_) => &SpeciesData {
                national_dex_id: 787,
                names: NamesData {
                    names: [
                        "カプ・ブルル",
                        "Tapu Bulu",
                        "Tokotoro",
                        "Tapu Bulu",
                        "Kapu-Toro",
                        "Tapu Bulu",
                        "카푸브루루",
                        "卡璞・哞哞",
                        "卡璞・哞哞",
                    ],
                },
            },
            Self::TapuFini(_) => &SpeciesData {
                national_dex_id: 788,
                names: NamesData {
                    names: [
                        "カプ・レヒレ",
                        "Tapu Fini",
                        "Tokopisco",
                        "Tapu Fini",
                        "Kapu-Kime",
                        "Tapu Fini",
                        "카푸느지느",
                        "卡璞・鳍鳍",
                        "卡璞・鰭鰭",
                    ],
                },
            },
            Self::Cosmog(_) => &SpeciesData {
                national_dex_id: 789,
                names: NamesData {
                    names: [
                        "コスモッグ",
                        "Cosmog",
                        "Cosmog",
                        "Cosmog",
                        "Cosmog",
                        "Cosmog",
                        "코스모그",
                        "科斯莫古",
                        "科斯莫古",
                    ],
                },
            },
            Self::Cosmoem(_) => &SpeciesData {
                national_dex_id: 790,
                names: NamesData {
                    names: [
                        "コスモウム",
                        "Cosmoem",
                        "Cosmovum",
                        "Cosmoem",
                        "Cosmovum",
                        "Cosmoem",
                        "코스모움",
                        "科斯莫姆",
                        "科斯莫姆",
                    ],
                },
            },
            Self::Solgaleo(_) => &SpeciesData {
                national_dex_id: 791,
                names: NamesData {
                    names: [
                        "ソルガレオ",
                        "Solgaleo",
                        "Solgaleo",
                        "Solgaleo",
                        "Solgaleo",
                        "Solgaleo",
                        "솔가레오",
                        "索尔迦雷欧",
                        "索爾迦雷歐",
                    ],
                },
            },
            Self::Lunala(_) => &SpeciesData {
                national_dex_id: 792,
                names: NamesData {
                    names: [
                        "ルナアーラ",
                        "Lunala",
                        "Lunala",
                        "Lunala",
                        "Lunala",
                        "Lunala",
                        "루나아라",
                        "露奈雅拉",
                        "露奈雅拉",
                    ],
                },
            },
            Self::Nihilego(_) => &SpeciesData {
                national_dex_id: 793,
                names: NamesData {
                    names: [
                        "ウツロイド",
                        "Nihilego",
                        "Zéroïd",
                        "Nihilego",
                        "Anego",
                        "Nihilego",
                        "텅비드",
                        "虚吾伊德",
                        "虛吾伊德",
                    ],
                },
            },
            Self::Buzzwole(_) => &SpeciesData {
                national_dex_id: 794,
                names: NamesData {
                    names: [
                        "マッシブーン",
                        "Buzzwole",
                        "Mouscoto",
                        "Buzzwole",
                        "Masskito",
                        "Buzzwole",
                        "매시붕",
                        "爆肌蚊",
                        "爆肌蚊",
                    ],
                },
            },
            Self::Pheromosa(_) => &SpeciesData {
                national_dex_id: 795,
                names: NamesData {
                    names: [
                        "フェローチェ",
                        "Pheromosa",
                        "Cancrelove",
                        "Pheromosa",
                        "Schabelle",
                        "Pheromosa",
                        "페로코체",
                        "费洛美螂",
                        "費洛美螂",
                    ],
                },
            },
            Self::Xurkitree(_) => &SpeciesData {
                national_dex_id: 796,
                names: NamesData {
                    names: [
                        "デンジュモク",
                        "Xurkitree",
                        "Câblifère",
                        "Xurkitree",
                        "Voltriant",
                        "Xurkitree",
                        "전수목",
                        "电束木",
                        "電束木",
                    ],
                },
            },
            Self::Celesteela(_) => &SpeciesData {
                national_dex_id: 797,
                names: NamesData {
                    names: [
                        "テッカグヤ",
                        "Celesteela",
                        "Bamboiselle",
                        "Celesteela",
                        "Kaguron",
                        "Celesteela",
                        "철화구야",
                        "铁火辉夜",
                        "鐵火輝夜",
                    ],
                },
            },
            Self::Kartana(_) => &SpeciesData {
                national_dex_id: 798,
                names: NamesData {
                    names: [
                        "カミツルギ",
                        "Kartana",
                        "Katagami",
                        "Kartana",
                        "Katagami",
                        "Kartana",
                        "종이신도",
                        "纸御剑",
                        "紙御劍",
                    ],
                },
            },
            Self::Guzzlord(_) => &SpeciesData {
                national_dex_id: 799,
                names: NamesData {
                    names: [
                        "アクジキング",
                        "Guzzlord",
                        "Engloutyran",
                        "Guzzlord",
                        "Schlingking",
                        "Guzzlord",
                        "악식킹",
                        "恶食大王",
                        "惡食大王",
                    ],
                },
            },
            Self::Necrozma(_) => &SpeciesData {
                national_dex_id: 800,
                names: NamesData {
                    names: [
                        "ネクロズマ",
                        "Necrozma",
                        "Necrozma",
                        "Necrozma",
                        "Necrozma",
                        "Necrozma",
                        "네크로즈마",
                        "奈克洛兹玛",
                        "奈克洛茲瑪",
                    ],
                },
            },
            Self::Magearna(_) => &SpeciesData {
                national_dex_id: 801,
                names: NamesData {
                    names: [
                        "マギアナ",
                        "Magearna",
                        "Magearna",
                        "Magearna",
                        "Magearna",
                        "Magearna",
                        "마기아나",
                        "玛机雅娜",
                        "瑪機雅娜",
                    ],
                },
            },
            Self::Marshadow(_) => &SpeciesData {
                national_dex_id: 802,
                names: NamesData {
                    names: [
                        "マーシャドー",
                        "Marshadow",
                        "Marshadow",
                        "Marshadow",
                        "Marshadow",
                        "Marshadow",
                        "마샤도",
                        "玛夏多",
                        "瑪夏多",
                    ],
                },
            },
            Self::Poipole(_) => &SpeciesData {
                national_dex_id: 803,
                names: NamesData {
                    names: [
                        "ベベノム",
                        "Poipole",
                        "Vémini",
                        "Poipole",
                        "Venicro",
                        "Poipole",
                        "베베놈",
                        "毒贝比",
                        "毒貝比",
                    ],
                },
            },
            Self::Naganadel(_) => &SpeciesData {
                national_dex_id: 804,
                names: NamesData {
                    names: [
                        "アーゴヨン",
                        "Naganadel",
                        "Mandrillon",
                        "Naganadel",
                        "Agoyon",
                        "Naganadel",
                        "아고용",
                        "四颚针龙",
                        "四顎針龍",
                    ],
                },
            },
            Self::Stakataka(_) => &SpeciesData {
                national_dex_id: 805,
                names: NamesData {
                    names: [
                        "ツンデツンデ",
                        "Stakataka",
                        "Ama-Ama",
                        "Stakataka",
                        "Muramura",
                        "Stakataka",
                        "차곡차곡",
                        "垒磊石",
                        "壘磊石",
                    ],
                },
            },
            Self::Blacephalon(_) => &SpeciesData {
                national_dex_id: 806,
                names: NamesData {
                    names: [
                        "ズガドーン",
                        "Blacephalon",
                        "Pierroteknik",
                        "Blacephalon",
                        "Kopplosio",
                        "Blacephalon",
                        "두파팡",
                        "砰头小丑",
                        "砰頭小丑",
                    ],
                },
            },
            Self::Zeraora(_) => &SpeciesData {
                national_dex_id: 807,
                names: NamesData {
                    names: [
                        "ゼラオラ",
                        "Zeraora",
                        "Zeraora",
                        "Zeraora",
                        "Zeraora",
                        "Zeraora",
                        "제라오라",
                        "捷拉奥拉",
                        "捷拉奧拉",
                    ],
                },
            },
            Self::Meltan(_) => &SpeciesData {
                national_dex_id: 808,
                names: NamesData {
                    names: [
                        "メルタン",
                        "Meltan",
                        "Meltan",
                        "Meltan",
                        "Meltan",
                        "Meltan",
                        "멜탄",
                        "美录坦",
                        "美錄坦",
                    ],
                },
            },
            Self::Melmetal(_) => &SpeciesData {
                national_dex_id: 809,
                names: NamesData {
                    names: [
                        "メルメタル",
                        "Melmetal",
                        "Melmetal",
                        "Melmetal",
                        "Melmetal",
                        "Melmetal",
                        "멜메탈",
                        "美录梅塔",
                        "美錄梅塔",
                    ],
                },
            },
            Self::Grookey(_) => &SpeciesData {
                national_dex_id: 810,
                names: NamesData {
                    names: [
                        "サルノリ",
                        "Grookey",
                        "Ouistempo",
                        "Grookey",
                        "Chimpep",
                        "Grookey",
                        "흥나숭",
                        "敲音猴",
                        "敲音猴",
                    ],
                },
            },
            Self::Thwackey(_) => &SpeciesData {
                national_dex_id: 811,
                names: NamesData {
                    names: [
                        "バチンキー",
                        "Thwackey",
                        "Badabouin",
                        "Thwackey",
                        "Chimstix",
                        "Thwackey",
                        "채키몽",
                        "啪咚猴",
                        "啪咚猴",
                    ],
                },
            },
            Self::Rillaboom(_) => &SpeciesData {
                national_dex_id: 812,
                names: NamesData {
                    names: [
                        "ゴリランダー",
                        "Rillaboom",
                        "Gorythmic",
                        "Rillaboom",
                        "Gortrom",
                        "Rillaboom",
                        "고릴타",
                        "轰擂金刚猩",
                        "轟擂金剛猩",
                    ],
                },
            },
            Self::Scorbunny(_) => &SpeciesData {
                national_dex_id: 813,
                names: NamesData {
                    names: [
                        "ヒバニー",
                        "Scorbunny",
                        "Flambino",
                        "Scorbunny",
                        "Hopplo",
                        "Scorbunny",
                        "염버니",
                        "炎兔儿",
                        "炎兔兒",
                    ],
                },
            },
            Self::Raboot(_) => &SpeciesData {
                national_dex_id: 814,
                names: NamesData {
                    names: [
                        "ラビフット",
                        "Raboot",
                        "Lapyro",
                        "Raboot",
                        "Kickerlo",
                        "Raboot",
                        "래비풋",
                        "腾蹴小将",
                        "騰蹴小將",
                    ],
                },
            },
            Self::Cinderace(_) => &SpeciesData {
                national_dex_id: 815,
                names: NamesData {
                    names: [
                        "エースバーン",
                        "Cinderace",
                        "Pyrobut",
                        "Cinderace",
                        "Liberlo",
                        "Cinderace",
                        "에이스번",
                        "闪焰王牌",
                        "閃焰王牌",
                    ],
                },
            },
            Self::Sobble(_) => &SpeciesData {
                national_dex_id: 816,
                names: NamesData {
                    names: [
                        "メッソン",
                        "Sobble",
                        "Larméléon",
                        "Sobble",
                        "Memmeon",
                        "Sobble",
                        "울머기",
                        "泪眼蜥",
                        "淚眼蜥",
                    ],
                },
            },
            Self::Drizzile(_) => &SpeciesData {
                national_dex_id: 817,
                names: NamesData {
                    names: [
                        "ジメレオン",
                        "Drizzile",
                        "Arrozard",
                        "Drizzile",
                        "Phlegleon",
                        "Drizzile",
                        "누겔레온",
                        "变涩蜥",
                        "變澀蜥",
                    ],
                },
            },
            Self::Inteleon(_) => &SpeciesData {
                national_dex_id: 818,
                names: NamesData {
                    names: [
                        "インテレオン",
                        "Inteleon",
                        "Lézargus",
                        "Inteleon",
                        "Intelleon",
                        "Inteleon",
                        "인텔리레온",
                        "千面避役",
                        "千面避役",
                    ],
                },
            },
            Self::Skwovet(_) => &SpeciesData {
                national_dex_id: 819,
                names: NamesData {
                    names: [
                        "ホシガリス",
                        "Skwovet",
                        "Rongourmand",
                        "Skwovet",
                        "Raffel",
                        "Skwovet",
                        "탐리스",
                        "贪心栗鼠",
                        "貪心栗鼠",
                    ],
                },
            },
            Self::Greedent(_) => &SpeciesData {
                national_dex_id: 820,
                names: NamesData {
                    names: [
                        "ヨクバリス",
                        "Greedent",
                        "Rongrigou",
                        "Greedent",
                        "Schlaraffel",
                        "Greedent",
                        "요씽리스",
                        "藏饱栗鼠",
                        "藏飽栗鼠",
                    ],
                },
            },
            Self::Rookidee(_) => &SpeciesData {
                national_dex_id: 821,
                names: NamesData {
                    names: [
                        "ココガラ",
                        "Rookidee",
                        "Minisange",
                        "Rookidee",
                        "Meikro",
                        "Rookidee",
                        "파라꼬",
                        "稚山雀",
                        "稚山雀",
                    ],
                },
            },
            Self::Corvisquire(_) => &SpeciesData {
                national_dex_id: 822,
                names: NamesData {
                    names: [
                        "アオガラス",
                        "Corvisquire",
                        "Bleuseille",
                        "Corvisquire",
                        "Kranoviz",
                        "Corvisquire",
                        "파크로우",
                        "蓝鸦",
                        "藍鴉",
                    ],
                },
            },
            Self::Corviknight(_) => &SpeciesData {
                national_dex_id: 823,
                names: NamesData {
                    names: [
                        "アーマーガア",
                        "Corviknight",
                        "Corvaillus",
                        "Corviknight",
                        "Krarmor",
                        "Corviknight",
                        "아머까오",
                        "钢铠鸦",
                        "鋼鎧鴉",
                    ],
                },
            },
            Self::Blipbug(_) => &SpeciesData {
                national_dex_id: 824,
                names: NamesData {
                    names: [
                        "サッチムシ",
                        "Blipbug",
                        "Larvadar",
                        "Blipbug",
                        "Sensect",
                        "Blipbug",
                        "두루지벌레",
                        "索侦虫",
                        "索偵蟲",
                    ],
                },
            },
            Self::Dottler(_) => &SpeciesData {
                national_dex_id: 825,
                names: NamesData {
                    names: [
                        "レドームシ",
                        "Dottler",
                        "Coléodôme",
                        "Dottler",
                        "Keradar",
                        "Dottler",
                        "레돔벌레",
                        "天罩虫",
                        "天罩蟲",
                    ],
                },
            },
            Self::Orbeetle(_) => &SpeciesData {
                national_dex_id: 826,
                names: NamesData {
                    names: [
                        "イオルブ",
                        "Orbeetle",
                        "Astronelle",
                        "Orbeetle",
                        "Maritellit",
                        "Orbeetle",
                        "이올브",
                        "以欧路普",
                        "以歐路普",
                    ],
                },
            },
            Self::Nickit(_) => &SpeciesData {
                national_dex_id: 827,
                names: NamesData {
                    names: [
                        "クスネ",
                        "Nickit",
                        "Goupilou",
                        "Nickit",
                        "Kleptifux",
                        "Nickit",
                        "훔처우",
                        "狡小狐",
                        "偷兒狐",
                    ],
                },
            },
            Self::Thievul(_) => &SpeciesData {
                national_dex_id: 828,
                names: NamesData {
                    names: [
                        "フォクスライ",
                        "Thievul",
                        "Roublenard",
                        "Thievul",
                        "Gaunux",
                        "Thievul",
                        "폭슬라이",
                        "猾大狐",
                        "狐大盜",
                    ],
                },
            },
            Self::Gossifleur(_) => &SpeciesData {
                national_dex_id: 829,
                names: NamesData {
                    names: [
                        "ヒメンカ",
                        "Gossifleur",
                        "Tournicoton",
                        "Gossifleur",
                        "Cottini",
                        "Gossifleur",
                        "꼬모카",
                        "幼棉棉",
                        "幼棉棉",
                    ],
                },
            },
            Self::Eldegoss(_) => &SpeciesData {
                national_dex_id: 830,
                names: NamesData {
                    names: [
                        "ワタシラガ",
                        "Eldegoss",
                        "Blancoton",
                        "Eldegoss",
                        "Cottomi",
                        "Eldegoss",
                        "백솜모카",
                        "白蓬蓬",
                        "白蓬蓬",
                    ],
                },
            },
            Self::Wooloo(_) => &SpeciesData {
                national_dex_id: 831,
                names: NamesData {
                    names: [
                        "ウールー",
                        "Wooloo",
                        "Moumouton",
                        "Wooloo",
                        "Wolly",
                        "Wooloo",
                        "우르",
                        "毛辫羊",
                        "毛辮羊",
                    ],
                },
            },
            Self::Dubwool(_) => &SpeciesData {
                national_dex_id: 832,
                names: NamesData {
                    names: [
                        "バイウールー",
                        "Dubwool",
                        "Moumouflon",
                        "Dubwool",
                        "Zwollock",
                        "Dubwool",
                        "배우르",
                        "毛毛角羊",
                        "毛毛角羊",
                    ],
                },
            },
            Self::Chewtle(_) => &SpeciesData {
                national_dex_id: 833,
                names: NamesData {
                    names: [
                        "カムカメ",
                        "Chewtle",
                        "Khélocrok",
                        "Chewtle",
                        "Kamehaps",
                        "Chewtle",
                        "깨물부기",
                        "咬咬龟",
                        "咬咬龜",
                    ],
                },
            },
            Self::Drednaw(_) => &SpeciesData {
                national_dex_id: 834,
                names: NamesData {
                    names: [
                        "カジリガメ",
                        "Drednaw",
                        "Torgamord",
                        "Drednaw",
                        "Kamalm",
                        "Drednaw",
                        "갈가부기",
                        "暴噬龟",
                        "暴噬龜",
                    ],
                },
            },
            Self::Yamper(_) => &SpeciesData {
                national_dex_id: 835,
                names: NamesData {
                    names: [
                        "ワンパチ",
                        "Yamper",
                        "Voltoutou",
                        "Yamper",
                        "Voldi",
                        "Yamper",
                        "멍파치",
                        "来电汪",
                        "來電汪",
                    ],
                },
            },
            Self::Boltund(_) => &SpeciesData {
                national_dex_id: 836,
                names: NamesData {
                    names: [
                        "パルスワン",
                        "Boltund",
                        "Fulgudog",
                        "Boltund",
                        "Bellektro",
                        "Boltund",
                        "펄스멍",
                        "逐电犬",
                        "逐電犬",
                    ],
                },
            },
            Self::Rolycoly(_) => &SpeciesData {
                national_dex_id: 837,
                names: NamesData {
                    names: [
                        "タンドン",
                        "Rolycoly",
                        "Charbi",
                        "Rolycoly",
                        "Klonkett",
                        "Rolycoly",
                        "탄동",
                        "小炭仔",
                        "小炭仔",
                    ],
                },
            },
            Self::Carkol(_) => &SpeciesData {
                national_dex_id: 838,
                names: NamesData {
                    names: [
                        "トロッゴン",
                        "Carkol",
                        "Wagomine",
                        "Carkol",
                        "Wagong",
                        "Carkol",
                        "탄차곤",
                        "大炭车",
                        "大炭車",
                    ],
                },
            },
            Self::Coalossal(_) => &SpeciesData {
                national_dex_id: 839,
                names: NamesData {
                    names: [
                        "セキタンザン",
                        "Coalossal",
                        "Monthracite",
                        "Coalossal",
                        "Montecarbo",
                        "Coalossal",
                        "석탄산",
                        "巨炭山",
                        "巨炭山",
                    ],
                },
            },
            Self::Applin(_) => &SpeciesData {
                national_dex_id: 840,
                names: NamesData {
                    names: [
                        "カジッチュ",
                        "Applin",
                        "Verpom",
                        "Applin",
                        "Knapfel",
                        "Applin",
                        "과사삭벌레",
                        "啃果虫",
                        "啃果蟲",
                    ],
                },
            },
            Self::Flapple(_) => &SpeciesData {
                national_dex_id: 841,
                names: NamesData {
                    names: [
                        "アップリュー",
                        "Flapple",
                        "Pomdrapi",
                        "Flapple",
                        "Drapfel",
                        "Flapple",
                        "애프룡",
                        "苹裹龙",
                        "蘋裹龍",
                    ],
                },
            },
            Self::Appletun(_) => &SpeciesData {
                national_dex_id: 842,
                names: NamesData {
                    names: [
                        "タルップル",
                        "Appletun",
                        "Dratatin",
                        "Appletun",
                        "Schlapfel",
                        "Appletun",
                        "단지래플",
                        "丰蜜龙",
                        "豐蜜龍",
                    ],
                },
            },
            Self::Silicobra(_) => &SpeciesData {
                national_dex_id: 843,
                names: NamesData {
                    names: [
                        "スナヘビ",
                        "Silicobra",
                        "Dunaja",
                        "Silicobra",
                        "Salanga",
                        "Silicobra",
                        "모래뱀",
                        "沙包蛇",
                        "沙包蛇",
                    ],
                },
            },
            Self::Sandaconda(_) => &SpeciesData {
                national_dex_id: 844,
                names: NamesData {
                    names: [
                        "サダイジャ",
                        "Sandaconda",
                        "Dunaconda",
                        "Sandaconda",
                        "Sanaconda",
                        "Sandaconda",
                        "사다이사",
                        "沙螺蟒",
                        "沙螺蟒",
                    ],
                },
            },
            Self::Cramorant(_) => &SpeciesData {
                national_dex_id: 845,
                names: NamesData {
                    names: [
                        "ウッウ",
                        "Cramorant",
                        "Nigosier",
                        "Cramorant",
                        "Urgl",
                        "Cramorant",
                        "윽우지",
                        "古月鸟",
                        "古月鳥",
                    ],
                },
            },
            Self::Arrokuda(_) => &SpeciesData {
                national_dex_id: 846,
                names: NamesData {
                    names: [
                        "サシカマス",
                        "Arrokuda",
                        "Embrochet",
                        "Arrokuda",
                        "Pikuda",
                        "Arrokuda",
                        "찌로꼬치",
                        "刺梭鱼",
                        "刺梭魚",
                    ],
                },
            },
            Self::Barraskewda(_) => &SpeciesData {
                national_dex_id: 847,
                names: NamesData {
                    names: [
                        "カマスジョー",
                        "Barraskewda",
                        "Hastacuda",
                        "Barraskewda",
                        "Barrakiefa",
                        "Barraskewda",
                        "꼬치조",
                        "戽斗尖梭",
                        "戽斗尖梭",
                    ],
                },
            },
            Self::Toxel(_) => &SpeciesData {
                national_dex_id: 848,
                names: NamesData {
                    names: [
                        "エレズン",
                        "Toxel",
                        "Toxizap",
                        "Toxel",
                        "Toxel",
                        "Toxel",
                        "일레즌",
                        "电音婴",
                        "毒電嬰",
                    ],
                },
            },
            Self::Toxtricity(_) => &SpeciesData {
                national_dex_id: 849,
                names: NamesData {
                    names: [
                        "ストリンダー",
                        "Toxtricity",
                        "Salarsen",
                        "Toxtricity",
                        "Riffex",
                        "Toxtricity",
                        "스트린더",
                        "颤弦蝾螈",
                        "顫弦蠑螈",
                    ],
                },
            },
            Self::Sizzlipede(_) => &SpeciesData {
                national_dex_id: 850,
                names: NamesData {
                    names: [
                        "ヤクデ",
                        "Sizzlipede",
                        "Grillepattes",
                        "Sizzlipede",
                        "Thermopod",
                        "Sizzlipede",
                        "태우지네",
                        "烧火蚣",
                        "燒火蚣",
                    ],
                },
            },
            Self::Centiskorch(_) => &SpeciesData {
                national_dex_id: 851,
                names: NamesData {
                    names: [
                        "マルヤクデ",
                        "Centiskorch",
                        "Scolocendre",
                        "Centiskorch",
                        "Infernopod",
                        "Centiskorch",
                        "다태우지네",
                        "焚焰蚣",
                        "焚焰蚣",
                    ],
                },
            },
            Self::Clobbopus(_) => &SpeciesData {
                national_dex_id: 852,
                names: NamesData {
                    names: [
                        "タタッコ",
                        "Clobbopus",
                        "Poulpaf",
                        "Clobbopus",
                        "Klopptopus",
                        "Clobbopus",
                        "때때무노",
                        "拳拳蛸",
                        "拳拳蛸",
                    ],
                },
            },
            Self::Grapploct(_) => &SpeciesData {
                national_dex_id: 853,
                names: NamesData {
                    names: [
                        "オトスパス",
                        "Grapploct",
                        "Krakos",
                        "Grapploct",
                        "Kaocto",
                        "Grapploct",
                        "케오퍼스",
                        "八爪武师",
                        "八爪武師",
                    ],
                },
            },
            Self::Sinistea(_) => &SpeciesData {
                national_dex_id: 854,
                names: NamesData {
                    names: [
                        "ヤバチャ",
                        "Sinistea",
                        "Théffroi",
                        "Sinistea",
                        "Fatalitee",
                        "Sinistea",
                        "데인차",
                        "来悲茶",
                        "來悲茶",
                    ],
                },
            },
            Self::Polteageist(_) => &SpeciesData {
                national_dex_id: 855,
                names: NamesData {
                    names: [
                        "ポットデス",
                        "Polteageist",
                        "Polthégeist",
                        "Polteageist",
                        "Mortipot",
                        "Polteageist",
                        "포트데스",
                        "怖思壶",
                        "怖思壺",
                    ],
                },
            },
            Self::Hatenna(_) => &SpeciesData {
                national_dex_id: 856,
                names: NamesData {
                    names: [
                        "ミブリム",
                        "Hatenna",
                        "Bibichut",
                        "Hatenna",
                        "Brimova",
                        "Hatenna",
                        "몸지브림",
                        "迷布莉姆",
                        "迷布莉姆",
                    ],
                },
            },
            Self::Hattrem(_) => &SpeciesData {
                national_dex_id: 857,
                names: NamesData {
                    names: [
                        "テブリム",
                        "Hattrem",
                        "Chapotus",
                        "Hattrem",
                        "Brimano",
                        "Hattrem",
                        "손지브림",
                        "提布莉姆",
                        "提布莉姆",
                    ],
                },
            },
            Self::Hatterene(_) => &SpeciesData {
                national_dex_id: 858,
                names: NamesData {
                    names: [
                        "ブリムオン",
                        "Hatterene",
                        "Sorcilence",
                        "Hatterene",
                        "Silembrim",
                        "Hatterene",
                        "브리무음",
                        "布莉姆温",
                        "布莉姆溫",
                    ],
                },
            },
            Self::Impidimp(_) => &SpeciesData {
                national_dex_id: 859,
                names: NamesData {
                    names: [
                        "ベロバー",
                        "Impidimp",
                        "Grimalin",
                        "Impidimp",
                        "Bähmon",
                        "Impidimp",
                        "메롱꿍",
                        "捣蛋小妖",
                        "搗蛋小妖",
                    ],
                },
            },
            Self::Morgrem(_) => &SpeciesData {
                national_dex_id: 860,
                names: NamesData {
                    names: [
                        "ギモー",
                        "Morgrem",
                        "Fourbelin",
                        "Morgrem",
                        "Pelzebub",
                        "Morgrem",
                        "쏘겨모",
                        "诈唬魔",
                        "詐唬魔",
                    ],
                },
            },
            Self::Grimmsnarl(_) => &SpeciesData {
                national_dex_id: 861,
                names: NamesData {
                    names: [
                        "オーロンゲ",
                        "Grimmsnarl",
                        "Angoliath",
                        "Grimmsnarl",
                        "Olangaar",
                        "Grimmsnarl",
                        "오롱털",
                        "长毛巨魔",
                        "長毛巨魔",
                    ],
                },
            },
            Self::Obstagoon(_) => &SpeciesData {
                national_dex_id: 862,
                names: NamesData {
                    names: [
                        "タチフサグマ",
                        "Obstagoon",
                        "Ixon",
                        "Obstagoon",
                        "Barrikadax",
                        "Obstagoon",
                        "가로막구리",
                        "堵拦熊",
                        "堵攔熊",
                    ],
                },
            },
            Self::Perrserker(_) => &SpeciesData {
                national_dex_id: 863,
                names: NamesData {
                    names: [
                        "ニャイキング",
                        "Perrserker",
                        "Berserkatt",
                        "Perrserker",
                        "Mauzinger",
                        "Perrserker",
                        "나이킹",
                        "喵头目",
                        "喵頭目",
                    ],
                },
            },
            Self::Cursola(_) => &SpeciesData {
                national_dex_id: 864,
                names: NamesData {
                    names: [
                        "サニゴーン",
                        "Cursola",
                        "Corayôme",
                        "Cursola",
                        "Gorgasonn",
                        "Cursola",
                        "산호르곤",
                        "魔灵珊瑚",
                        "魔靈珊瑚",
                    ],
                },
            },
            Self::Sirfetchd(_) => &SpeciesData {
                national_dex_id: 865,
                names: NamesData {
                    names: [
                        "ネギガナイト",
                        "Sirfetch’d",
                        "Palarticho",
                        "Sirfetch’d",
                        "Lauchzelot",
                        "Sirfetch’d",
                        "창파나이트",
                        "葱游兵",
                        "蔥遊兵",
                    ],
                },
            },
            Self::MrRime(_) => &SpeciesData {
                national_dex_id: 866,
                names: NamesData {
                    names: [
                        "バリコオル",
                        "Mr. Rime",
                        "M. Glaquette",
                        "Mr. Rime",
                        "Pantifrost",
                        "Mr. Rime",
                        "마임꽁꽁",
                        "踏冰人偶",
                        "踏冰人偶",
                    ],
                },
            },
            Self::Runerigus(_) => &SpeciesData {
                national_dex_id: 867,
                names: NamesData {
                    names: [
                        "デスバーン",
                        "Runerigus",
                        "Tutétékri",
                        "Runerigus",
                        "Oghnatoll",
                        "Runerigus",
                        "데스판",
                        "迭失板",
                        "死神板",
                    ],
                },
            },
            Self::Milcery(_) => &SpeciesData {
                national_dex_id: 868,
                names: NamesData {
                    names: [
                        "マホミル",
                        "Milcery",
                        "Crèmy",
                        "Milcery",
                        "Hokumil",
                        "Milcery",
                        "마빌크",
                        "小仙奶",
                        "小仙奶",
                    ],
                },
            },
            Self::Alcremie(_) => &SpeciesData {
                national_dex_id: 869,
                names: NamesData {
                    names: [
                        "マホイップ",
                        "Alcremie",
                        "Charmilly",
                        "Alcremie",
                        "Pokusan",
                        "Alcremie",
                        "마휘핑",
                        "霜奶仙",
                        "霜奶仙",
                    ],
                },
            },
            Self::Falinks(_) => &SpeciesData {
                national_dex_id: 870,
                names: NamesData {
                    names: [
                        "タイレーツ",
                        "Falinks",
                        "Hexadron",
                        "Falinks",
                        "Legios",
                        "Falinks",
                        "대여르",
                        "列阵兵",
                        "列陣兵",
                    ],
                },
            },
            Self::Pincurchin(_) => &SpeciesData {
                national_dex_id: 871,
                names: NamesData {
                    names: [
                        "バチンウニ",
                        "Pincurchin",
                        "Wattapik",
                        "Pincurchin",
                        "Britzigel",
                        "Pincurchin",
                        "찌르성게",
                        "啪嚓海胆",
                        "啪嚓海膽",
                    ],
                },
            },
            Self::Snom(_) => &SpeciesData {
                national_dex_id: 872,
                names: NamesData {
                    names: [
                        "ユキハミ",
                        "Snom",
                        "Frissonille",
                        "Snom",
                        "Snomnom",
                        "Snom",
                        "누니머기",
                        "雪吞虫",
                        "雪吞蟲",
                    ],
                },
            },
            Self::Frosmoth(_) => &SpeciesData {
                national_dex_id: 873,
                names: NamesData {
                    names: [
                        "モスノウ",
                        "Frosmoth",
                        "Beldeneige",
                        "Frosmoth",
                        "Mottineva",
                        "Frosmoth",
                        "모스노우",
                        "雪绒蛾",
                        "雪絨蛾",
                    ],
                },
            },
            Self::Stonjourner(_) => &SpeciesData {
                national_dex_id: 874,
                names: NamesData {
                    names: [
                        "イシヘンジン",
                        "Stonjourner",
                        "Dolman",
                        "Stonjourner",
                        "Humanolith",
                        "Stonjourner",
                        "돌헨진",
                        "巨石丁",
                        "巨石丁",
                    ],
                },
            },
            Self::Eiscue(_) => &SpeciesData {
                national_dex_id: 875,
                names: NamesData {
                    names: [
                        "コオリッポ",
                        "Eiscue",
                        "Bekaglaçon",
                        "Eiscue",
                        "Kubuin",
                        "Eiscue",
                        "빙큐보",
                        "冰砌鹅",
                        "冰砌鵝",
                    ],
                },
            },
            Self::Indeedee(_) => &SpeciesData {
                national_dex_id: 876,
                names: NamesData {
                    names: [
                        "イエッサン",
                        "Indeedee",
                        "Wimessir",
                        "Indeedee",
                        "Servol",
                        "Indeedee",
                        "에써르",
                        "爱管侍",
                        "愛管侍",
                    ],
                },
            },
            Self::Morpeko(_) => &SpeciesData {
                national_dex_id: 877,
                names: NamesData {
                    names: [
                        "モルペコ",
                        "Morpeko",
                        "Morpeko",
                        "Morpeko",
                        "Morpeko",
                        "Morpeko",
                        "모르페코",
                        "莫鲁贝可",
                        "莫魯貝可",
                    ],
                },
            },
            Self::Cufant(_) => &SpeciesData {
                national_dex_id: 878,
                names: NamesData {
                    names: [
                        "ゾウドウ",
                        "Cufant",
                        "Charibari",
                        "Cufant",
                        "Kupfanti",
                        "Cufant",
                        "끼리동",
                        "铜象",
                        "銅象",
                    ],
                },
            },
            Self::Copperajah(_) => &SpeciesData {
                national_dex_id: 879,
                names: NamesData {
                    names: [
                        "ダイオウドウ",
                        "Copperajah",
                        "Pachyradjah",
                        "Copperajah",
                        "Patinaraja",
                        "Copperajah",
                        "대왕끼리동",
                        "大王铜象",
                        "大王銅象",
                    ],
                },
            },
            Self::Dracozolt(_) => &SpeciesData {
                national_dex_id: 880,
                names: NamesData {
                    names: [
                        "パッチラゴン",
                        "Dracozolt",
                        "Galvagon",
                        "Dracozolt",
                        "Lectragon",
                        "Dracozolt",
                        "파치래곤",
                        "雷鸟龙",
                        "雷鳥龍",
                    ],
                },
            },
            Self::Arctozolt(_) => &SpeciesData {
                national_dex_id: 881,
                names: NamesData {
                    names: [
                        "パッチルドン",
                        "Arctozolt",
                        "Galvagla",
                        "Arctozolt",
                        "Lecryodon",
                        "Arctozolt",
                        "파치르돈",
                        "雷鸟海兽",
                        "雷鳥海獸",
                    ],
                },
            },
            Self::Dracovish(_) => &SpeciesData {
                national_dex_id: 882,
                names: NamesData {
                    names: [
                        "ウオノラゴン",
                        "Dracovish",
                        "Hydragon",
                        "Dracovish",
                        "Pescragon",
                        "Dracovish",
                        "어래곤",
                        "鳃鱼龙",
                        "鰓魚龍",
                    ],
                },
            },
            Self::Arctovish(_) => &SpeciesData {
                national_dex_id: 883,
                names: NamesData {
                    names: [
                        "ウオチルドン",
                        "Arctovish",
                        "Hydragla",
                        "Arctovish",
                        "Pescryodon",
                        "Arctovish",
                        "어치르돈",
                        "鳃鱼海兽",
                        "鰓魚海獸",
                    ],
                },
            },
            Self::Duraludon(_) => &SpeciesData {
                national_dex_id: 884,
                names: NamesData {
                    names: [
                        "ジュラルドン",
                        "Duraludon",
                        "Duralugon",
                        "Duraludon",
                        "Duraludon",
                        "Duraludon",
                        "두랄루돈",
                        "铝钢龙",
                        "鋁鋼龍",
                    ],
                },
            },
            Self::Dreepy(_) => &SpeciesData {
                national_dex_id: 885,
                names: NamesData {
                    names: [
                        "ドラメシヤ",
                        "Dreepy",
                        "Fantyrm",
                        "Dreepy",
                        "Grolldra",
                        "Dreepy",
                        "드라꼰",
                        "多龙梅西亚",
                        "多龍梅西亞",
                    ],
                },
            },
            Self::Drakloak(_) => &SpeciesData {
                national_dex_id: 886,
                names: NamesData {
                    names: [
                        "ドロンチ",
                        "Drakloak",
                        "Dispareptil",
                        "Drakloak",
                        "Phandra",
                        "Drakloak",
                        "드래런치",
                        "多龙奇",
                        "多龍奇",
                    ],
                },
            },
            Self::Dragapult(_) => &SpeciesData {
                national_dex_id: 887,
                names: NamesData {
                    names: [
                        "ドラパルト",
                        "Dragapult",
                        "Lanssorien",
                        "Dragapult",
                        "Katapuldra",
                        "Dragapult",
                        "드래펄트",
                        "多龙巴鲁托",
                        "多龍巴魯托",
                    ],
                },
            },
            Self::Zacian(_) => &SpeciesData {
                national_dex_id: 888,
                names: NamesData {
                    names: [
                        "ザシアン",
                        "Zacian",
                        "Zacian",
                        "Zacian",
                        "Zacian",
                        "Zacian",
                        "자시안",
                        "苍响",
                        "蒼響",
                    ],
                },
            },
            Self::Zamazenta(_) => &SpeciesData {
                national_dex_id: 889,
                names: NamesData {
                    names: [
                        "ザマゼンタ",
                        "Zamazenta",
                        "Zamazenta",
                        "Zamazenta",
                        "Zamazenta",
                        "Zamazenta",
                        "자마젠타",
                        "藏玛然特",
                        "藏瑪然特",
                    ],
                },
            },
            Self::Eternatus(_) => &SpeciesData {
                national_dex_id: 890,
                names: NamesData {
                    names: [
                        "ムゲンダイナ",
                        "Eternatus",
                        "Éthernatos",
                        "Eternatus",
                        "Endynalos",
                        "Eternatus",
                        "무한다이노",
                        "无极汰那",
                        "無極汰那",
                    ],
                },
            },
            Self::Kubfu(_) => &SpeciesData {
                national_dex_id: 891,
                names: NamesData {
                    names: [
                        "ダクマ",
                        "Kubfu",
                        "Wushours",
                        "Kubfu",
                        "Dakuma",
                        "Kubfu",
                        "치고마",
                        "熊徒弟",
                        "熊徒弟",
                    ],
                },
            },
            Self::Urshifu(_) => &SpeciesData {
                national_dex_id: 892,
                names: NamesData {
                    names: [
                        "ウーラオス",
                        "Urshifu",
                        "Shifours",
                        "Urshifu",
                        "Wulaosu",
                        "Urshifu",
                        "우라오스",
                        "武道熊师",
                        "武道熊師",
                    ],
                },
            },
            Self::Zarude(_) => &SpeciesData {
                national_dex_id: 893,
                names: NamesData {
                    names: [
                        "ザルード",
                        "Zarude",
                        "Zarude",
                        "Zarude",
                        "Zarude",
                        "Zarude",
                        "자루도",
                        "萨戮德",
                        "薩戮德",
                    ],
                },
            },
            Self::Regieleki(_) => &SpeciesData {
                national_dex_id: 894,
                names: NamesData {
                    names: [
                        "レジエレキ",
                        "Regieleki",
                        "Regieleki",
                        "Regieleki",
                        "Regieleki",
                        "Regieleki",
                        "레지에레키",
                        "雷吉艾勒奇",
                        "雷吉艾勒奇",
                    ],
                },
            },
            Self::Regidrago(_) => &SpeciesData {
                national_dex_id: 895,
                names: NamesData {
                    names: [
                        "レジドラゴ",
                        "Regidrago",
                        "Regidrago",
                        "Regidrago",
                        "Regidrago",
                        "Regidrago",
                        "레지드래고",
                        "雷吉铎拉戈",
                        "雷吉鐸拉戈",
                    ],
                },
            },
            Self::Glastrier(_) => &SpeciesData {
                national_dex_id: 896,
                names: NamesData {
                    names: [
                        "ブリザポス",
                        "Glastrier",
                        "Blizzeval",
                        "Glastrier",
                        "Polaross",
                        "Glastrier",
                        "블리자포스",
                        "雪暴马",
                        "雪暴馬",
                    ],
                },
            },
            Self::Spectrier(_) => &SpeciesData {
                national_dex_id: 897,
                names: NamesData {
                    names: [
                        "レイスポス",
                        "Spectrier",
                        "Spectreval",
                        "Spectrier",
                        "Phantoross",
                        "Spectrier",
                        "레이스포스",
                        "灵幽马",
                        "靈幽馬",
                    ],
                },
            },
            Self::Calyrex(_) => &SpeciesData {
                national_dex_id: 898,
                names: NamesData {
                    names: [
                        "バドレックス",
                        "Calyrex",
                        "Sylveroy",
                        "Calyrex",
                        "Coronospa",
                        "Calyrex",
                        "버드렉스",
                        "蕾冠王",
                        "蕾冠王",
                    ],
                },
            },
            Self::Wyrdeer(_) => &SpeciesData {
                national_dex_id: 899,
                names: NamesData {
                    names: [
                        "アヤシシ",
                        "Wyrdeer",
                        "Cerbyllin",
                        "Wyrdeer",
                        "Damythir",
                        "Wyrdeer",
                        "신비록",
                        "诡角鹿",
                        "詭角鹿",
                    ],
                },
            },
            Self::Kleavor(_) => &SpeciesData {
                national_dex_id: 900,
                names: NamesData {
                    names: [
                        "バサギリ",
                        "Kleavor",
                        "Hachécateur",
                        "Kleavor",
                        "Axantor",
                        "Kleavor",
                        "사마자르",
                        "劈斧螳螂",
                        "劈斧螳螂",
                    ],
                },
            },
            Self::Ursaluna(_) => &SpeciesData {
                national_dex_id: 901,
                names: NamesData {
                    names: [
                        "ガチグマ",
                        "Ursaluna",
                        "Ursaking",
                        "Ursaluna",
                        "Ursaluna",
                        "Ursaluna",
                        "다투곰",
                        "月月熊",
                        "月月熊",
                    ],
                },
            },
            Self::Basculegion(_) => &SpeciesData {
                national_dex_id: 902,
                names: NamesData {
                    names: [
                        "イダイトウ",
                        "Basculegion",
                        "Paragruel",
                        "Basculegion",
                        "Salmagnis",
                        "Basculegion",
                        "대쓰여너",
                        "幽尾玄鱼",
                        "幽尾玄魚",
                    ],
                },
            },
            Self::Sneasler(_) => &SpeciesData {
                national_dex_id: 903,
                names: NamesData {
                    names: [
                        "オオニューラ",
                        "Sneasler",
                        "Farfurex",
                        "Sneasler",
                        "Snieboss",
                        "Sneasler",
                        "포푸니크",
                        "大狃拉",
                        "大狃拉",
                    ],
                },
            },
            Self::Overqwil(_) => &SpeciesData {
                national_dex_id: 904,
                names: NamesData {
                    names: [
                        "ハリーマン",
                        "Overqwil",
                        "Qwilpik",
                        "Overqwil",
                        "Myriador",
                        "Overqwil",
                        "장침바루",
                        "万针鱼",
                        "萬針魚",
                    ],
                },
            },
            Self::Enamorus(_) => &SpeciesData {
                national_dex_id: 905,
                names: NamesData {
                    names: [
                        "ラブトロス",
                        "Enamorus",
                        "Amovénus",
                        "Enamorus",
                        "Cupidos",
                        "Enamorus",
                        "러브로스",
                        "眷恋云",
                        "眷戀雲",
                    ],
                },
            },
            Self::Sprigatito(_) => &SpeciesData {
                national_dex_id: 906,
                names: NamesData {
                    names: [
                        "ニャオハ",
                        "Sprigatito",
                        "Poussacha",
                        "Sprigatito",
                        "Felori",
                        "Sprigatito",
                        "나오하",
                        "新叶喵",
                        "新葉喵",
                    ],
                },
            },
            Self::Floragato(_) => &SpeciesData {
                national_dex_id: 907,
                names: NamesData {
                    names: [
                        "ニャローテ",
                        "Floragato",
                        "Matourgeon",
                        "Floragato",
                        "Feliospa",
                        "Floragato",
                        "나로테",
                        "蒂蕾喵",
                        "蒂蕾喵",
                    ],
                },
            },
            Self::Meowscarada(_) => &SpeciesData {
                national_dex_id: 908,
                names: NamesData {
                    names: [
                        "マスカーニャ",
                        "Meowscarada",
                        "Miascarade",
                        "Meowscarada",
                        "Maskagato",
                        "Meowscarada",
                        "마스카나",
                        "魔幻假面喵",
                        "魔幻假面喵",
                    ],
                },
            },
            Self::Fuecoco(_) => &SpeciesData {
                national_dex_id: 909,
                names: NamesData {
                    names: [
                        "ホゲータ",
                        "Fuecoco",
                        "Chochodile",
                        "Fuecoco",
                        "Krokel",
                        "Fuecoco",
                        "뜨아거",
                        "呆火鳄",
                        "呆火鱷",
                    ],
                },
            },
            Self::Crocalor(_) => &SpeciesData {
                national_dex_id: 910,
                names: NamesData {
                    names: [
                        "アチゲータ",
                        "Crocalor",
                        "Crocogril",
                        "Crocalor",
                        "Lokroko",
                        "Crocalor",
                        "악뜨거",
                        "炙烫鳄",
                        "炙燙鱷",
                    ],
                },
            },
            Self::Skeledirge(_) => &SpeciesData {
                national_dex_id: 911,
                names: NamesData {
                    names: [
                        "ラウドボーン",
                        "Skeledirge",
                        "Flâmigator",
                        "Skeledirge",
                        "Skelokrok",
                        "Skeledirge",
                        "라우드본",
                        "骨纹巨声鳄",
                        "骨紋巨聲鱷",
                    ],
                },
            },
            Self::Quaxly(_) => &SpeciesData {
                national_dex_id: 912,
                names: NamesData {
                    names: [
                        "クワッス",
                        "Quaxly",
                        "Coiffeton",
                        "Quaxly",
                        "Kwaks",
                        "Quaxly",
                        "꾸왁스",
                        "润水鸭",
                        "潤水鴨",
                    ],
                },
            },
            Self::Quaxwell(_) => &SpeciesData {
                national_dex_id: 913,
                names: NamesData {
                    names: [
                        "ウェルカモ",
                        "Quaxwell",
                        "Canarbello",
                        "Quaxwell",
                        "Fuentente",
                        "Quaxwell",
                        "아꾸왁",
                        "涌跃鸭",
                        "湧躍鴨",
                    ],
                },
            },
            Self::Quaquaval(_) => &SpeciesData {
                national_dex_id: 914,
                names: NamesData {
                    names: [
                        "ウェーニバル",
                        "Quaquaval",
                        "Palmaval",
                        "Quaquaval",
                        "Bailonda",
                        "Quaquaval",
                        "웨이니발",
                        "狂欢浪舞鸭",
                        "狂歡浪舞鴨",
                    ],
                },
            },
            Self::Lechonk(_) => &SpeciesData {
                national_dex_id: 915,
                names: NamesData {
                    names: [
                        "グルトン",
                        "Lechonk",
                        "Gourmelet",
                        "Lechonk",
                        "Ferkuli",
                        "Lechonk",
                        "맛보돈",
                        "爱吃豚",
                        "愛吃豚",
                    ],
                },
            },
            Self::Oinkologne(_) => &SpeciesData {
                national_dex_id: 916,
                names: NamesData {
                    names: [
                        "パフュートン",
                        "Oinkologne",
                        "Fragroin",
                        "Oinkologne",
                        "Fragrunz",
                        "Oinkologne",
                        "퍼퓨돈",
                        "飘香豚",
                        "飄香豚",
                    ],
                },
            },
            Self::Tarountula(_) => &SpeciesData {
                national_dex_id: 917,
                names: NamesData {
                    names: [
                        "タマンチュラ",
                        "Tarountula",
                        "Tissenboule",
                        "Tarountula",
                        "Tarundel",
                        "Tarountula",
                        "타랜툴라",
                        "团珠蛛",
                        "團珠蛛",
                    ],
                },
            },
            Self::Spidops(_) => &SpeciesData {
                national_dex_id: 918,
                names: NamesData {
                    names: [
                        "ワナイダー",
                        "Spidops",
                        "Filentrappe",
                        "Spidops",
                        "Spinsidias",
                        "Spidops",
                        "트래피더",
                        "操陷蛛",
                        "操陷蛛",
                    ],
                },
            },
            Self::Nymble(_) => &SpeciesData {
                national_dex_id: 919,
                names: NamesData {
                    names: [
                        "マメバッタ",
                        "Nymble",
                        "Lilliterelle",
                        "Nymble",
                        "Micrick",
                        "Nymble",
                        "콩알뚜기",
                        "豆蟋蟀",
                        "豆蟋蟀",
                    ],
                },
            },
            Self::Lokix(_) => &SpeciesData {
                national_dex_id: 920,
                names: NamesData {
                    names: [
                        "エクスレッグ",
                        "Lokix",
                        "Gambex",
                        "Lokix",
                        "Lextremo",
                        "Lokix",
                        "엑스레그",
                        "烈腿蝗",
                        "烈腿蝗",
                    ],
                },
            },
            Self::Pawmi(_) => &SpeciesData {
                national_dex_id: 921,
                names: NamesData {
                    names: [
                        "パモ", "Pawmi", "Pohm", "Pawmi", "Pamo", "Pawmi", "빠모", "布拨", "布撥",
                    ],
                },
            },
            Self::Pawmo(_) => &SpeciesData {
                national_dex_id: 922,
                names: NamesData {
                    names: [
                        "パモット",
                        "Pawmo",
                        "Pohmotte",
                        "Pawmo",
                        "Pamamo",
                        "Pawmo",
                        "빠모트",
                        "布土拨",
                        "布土撥",
                    ],
                },
            },
            Self::Pawmot(_) => &SpeciesData {
                national_dex_id: 923,
                names: NamesData {
                    names: [
                        "パーモット",
                        "Pawmot",
                        "Pohmarmotte",
                        "Pawmot",
                        "Pamomamo",
                        "Pawmot",
                        "빠르모트",
                        "巴布土拨",
                        "巴布土撥",
                    ],
                },
            },
            Self::Tandemaus(_) => &SpeciesData {
                national_dex_id: 924,
                names: NamesData {
                    names: [
                        "ワッカネズミ",
                        "Tandemaus",
                        "Compagnol",
                        "Tandemaus",
                        "Zwieps",
                        "Tandemaus",
                        "두리쥐",
                        "一对鼠",
                        "一對鼠",
                    ],
                },
            },
            Self::Maushold(_) => &SpeciesData {
                national_dex_id: 925,
                names: NamesData {
                    names: [
                        "イッカネズミ",
                        "Maushold",
                        "Famignol",
                        "Maushold",
                        "Famieps",
                        "Maushold",
                        "파밀리쥐",
                        "一家鼠",
                        "一家鼠",
                    ],
                },
            },
            Self::Fidough(_) => &SpeciesData {
                national_dex_id: 926,
                names: NamesData {
                    names: [
                        "パピモッチ",
                        "Fidough",
                        "Pâtachiot",
                        "Fidough",
                        "Hefel",
                        "Fidough",
                        "쫀도기",
                        "狗仔包",
                        "狗仔包",
                    ],
                },
            },
            Self::Dachsbun(_) => &SpeciesData {
                national_dex_id: 927,
                names: NamesData {
                    names: [
                        "バウッツェル",
                        "Dachsbun",
                        "Briochien",
                        "Dachsbun",
                        "Backel",
                        "Dachsbun",
                        "바우첼",
                        "麻花犬",
                        "麻花犬",
                    ],
                },
            },
            Self::Smoliv(_) => &SpeciesData {
                national_dex_id: 928,
                names: NamesData {
                    names: [
                        "ミニーブ",
                        "Smoliv",
                        "Olivini",
                        "Smoliv",
                        "Olini",
                        "Smoliv",
                        "미니브",
                        "迷你芙",
                        "迷你芙",
                    ],
                },
            },
            Self::Dolliv(_) => &SpeciesData {
                national_dex_id: 929,
                names: NamesData {
                    names: [
                        "オリーニョ",
                        "Dolliv",
                        "Olivado",
                        "Dolliv",
                        "Olivinio",
                        "Dolliv",
                        "올리뇨",
                        "奥利纽",
                        "奧利紐",
                    ],
                },
            },
            Self::Arboliva(_) => &SpeciesData {
                national_dex_id: 930,
                names: NamesData {
                    names: [
                        "オリーヴァ",
                        "Arboliva",
                        "Arboliva",
                        "Arboliva",
                        "Olithena",
                        "Arboliva",
                        "올리르바",
                        "奥利瓦",
                        "奧利瓦",
                    ],
                },
            },
            Self::Squawkabilly(_) => &SpeciesData {
                national_dex_id: 931,
                names: NamesData {
                    names: [
                        "イキリンコ",
                        "Squawkabilly",
                        "Tapatoès",
                        "Squawkabilly",
                        "Krawalloro",
                        "Squawkabilly",
                        "시비꼬",
                        "怒鹦哥",
                        "怒鸚哥",
                    ],
                },
            },
            Self::Nacli(_) => &SpeciesData {
                national_dex_id: 932,
                names: NamesData {
                    names: [
                        "コジオ",
                        "Nacli",
                        "Selutin",
                        "Nacli",
                        "Geosali",
                        "Nacli",
                        "베베솔트",
                        "盐石宝",
                        "鹽石寶",
                    ],
                },
            },
            Self::Naclstack(_) => &SpeciesData {
                national_dex_id: 933,
                names: NamesData {
                    names: [
                        "ジオヅム",
                        "Naclstack",
                        "Amassel",
                        "Naclstack",
                        "Sedisal",
                        "Naclstack",
                        "스태솔트",
                        "盐石垒",
                        "鹽石壘",
                    ],
                },
            },
            Self::Garganacl(_) => &SpeciesData {
                national_dex_id: 934,
                names: NamesData {
                    names: [
                        "キョジオーン",
                        "Garganacl",
                        "Gigansel",
                        "Garganacl",
                        "Saltigant",
                        "Garganacl",
                        "콜로솔트",
                        "盐石巨灵",
                        "鹽石巨靈",
                    ],
                },
            },
            Self::Charcadet(_) => &SpeciesData {
                national_dex_id: 935,
                names: NamesData {
                    names: [
                        "カルボウ",
                        "Charcadet",
                        "Charbambin",
                        "Charcadet",
                        "Knarbon",
                        "Charcadet",
                        "카르본",
                        "炭小侍",
                        "炭小侍",
                    ],
                },
            },
            Self::Armarouge(_) => &SpeciesData {
                national_dex_id: 936,
                names: NamesData {
                    names: [
                        "グレンアルマ",
                        "Armarouge",
                        "Carmadura",
                        "Armarouge",
                        "Crimanzo",
                        "Armarouge",
                        "카디나르마",
                        "红莲铠骑",
                        "紅蓮鎧騎",
                    ],
                },
            },
            Self::Ceruledge(_) => &SpeciesData {
                national_dex_id: 937,
                names: NamesData {
                    names: [
                        "ソウブレイズ",
                        "Ceruledge",
                        "Malvalame",
                        "Ceruledge",
                        "Azugladis",
                        "Ceruledge",
                        "파라블레이즈",
                        "苍炎刃鬼",
                        "蒼炎刃鬼",
                    ],
                },
            },
            Self::Tadbulb(_) => &SpeciesData {
                national_dex_id: 938,
                names: NamesData {
                    names: [
                        "ズピカ",
                        "Tadbulb",
                        "Têtampoule",
                        "Tadbulb",
                        "Blipp",
                        "Tadbulb",
                        "빈나두",
                        "光蚪仔",
                        "光蚪仔",
                    ],
                },
            },
            Self::Bellibolt(_) => &SpeciesData {
                national_dex_id: 939,
                names: NamesData {
                    names: [
                        "ハラバリー",
                        "Bellibolt",
                        "Ampibidou",
                        "Bellibolt",
                        "Wampitz",
                        "Bellibolt",
                        "찌리배리",
                        "电肚蛙",
                        "電肚蛙",
                    ],
                },
            },
            Self::Wattrel(_) => &SpeciesData {
                national_dex_id: 940,
                names: NamesData {
                    names: [
                        "カイデン",
                        "Wattrel",
                        "Zapétrel",
                        "Wattrel",
                        "Voltrel",
                        "Wattrel",
                        "찌리비",
                        "电海燕",
                        "電海燕",
                    ],
                },
            },
            Self::Kilowattrel(_) => &SpeciesData {
                national_dex_id: 941,
                names: NamesData {
                    names: [
                        "タイカイデン",
                        "Kilowattrel",
                        "Fulgulairo",
                        "Kilowattrel",
                        "Voltrean",
                        "Kilowattrel",
                        "찌리비크",
                        "大电海燕",
                        "大電海燕",
                    ],
                },
            },
            Self::Maschiff(_) => &SpeciesData {
                national_dex_id: 942,
                names: NamesData {
                    names: [
                        "オラチフ",
                        "Maschiff",
                        "Grondogue",
                        "Maschiff",
                        "Mobtiff",
                        "Maschiff",
                        "오라티프",
                        "偶叫獒",
                        "偶叫獒",
                    ],
                },
            },
            Self::Mabosstiff(_) => &SpeciesData {
                national_dex_id: 943,
                names: NamesData {
                    names: [
                        "マフィティフ",
                        "Mabosstiff",
                        "Dogrino",
                        "Mabosstiff",
                        "Mastifioso",
                        "Mabosstiff",
                        "마피티프",
                        "獒教父",
                        "獒教父",
                    ],
                },
            },
            Self::Shroodle(_) => &SpeciesData {
                national_dex_id: 944,
                names: NamesData {
                    names: [
                        "シルシュルー",
                        "Shroodle",
                        "Gribouraigne",
                        "Shroodle",
                        "Sproxi",
                        "Shroodle",
                        "땃쭈르",
                        "滋汁鼹",
                        "滋汁鼴",
                    ],
                },
            },
            Self::Grafaiai(_) => &SpeciesData {
                national_dex_id: 945,
                names: NamesData {
                    names: [
                        "タギングル",
                        "Grafaiai",
                        "Tag-Tag",
                        "Grafaiai",
                        "Affiti",
                        "Grafaiai",
                        "태깅구르",
                        "涂标客",
                        "塗標客",
                    ],
                },
            },
            Self::Bramblin(_) => &SpeciesData {
                national_dex_id: 946,
                names: NamesData {
                    names: [
                        "アノクサ",
                        "Bramblin",
                        "Virovent",
                        "Bramblin",
                        "Weherba",
                        "Bramblin",
                        "그푸리",
                        "纳噬草",
                        "納噬草",
                    ],
                },
            },
            Self::Brambleghast(_) => &SpeciesData {
                national_dex_id: 947,
                names: NamesData {
                    names: [
                        "アノホラグサ",
                        "Brambleghast",
                        "Virevorreur",
                        "Brambleghast",
                        "Horrerba",
                        "Brambleghast",
                        "공푸리",
                        "怖纳噬草",
                        "怖納噬草",
                    ],
                },
            },
            Self::Toedscool(_) => &SpeciesData {
                national_dex_id: 948,
                names: NamesData {
                    names: [
                        "ノノクラゲ",
                        "Toedscool",
                        "Terracool",
                        "Toedscool",
                        "Tentagra",
                        "Toedscool",
                        "들눈해",
                        "原野水母",
                        "原野水母",
                    ],
                },
            },
            Self::Toedscruel(_) => &SpeciesData {
                national_dex_id: 949,
                names: NamesData {
                    names: [
                        "リククラゲ",
                        "Toedscruel",
                        "Terracruel",
                        "Toedscruel",
                        "Tenterra",
                        "Toedscruel",
                        "육파리",
                        "陆地水母",
                        "陸地水母",
                    ],
                },
            },
            Self::Klawf(_) => &SpeciesData {
                national_dex_id: 950,
                names: NamesData {
                    names: [
                        "ガケガニ",
                        "Klawf",
                        "Craparoi",
                        "Klawf",
                        "Klibbe",
                        "Klawf",
                        "절벼게",
                        "毛崖蟹",
                        "毛崖蟹",
                    ],
                },
            },
            Self::Capsakid(_) => &SpeciesData {
                national_dex_id: 951,
                names: NamesData {
                    names: [
                        "カプサイジ",
                        "Capsakid",
                        "Pimito",
                        "Capsakid",
                        "Chilingel",
                        "Capsakid",
                        "캡싸이",
                        "热辣娃",
                        "熱辣娃",
                    ],
                },
            },
            Self::Scovillain(_) => &SpeciesData {
                national_dex_id: 952,
                names: NamesData {
                    names: [
                        "スコヴィラン",
                        "Scovillain",
                        "Scovilain",
                        "Scovillain",
                        "Halupenjo",
                        "Scovillain",
                        "스코빌런",
                        "狠辣椒",
                        "狠辣椒",
                    ],
                },
            },
            Self::Rellor(_) => &SpeciesData {
                national_dex_id: 953,
                names: NamesData {
                    names: [
                        "シガロコ",
                        "Rellor",
                        "Léboulérou",
                        "Rellor",
                        "Relluk",
                        "Rellor",
                        "구르데",
                        "虫滚泥",
                        "蟲滾泥",
                    ],
                },
            },
            Self::Rabsca(_) => &SpeciesData {
                national_dex_id: 954,
                names: NamesData {
                    names: [
                        "ベラカス",
                        "Rabsca",
                        "Bérasca",
                        "Rabsca",
                        "Skarabaks",
                        "Rabsca",
                        "베라카스",
                        "虫甲圣",
                        "蟲甲聖",
                    ],
                },
            },
            Self::Flittle(_) => &SpeciesData {
                national_dex_id: 955,
                names: NamesData {
                    names: [
                        "ヒラヒナ",
                        "Flittle",
                        "Flotillon",
                        "Flittle",
                        "Flattutu",
                        "Flittle",
                        "하느라기",
                        "飘飘雏",
                        "飄飄雛",
                    ],
                },
            },
            Self::Espathra(_) => &SpeciesData {
                national_dex_id: 956,
                names: NamesData {
                    names: [
                        "クエスパトラ",
                        "Espathra",
                        "Cléopsytra",
                        "Espathra",
                        "Psiopatra",
                        "Espathra",
                        "클레스퍼트라",
                        "超能艳鸵",
                        "超能豔鴕",
                    ],
                },
            },
            Self::Tinkatink(_) => &SpeciesData {
                national_dex_id: 957,
                names: NamesData {
                    names: [
                        "カヌチャン",
                        "Tinkatink",
                        "Forgerette",
                        "Tinkatink",
                        "Forgita",
                        "Tinkatink",
                        "어리짱",
                        "小锻匠",
                        "小鍛匠",
                    ],
                },
            },
            Self::Tinkatuff(_) => &SpeciesData {
                national_dex_id: 958,
                names: NamesData {
                    names: [
                        "ナカヌチャン",
                        "Tinkatuff",
                        "Forgella",
                        "Tinkatuff",
                        "Tafforgita",
                        "Tinkatuff",
                        "벼리짱",
                        "巧锻匠",
                        "巧鍛匠",
                    ],
                },
            },
            Self::Tinkaton(_) => &SpeciesData {
                national_dex_id: 959,
                names: NamesData {
                    names: [
                        "デカヌチャン",
                        "Tinkaton",
                        "Forgelina",
                        "Tinkaton",
                        "Granforgita",
                        "Tinkaton",
                        "두드리짱",
                        "巨锻匠",
                        "巨鍛匠",
                    ],
                },
            },
            Self::Wiglett(_) => &SpeciesData {
                national_dex_id: 960,
                names: NamesData {
                    names: [
                        "ウミディグダ",
                        "Wiglett",
                        "Taupikeau",
                        "Wiglett",
                        "Schligda",
                        "Wiglett",
                        "바다그다",
                        "海地鼠",
                        "海地鼠",
                    ],
                },
            },
            Self::Wugtrio(_) => &SpeciesData {
                national_dex_id: 961,
                names: NamesData {
                    names: [
                        "ウミトリオ",
                        "Wugtrio",
                        "Triopikeau",
                        "Wugtrio",
                        "Schligdri",
                        "Wugtrio",
                        "바닥트리오",
                        "三海地鼠",
                        "三海地鼠",
                    ],
                },
            },
            Self::Bombirdier(_) => &SpeciesData {
                national_dex_id: 962,
                names: NamesData {
                    names: [
                        "オトシドリ",
                        "Bombirdier",
                        "Lestombaile",
                        "Bombirdier",
                        "Adebom",
                        "Bombirdier",
                        "떨구새",
                        "下石鸟",
                        "下石鳥",
                    ],
                },
            },
            Self::Finizen(_) => &SpeciesData {
                national_dex_id: 963,
                names: NamesData {
                    names: [
                        "ナミイルカ",
                        "Finizen",
                        "Dofin",
                        "Finizen",
                        "Normifin",
                        "Finizen",
                        "맨돌핀",
                        "波普海豚",
                        "波普海豚",
                    ],
                },
            },
            Self::Palafin(_) => &SpeciesData {
                national_dex_id: 964,
                names: NamesData {
                    names: [
                        "イルカマン",
                        "Palafin",
                        "Superdofin",
                        "Palafin",
                        "Delfinator",
                        "Palafin",
                        "돌핀맨",
                        "海豚侠",
                        "海豚俠",
                    ],
                },
            },
            Self::Varoom(_) => &SpeciesData {
                national_dex_id: 965,
                names: NamesData {
                    names: [
                        "ブロロン",
                        "Varoom",
                        "Vrombi",
                        "Varoom",
                        "Knattox",
                        "Varoom",
                        "부르롱",
                        "噗隆隆",
                        "噗隆隆",
                    ],
                },
            },
            Self::Revavroom(_) => &SpeciesData {
                national_dex_id: 966,
                names: NamesData {
                    names: [
                        "ブロロローム",
                        "Revavroom",
                        "Vrombotor",
                        "Revavroom",
                        "Knattatox",
                        "Revavroom",
                        "부르르룸",
                        "普隆隆姆",
                        "普隆隆姆",
                    ],
                },
            },
            Self::Cyclizar(_) => &SpeciesData {
                national_dex_id: 967,
                names: NamesData {
                    names: [
                        "モトトカゲ",
                        "Cyclizar",
                        "Motorizard",
                        "Cyclizar",
                        "Mopex",
                        "Cyclizar",
                        "모토마",
                        "摩托蜥",
                        "摩托蜥",
                    ],
                },
            },
            Self::Orthworm(_) => &SpeciesData {
                national_dex_id: 968,
                names: NamesData {
                    names: [
                        "ミミズズ",
                        "Orthworm",
                        "Ferdeter",
                        "Orthworm",
                        "Schlurm",
                        "Orthworm",
                        "꿈트렁",
                        "拖拖蚓",
                        "拖拖蚓",
                    ],
                },
            },
            Self::Glimmet(_) => &SpeciesData {
                national_dex_id: 969,
                names: NamesData {
                    names: [
                        "キラーメ",
                        "Glimmet",
                        "Germéclat",
                        "Glimmet",
                        "Lumispross",
                        "Glimmet",
                        "초롱순",
                        "晶光芽",
                        "晶光芽",
                    ],
                },
            },
            Self::Glimmora(_) => &SpeciesData {
                national_dex_id: 970,
                names: NamesData {
                    names: [
                        "キラフロル",
                        "Glimmora",
                        "Floréclat",
                        "Glimmora",
                        "Lumiflora",
                        "Glimmora",
                        "킬라플로르",
                        "晶光花",
                        "晶光花",
                    ],
                },
            },
            Self::Greavard(_) => &SpeciesData {
                national_dex_id: 971,
                names: NamesData {
                    names: [
                        "ボチ",
                        "Greavard",
                        "Toutombe",
                        "Greavard",
                        "Gruff",
                        "Greavard",
                        "망망이",
                        "墓仔狗",
                        "墓仔狗",
                    ],
                },
            },
            Self::Houndstone(_) => &SpeciesData {
                national_dex_id: 972,
                names: NamesData {
                    names: [
                        "ハカドッグ",
                        "Houndstone",
                        "Tomberro",
                        "Houndstone",
                        "Friedwuff",
                        "Houndstone",
                        "묘두기",
                        "墓扬犬",
                        "墓揚犬",
                    ],
                },
            },
            Self::Flamigo(_) => &SpeciesData {
                national_dex_id: 973,
                names: NamesData {
                    names: [
                        "カラミンゴ",
                        "Flamigo",
                        "Flamenroule",
                        "Flamigo",
                        "Flaminkno",
                        "Flamigo",
                        "꼬이밍고",
                        "缠红鹤",
                        "纏紅鶴",
                    ],
                },
            },
            Self::Cetoddle(_) => &SpeciesData {
                national_dex_id: 974,
                names: NamesData {
                    names: [
                        "アルクジラ",
                        "Cetoddle",
                        "Piétacé",
                        "Cetoddle",
                        "Flaniwal",
                        "Cetoddle",
                        "터벅고래",
                        "走鲸",
                        "走鯨",
                    ],
                },
            },
            Self::Cetitan(_) => &SpeciesData {
                national_dex_id: 975,
                names: NamesData {
                    names: [
                        "ハルクジラ",
                        "Cetitan",
                        "Balbalèze",
                        "Cetitan",
                        "Kolowal",
                        "Cetitan",
                        "우락고래",
                        "浩大鲸",
                        "浩大鯨",
                    ],
                },
            },
            Self::Veluza(_) => &SpeciesData {
                national_dex_id: 976,
                names: NamesData {
                    names: [
                        "ミガルーサ",
                        "Veluza",
                        "Délestin",
                        "Veluza",
                        "Agiluza",
                        "Veluza",
                        "가비루사",
                        "轻身鳕",
                        "輕身鱈",
                    ],
                },
            },
            Self::Dondozo(_) => &SpeciesData {
                national_dex_id: 977,
                names: NamesData {
                    names: [
                        "ヘイラッシャ",
                        "Dondozo",
                        "Oyacata",
                        "Dondozo",
                        "Heerashai",
                        "Dondozo",
                        "어써러셔",
                        "吃吼霸",
                        "吃吼霸",
                    ],
                },
            },
            Self::Tatsugiri(_) => &SpeciesData {
                national_dex_id: 978,
                names: NamesData {
                    names: [
                        "シャリタツ",
                        "Tatsugiri",
                        "Nigirigon",
                        "Tatsugiri",
                        "Nigiragi",
                        "Tatsugiri",
                        "싸리용",
                        "米立龙",
                        "米立龍",
                    ],
                },
            },
            Self::Annihilape(_) => &SpeciesData {
                national_dex_id: 979,
                names: NamesData {
                    names: [
                        "コノヨザル",
                        "Annihilape",
                        "Courrousinge",
                        "Annihilape",
                        "Epitaff",
                        "Annihilape",
                        "저승갓숭",
                        "弃世猴",
                        "棄世猴",
                    ],
                },
            },
            Self::Clodsire(_) => &SpeciesData {
                national_dex_id: 980,
                names: NamesData {
                    names: [
                        "ドオー",
                        "Clodsire",
                        "Terraiste",
                        "Clodsire",
                        "Suelord",
                        "Clodsire",
                        "토오",
                        "土王",
                        "土王",
                    ],
                },
            },
            Self::Farigiraf(_) => &SpeciesData {
                national_dex_id: 981,
                names: NamesData {
                    names: [
                        "リキキリン",
                        "Farigiraf",
                        "Farigiraf",
                        "Farigiraf",
                        "Farigiraf",
                        "Farigiraf",
                        "키키링",
                        "奇麒麟",
                        "奇麒麟",
                    ],
                },
            },
            Self::Dudunsparce(_) => &SpeciesData {
                national_dex_id: 982,
                names: NamesData {
                    names: [
                        "ノココッチ",
                        "Dudunsparce",
                        "Deusolourdo",
                        "Dudunsparce",
                        "Dummimisel",
                        "Dudunsparce",
                        "노고고치",
                        "土龙节节",
                        "土龍節節",
                    ],
                },
            },
            Self::Kingambit(_) => &SpeciesData {
                national_dex_id: 983,
                names: NamesData {
                    names: [
                        "ドドゲザン",
                        "Kingambit",
                        "Scalpereur",
                        "Kingambit",
                        "Gladimperio",
                        "Kingambit",
                        "대도각참",
                        "仆刀将军",
                        "仆斬將軍",
                    ],
                },
            },
            Self::GreatTusk(_) => &SpeciesData {
                national_dex_id: 984,
                names: NamesData {
                    names: [
                        "イダイナキバ",
                        "Great Tusk",
                        "Fort-Ivoire",
                        "Grandizanne",
                        "Riesenzahn",
                        "Colmilargo",
                        "위대한엄니",
                        "雄伟牙",
                        "雄偉牙",
                    ],
                },
            },
            Self::ScreamTail(_) => &SpeciesData {
                national_dex_id: 985,
                names: NamesData {
                    names: [
                        "サケブシッポ",
                        "Scream Tail",
                        "Hurle-Queue",
                        "Codaurlante",
                        "Brüllschweif",
                        "Colagrito",
                        "우렁찬꼬리",
                        "吼叫尾",
                        "吼叫尾",
                    ],
                },
            },
            Self::BruteBonnet(_) => &SpeciesData {
                national_dex_id: 986,
                names: NamesData {
                    names: [
                        "アラブルタケ",
                        "Brute Bonnet",
                        "Fongus-Furie",
                        "Fungofurioso",
                        "Wutpilz",
                        "Furioseta",
                        "사나운버섯",
                        "猛恶菇",
                        "猛惡菇",
                    ],
                },
            },
            Self::FlutterMane(_) => &SpeciesData {
                national_dex_id: 987,
                names: NamesData {
                    names: [
                        "ハバタクカミ",
                        "Flutter Mane",
                        "Flotte-Mèche",
                        "Crinealato",
                        "Flatterhaar",
                        "Melenaleteo",
                        "날개치는머리",
                        "振翼发",
                        "振翼髮",
                    ],
                },
            },
            Self::SlitherWing(_) => &SpeciesData {
                national_dex_id: 988,
                names: NamesData {
                    names: [
                        "チヲハウハネ",
                        "Slither Wing",
                        "Rampe-Ailes",
                        "Alirasenti",
                        "Kriechflügel",
                        "Reptalada",
                        "땅을기는날개",
                        "爬地翅",
                        "爬地翅",
                    ],
                },
            },
            Self::SandyShocks(_) => &SpeciesData {
                national_dex_id: 989,
                names: NamesData {
                    names: [
                        "スナノケガワ",
                        "Sandy Shocks",
                        "Pelage-Sablé",
                        "Peldisabbia",
                        "Sandfell",
                        "Pelarena",
                        "모래털가죽",
                        "沙铁皮",
                        "沙鐵皮",
                    ],
                },
            },
            Self::IronTreads(_) => &SpeciesData {
                national_dex_id: 990,
                names: NamesData {
                    names: [
                        "テツノワダチ",
                        "Iron Treads",
                        "Roue-de-Fer",
                        "Solcoferreo",
                        "Eisenrad",
                        "Ferrodada",
                        "무쇠바퀴",
                        "铁辙迹",
                        "鐵轍跡",
                    ],
                },
            },
            Self::IronBundle(_) => &SpeciesData {
                national_dex_id: 991,
                names: NamesData {
                    names: [
                        "テツノツツミ",
                        "Iron Bundle",
                        "Hotte-de-Fer",
                        "Saccoferreo",
                        "Eisenbündel",
                        "Ferrosaco",
                        "무쇠보따리",
                        "铁包袱",
                        "鐵包袱",
                    ],
                },
            },
            Self::IronHands(_) => &SpeciesData {
                national_dex_id: 992,
                names: NamesData {
                    names: [
                        "テツノカイナ",
                        "Iron Hands",
                        "Paume-de-Fer",
                        "Manoferrea",
                        "Eisenhand",
                        "Ferropalmas",
                        "무쇠손",
                        "铁臂膀",
                        "鐵臂膀",
                    ],
                },
            },
            Self::IronJugulis(_) => &SpeciesData {
                national_dex_id: 993,
                names: NamesData {
                    names: [
                        "テツノコウベ",
                        "Iron Jugulis",
                        "Têtes-de-Fer",
                        "Colloferreo",
                        "Eisenhals",
                        "Ferrocuello",
                        "무쇠머리",
                        "铁脖颈",
                        "鐵脖頸",
                    ],
                },
            },
            Self::IronMoth(_) => &SpeciesData {
                national_dex_id: 994,
                names: NamesData {
                    names: [
                        "テツノドクガ",
                        "Iron Moth",
                        "Mite-de-Fer",
                        "Falenaferrea",
                        "Eisenfalter",
                        "Ferropolilla",
                        "무쇠독나방",
                        "铁毒蛾",
                        "鐵毒蛾",
                    ],
                },
            },
            Self::IronThorns(_) => &SpeciesData {
                national_dex_id: 995,
                names: NamesData {
                    names: [
                        "テツノイバラ",
                        "Iron Thorns",
                        "Épine-de-Fer",
                        "Spineferree",
                        "Eisendorn",
                        "Ferropúas",
                        "무쇠가시",
                        "铁荆棘",
                        "鐵荊棘",
                    ],
                },
            },
            Self::Frigibax(_) => &SpeciesData {
                national_dex_id: 996,
                names: NamesData {
                    names: [
                        "セビエ",
                        "Frigibax",
                        "Frigodo",
                        "Frigibax",
                        "Frospino",
                        "Frigibax",
                        "드니차",
                        "凉脊龙",
                        "涼脊龍",
                    ],
                },
            },
            Self::Arctibax(_) => &SpeciesData {
                national_dex_id: 997,
                names: NamesData {
                    names: [
                        "セゴール",
                        "Arctibax",
                        "Cryodo",
                        "Arctibax",
                        "Cryospino",
                        "Arctibax",
                        "드니꽁",
                        "冻脊龙",
                        "凍脊龍",
                    ],
                },
            },
            Self::Baxcalibur(_) => &SpeciesData {
                national_dex_id: 998,
                names: NamesData {
                    names: [
                        "セグレイブ",
                        "Baxcalibur",
                        "Glaivodo",
                        "Baxcalibur",
                        "Espinodon",
                        "Baxcalibur",
                        "드닐레이브",
                        "戟脊龙",
                        "戟脊龍",
                    ],
                },
            },
            Self::Gimmighoul(_) => &SpeciesData {
                national_dex_id: 999,
                names: NamesData {
                    names: [
                        "コレクレー",
                        "Gimmighoul",
                        "Mordudor",
                        "Gimmighoul",
                        "Gierspenst",
                        "Gimmighoul",
                        "모으령",
                        "索财灵",
                        "索財靈",
                    ],
                },
            },
            Self::Gholdengo(_) => &SpeciesData {
                national_dex_id: 1000,
                names: NamesData {
                    names: [
                        "サーフゴー",
                        "Gholdengo",
                        "Gromago",
                        "Gholdengo",
                        "Monetigo",
                        "Gholdengo",
                        "타부자고",
                        "赛富豪",
                        "賽富豪",
                    ],
                },
            },
            Self::WoChien(_) => &SpeciesData {
                national_dex_id: 1001,
                names: NamesData {
                    names: [
                        "チオンジェン",
                        "Wo-Chien",
                        "Chongjian",
                        "Wo-Chien",
                        "Chongjian",
                        "Wo-Chien",
                        "총지엔",
                        "古简蜗",
                        "古簡蝸",
                    ],
                },
            },
            Self::ChienPao(_) => &SpeciesData {
                national_dex_id: 1002,
                names: NamesData {
                    names: [
                        "パオジアン",
                        "Chien-Pao",
                        "Baojian",
                        "Chien-Pao",
                        "Baojian",
                        "Chien-Pao",
                        "파오젠",
                        "古剑豹",
                        "古劍豹",
                    ],
                },
            },
            Self::TingLu(_) => &SpeciesData {
                national_dex_id: 1003,
                names: NamesData {
                    names: [
                        "ディンルー",
                        "Ting-Lu",
                        "Dinglu",
                        "Ting-Lu",
                        "Dinglu",
                        "Ting-Lu",
                        "딩루",
                        "古鼎鹿",
                        "古鼎鹿",
                    ],
                },
            },
            Self::ChiYu(_) => &SpeciesData {
                national_dex_id: 1004,
                names: NamesData {
                    names: [
                        "イーユイ",
                        "Chi-Yu",
                        "Yuyu",
                        "Chi-Yu",
                        "Yuyu",
                        "Chi-Yu",
                        "위유이",
                        "古玉鱼",
                        "古玉魚",
                    ],
                },
            },
            Self::RoaringMoon(_) => &SpeciesData {
                national_dex_id: 1005,
                names: NamesData {
                    names: [
                        "トドロクツキ",
                        "Roaring Moon",
                        "Rugit-Lune",
                        "Lunaruggente",
                        "Donnersichel",
                        "Bramaluna",
                        "고동치는달",
                        "轰鸣月",
                        "轟鳴月",
                    ],
                },
            },
            Self::IronValiant(_) => &SpeciesData {
                national_dex_id: 1006,
                names: NamesData {
                    names: [
                        "テツノブジン",
                        "Iron Valiant",
                        "Garde-de-Fer",
                        "Eroeferreo",
                        "Eisenkrieger",
                        "Ferropaladín",
                        "무쇠무인",
                        "铁武者",
                        "鐵武者",
                    ],
                },
            },
            Self::Koraidon(_) => &SpeciesData {
                national_dex_id: 1007,
                names: NamesData {
                    names: [
                        "コライドン",
                        "Koraidon",
                        "Koraidon",
                        "Koraidon",
                        "Koraidon",
                        "Koraidon",
                        "코라이돈",
                        "故勒顿",
                        "故勒頓",
                    ],
                },
            },
            Self::Miraidon(_) => &SpeciesData {
                national_dex_id: 1008,
                names: NamesData {
                    names: [
                        "ミライドン",
                        "Miraidon",
                        "Miraidon",
                        "Miraidon",
                        "Miraidon",
                        "Miraidon",
                        "미라이돈",
                        "密勒顿",
                        "密勒頓",
                    ],
                },
            },
            Self::WalkingWake(_) => &SpeciesData {
                national_dex_id: 1009,
                names: NamesData {
                    names: [
                        "ウネルミナモ",
                        "Walking Wake",
                        "Serpente-Eau",
                        "Acquecrespe",
                        "Windewoge",
                        "Ondulagua",
                        "굽이치는물결",
                        "波荡水",
                        "波盪水",
                    ],
                },
            },
            Self::IronLeaves(_) => &SpeciesData {
                national_dex_id: 1010,
                names: NamesData {
                    names: [
                        "テツノイサハ",
                        "Iron Leaves",
                        "Vert-de-Fer",
                        "Fogliaferrea",
                        "Eisenblatt",
                        "Ferroverdor",
                        "무쇠잎새",
                        "铁斑叶",
                        "鐵斑葉",
                    ],
                },
            },
            Self::Dipplin(_) => &SpeciesData {
                national_dex_id: 1011,
                names: NamesData {
                    names: [
                        "カミッチュ",
                        "Dipplin",
                        "Pomdramour",
                        "Dipplin",
                        "Sirapfel",
                        "Dipplin",
                        "과미르",
                        "裹蜜虫",
                        "裹蜜蟲",
                    ],
                },
            },
            Self::Poltchageist(_) => &SpeciesData {
                national_dex_id: 1012,
                names: NamesData {
                    names: [
                        "チャデス",
                        "Poltchageist",
                        "Poltchageist",
                        "Poltchageist",
                        "Mortcha",
                        "Poltchageist",
                        "차데스",
                        "斯魔茶",
                        "斯魔茶",
                    ],
                },
            },
            Self::Sinistcha(_) => &SpeciesData {
                national_dex_id: 1013,
                names: NamesData {
                    names: [
                        "ヤバソチャ",
                        "Sinistcha",
                        "Théffroyable",
                        "Sinistcha",
                        "Fatalitcha",
                        "Sinistcha",
                        "그우린차",
                        "来悲粗茶",
                        "來悲粗茶",
                    ],
                },
            },
            Self::Okidogi(_) => &SpeciesData {
                national_dex_id: 1014,
                names: NamesData {
                    names: [
                        "イイネイヌ",
                        "Okidogi",
                        "Félicanis",
                        "Okidogi",
                        "Boninu",
                        "Okidogi",
                        "조타구",
                        "够赞狗",
                        "夠讚狗",
                    ],
                },
            },
            Self::Munkidori(_) => &SpeciesData {
                national_dex_id: 1015,
                names: NamesData {
                    names: [
                        "マシマシラ",
                        "Munkidori",
                        "Fortusimia",
                        "Munkidori",
                        "Benesaru",
                        "Munkidori",
                        "이야후",
                        "愿增猿",
                        "願增猿",
                    ],
                },
            },
            Self::Fezandipiti(_) => &SpeciesData {
                national_dex_id: 1016,
                names: NamesData {
                    names: [
                        "キチキギス",
                        "Fezandipiti",
                        "Favianos",
                        "Fezandipiti",
                        "Beatori",
                        "Fezandipiti",
                        "기로치",
                        "吉雉鸡",
                        "吉雉雞",
                    ],
                },
            },
            Self::Ogerpon(_) => &SpeciesData {
                national_dex_id: 1017,
                names: NamesData {
                    names: [
                        "オーガポン",
                        "Ogerpon",
                        "Ogerpon",
                        "Ogerpon",
                        "Ogerpon",
                        "Ogerpon",
                        "오거폰",
                        "厄诡椪",
                        "厄鬼椪",
                    ],
                },
            },
        }
    }
    pub(crate) fn form_data(&self) -> &'static FormData {
        match self {
            Self::Bulbasaur(form) => form.data(),
            Self::Ivysaur(form) => form.data(),
            Self::Venusaur(form) => form.data(),
            Self::Charmander(form) => form.data(),
            Self::Charmeleon(form) => form.data(),
            Self::Charizard(form) => form.data(),
            Self::Squirtle(form) => form.data(),
            Self::Wartortle(form) => form.data(),
            Self::Blastoise(form) => form.data(),
            Self::Caterpie(form) => form.data(),
            Self::Metapod(form) => form.data(),
            Self::Butterfree(form) => form.data(),
            Self::Weedle(form) => form.data(),
            Self::Kakuna(form) => form.data(),
            Self::Beedrill(form) => form.data(),
            Self::Pidgey(form) => form.data(),
            Self::Pidgeotto(form) => form.data(),
            Self::Pidgeot(form) => form.data(),
            Self::Rattata(form) => form.data(),
            Self::Raticate(form) => form.data(),
            Self::Spearow(form) => form.data(),
            Self::Fearow(form) => form.data(),
            Self::Ekans(form) => form.data(),
            Self::Arbok(form) => form.data(),
            Self::Pikachu(form) => form.data(),
            Self::Raichu(form) => form.data(),
            Self::Sandshrew(form) => form.data(),
            Self::Sandslash(form) => form.data(),
            Self::NidoranFemale(form) => form.data(),
            Self::Nidorina(form) => form.data(),
            Self::Nidoqueen(form) => form.data(),
            Self::NidoranMale(form) => form.data(),
            Self::Nidorino(form) => form.data(),
            Self::Nidoking(form) => form.data(),
            Self::Clefairy(form) => form.data(),
            Self::Clefable(form) => form.data(),
            Self::Vulpix(form) => form.data(),
            Self::Ninetales(form) => form.data(),
            Self::Jigglypuff(form) => form.data(),
            Self::Wigglytuff(form) => form.data(),
            Self::Zubat(form) => form.data(),
            Self::Golbat(form) => form.data(),
            Self::Oddish(form) => form.data(),
            Self::Gloom(form) => form.data(),
            Self::Vileplume(form) => form.data(),
            Self::Paras(form) => form.data(),
            Self::Parasect(form) => form.data(),
            Self::Venonat(form) => form.data(),
            Self::Venomoth(form) => form.data(),
            Self::Diglett(form) => form.data(),
            Self::Dugtrio(form) => form.data(),
            Self::Meowth(form) => form.data(),
            Self::Persian(form) => form.data(),
            Self::Psyduck(form) => form.data(),
            Self::Golduck(form) => form.data(),
            Self::Mankey(form) => form.data(),
            Self::Primeape(form) => form.data(),
            Self::Growlithe(form) => form.data(),
            Self::Arcanine(form) => form.data(),
            Self::Poliwag(form) => form.data(),
            Self::Poliwhirl(form) => form.data(),
            Self::Poliwrath(form) => form.data(),
            Self::Abra(form) => form.data(),
            Self::Kadabra(form) => form.data(),
            Self::Alakazam(form) => form.data(),
            Self::Machop(form) => form.data(),
            Self::Machoke(form) => form.data(),
            Self::Machamp(form) => form.data(),
            Self::Bellsprout(form) => form.data(),
            Self::Weepinbell(form) => form.data(),
            Self::Victreebel(form) => form.data(),
            Self::Tentacool(form) => form.data(),
            Self::Tentacruel(form) => form.data(),
            Self::Geodude(form) => form.data(),
            Self::Graveler(form) => form.data(),
            Self::Golem(form) => form.data(),
            Self::Ponyta(form) => form.data(),
            Self::Rapidash(form) => form.data(),
            Self::Slowpoke(form) => form.data(),
            Self::Slowbro(form) => form.data(),
            Self::Magnemite(form) => form.data(),
            Self::Magneton(form) => form.data(),
            Self::Farfetchd(form) => form.data(),
            Self::Doduo(form) => form.data(),
            Self::Dodrio(form) => form.data(),
            Self::Seel(form) => form.data(),
            Self::Dewgong(form) => form.data(),
            Self::Grimer(form) => form.data(),
            Self::Muk(form) => form.data(),
            Self::Shellder(form) => form.data(),
            Self::Cloyster(form) => form.data(),
            Self::Gastly(form) => form.data(),
            Self::Haunter(form) => form.data(),
            Self::Gengar(form) => form.data(),
            Self::Onix(form) => form.data(),
            Self::Drowzee(form) => form.data(),
            Self::Hypno(form) => form.data(),
            Self::Krabby(form) => form.data(),
            Self::Kingler(form) => form.data(),
            Self::Voltorb(form) => form.data(),
            Self::Electrode(form) => form.data(),
            Self::Exeggcute(form) => form.data(),
            Self::Exeggutor(form) => form.data(),
            Self::Cubone(form) => form.data(),
            Self::Marowak(form) => form.data(),
            Self::Hitmonlee(form) => form.data(),
            Self::Hitmonchan(form) => form.data(),
            Self::Lickitung(form) => form.data(),
            Self::Koffing(form) => form.data(),
            Self::Weezing(form) => form.data(),
            Self::Rhyhorn(form) => form.data(),
            Self::Rhydon(form) => form.data(),
            Self::Chansey(form) => form.data(),
            Self::Tangela(form) => form.data(),
            Self::Kangaskhan(form) => form.data(),
            Self::Horsea(form) => form.data(),
            Self::Seadra(form) => form.data(),
            Self::Goldeen(form) => form.data(),
            Self::Seaking(form) => form.data(),
            Self::Staryu(form) => form.data(),
            Self::Starmie(form) => form.data(),
            Self::MrMime(form) => form.data(),
            Self::Scyther(form) => form.data(),
            Self::Jynx(form) => form.data(),
            Self::Electabuzz(form) => form.data(),
            Self::Magmar(form) => form.data(),
            Self::Pinsir(form) => form.data(),
            Self::Tauros(form) => form.data(),
            Self::Magikarp(form) => form.data(),
            Self::Gyarados(form) => form.data(),
            Self::Lapras(form) => form.data(),
            Self::Ditto(form) => form.data(),
            Self::Eevee(form) => form.data(),
            Self::Vaporeon(form) => form.data(),
            Self::Jolteon(form) => form.data(),
            Self::Flareon(form) => form.data(),
            Self::Porygon(form) => form.data(),
            Self::Omanyte(form) => form.data(),
            Self::Omastar(form) => form.data(),
            Self::Kabuto(form) => form.data(),
            Self::Kabutops(form) => form.data(),
            Self::Aerodactyl(form) => form.data(),
            Self::Snorlax(form) => form.data(),
            Self::Articuno(form) => form.data(),
            Self::Zapdos(form) => form.data(),
            Self::Moltres(form) => form.data(),
            Self::Dratini(form) => form.data(),
            Self::Dragonair(form) => form.data(),
            Self::Dragonite(form) => form.data(),
            Self::Mewtwo(form) => form.data(),
            Self::Mew(form) => form.data(),
            Self::Chikorita(form) => form.data(),
            Self::Bayleef(form) => form.data(),
            Self::Meganium(form) => form.data(),
            Self::Cyndaquil(form) => form.data(),
            Self::Quilava(form) => form.data(),
            Self::Typhlosion(form) => form.data(),
            Self::Totodile(form) => form.data(),
            Self::Croconaw(form) => form.data(),
            Self::Feraligatr(form) => form.data(),
            Self::Sentret(form) => form.data(),
            Self::Furret(form) => form.data(),
            Self::Hoothoot(form) => form.data(),
            Self::Noctowl(form) => form.data(),
            Self::Ledyba(form) => form.data(),
            Self::Ledian(form) => form.data(),
            Self::Spinarak(form) => form.data(),
            Self::Ariados(form) => form.data(),
            Self::Crobat(form) => form.data(),
            Self::Chinchou(form) => form.data(),
            Self::Lanturn(form) => form.data(),
            Self::Pichu(form) => form.data(),
            Self::Cleffa(form) => form.data(),
            Self::Igglybuff(form) => form.data(),
            Self::Togepi(form) => form.data(),
            Self::Togetic(form) => form.data(),
            Self::Natu(form) => form.data(),
            Self::Xatu(form) => form.data(),
            Self::Mareep(form) => form.data(),
            Self::Flaaffy(form) => form.data(),
            Self::Ampharos(form) => form.data(),
            Self::Bellossom(form) => form.data(),
            Self::Marill(form) => form.data(),
            Self::Azumarill(form) => form.data(),
            Self::Sudowoodo(form) => form.data(),
            Self::Politoed(form) => form.data(),
            Self::Hoppip(form) => form.data(),
            Self::Skiploom(form) => form.data(),
            Self::Jumpluff(form) => form.data(),
            Self::Aipom(form) => form.data(),
            Self::Sunkern(form) => form.data(),
            Self::Sunflora(form) => form.data(),
            Self::Yanma(form) => form.data(),
            Self::Wooper(form) => form.data(),
            Self::Quagsire(form) => form.data(),
            Self::Espeon(form) => form.data(),
            Self::Umbreon(form) => form.data(),
            Self::Murkrow(form) => form.data(),
            Self::Slowking(form) => form.data(),
            Self::Misdreavus(form) => form.data(),
            Self::Unown(form) => form.data(),
            Self::Wobbuffet(form) => form.data(),
            Self::Girafarig(form) => form.data(),
            Self::Pineco(form) => form.data(),
            Self::Forretress(form) => form.data(),
            Self::Dunsparce(form) => form.data(),
            Self::Gligar(form) => form.data(),
            Self::Steelix(form) => form.data(),
            Self::Snubbull(form) => form.data(),
            Self::Granbull(form) => form.data(),
            Self::Qwilfish(form) => form.data(),
            Self::Scizor(form) => form.data(),
            Self::Shuckle(form) => form.data(),
            Self::Heracross(form) => form.data(),
            Self::Sneasel(form) => form.data(),
            Self::Teddiursa(form) => form.data(),
            Self::Ursaring(form) => form.data(),
            Self::Slugma(form) => form.data(),
            Self::Magcargo(form) => form.data(),
            Self::Swinub(form) => form.data(),
            Self::Piloswine(form) => form.data(),
            Self::Corsola(form) => form.data(),
            Self::Remoraid(form) => form.data(),
            Self::Octillery(form) => form.data(),
            Self::Delibird(form) => form.data(),
            Self::Mantine(form) => form.data(),
            Self::Skarmory(form) => form.data(),
            Self::Houndour(form) => form.data(),
            Self::Houndoom(form) => form.data(),
            Self::Kingdra(form) => form.data(),
            Self::Phanpy(form) => form.data(),
            Self::Donphan(form) => form.data(),
            Self::Porygon2(form) => form.data(),
            Self::Stantler(form) => form.data(),
            Self::Smeargle(form) => form.data(),
            Self::Tyrogue(form) => form.data(),
            Self::Hitmontop(form) => form.data(),
            Self::Smoochum(form) => form.data(),
            Self::Elekid(form) => form.data(),
            Self::Magby(form) => form.data(),
            Self::Miltank(form) => form.data(),
            Self::Blissey(form) => form.data(),
            Self::Raikou(form) => form.data(),
            Self::Entei(form) => form.data(),
            Self::Suicune(form) => form.data(),
            Self::Larvitar(form) => form.data(),
            Self::Pupitar(form) => form.data(),
            Self::Tyranitar(form) => form.data(),
            Self::Lugia(form) => form.data(),
            Self::HoOh(form) => form.data(),
            Self::Celebi(form) => form.data(),
            Self::Treecko(form) => form.data(),
            Self::Grovyle(form) => form.data(),
            Self::Sceptile(form) => form.data(),
            Self::Torchic(form) => form.data(),
            Self::Combusken(form) => form.data(),
            Self::Blaziken(form) => form.data(),
            Self::Mudkip(form) => form.data(),
            Self::Marshtomp(form) => form.data(),
            Self::Swampert(form) => form.data(),
            Self::Poochyena(form) => form.data(),
            Self::Mightyena(form) => form.data(),
            Self::Zigzagoon(form) => form.data(),
            Self::Linoone(form) => form.data(),
            Self::Wurmple(form) => form.data(),
            Self::Silcoon(form) => form.data(),
            Self::Beautifly(form) => form.data(),
            Self::Cascoon(form) => form.data(),
            Self::Dustox(form) => form.data(),
            Self::Lotad(form) => form.data(),
            Self::Lombre(form) => form.data(),
            Self::Ludicolo(form) => form.data(),
            Self::Seedot(form) => form.data(),
            Self::Nuzleaf(form) => form.data(),
            Self::Shiftry(form) => form.data(),
            Self::Taillow(form) => form.data(),
            Self::Swellow(form) => form.data(),
            Self::Wingull(form) => form.data(),
            Self::Pelipper(form) => form.data(),
            Self::Ralts(form) => form.data(),
            Self::Kirlia(form) => form.data(),
            Self::Gardevoir(form) => form.data(),
            Self::Surskit(form) => form.data(),
            Self::Masquerain(form) => form.data(),
            Self::Shroomish(form) => form.data(),
            Self::Breloom(form) => form.data(),
            Self::Slakoth(form) => form.data(),
            Self::Vigoroth(form) => form.data(),
            Self::Slaking(form) => form.data(),
            Self::Nincada(form) => form.data(),
            Self::Ninjask(form) => form.data(),
            Self::Shedinja(form) => form.data(),
            Self::Whismur(form) => form.data(),
            Self::Loudred(form) => form.data(),
            Self::Exploud(form) => form.data(),
            Self::Makuhita(form) => form.data(),
            Self::Hariyama(form) => form.data(),
            Self::Azurill(form) => form.data(),
            Self::Nosepass(form) => form.data(),
            Self::Skitty(form) => form.data(),
            Self::Delcatty(form) => form.data(),
            Self::Sableye(form) => form.data(),
            Self::Mawile(form) => form.data(),
            Self::Aron(form) => form.data(),
            Self::Lairon(form) => form.data(),
            Self::Aggron(form) => form.data(),
            Self::Meditite(form) => form.data(),
            Self::Medicham(form) => form.data(),
            Self::Electrike(form) => form.data(),
            Self::Manectric(form) => form.data(),
            Self::Plusle(form) => form.data(),
            Self::Minun(form) => form.data(),
            Self::Volbeat(form) => form.data(),
            Self::Illumise(form) => form.data(),
            Self::Roselia(form) => form.data(),
            Self::Gulpin(form) => form.data(),
            Self::Swalot(form) => form.data(),
            Self::Carvanha(form) => form.data(),
            Self::Sharpedo(form) => form.data(),
            Self::Wailmer(form) => form.data(),
            Self::Wailord(form) => form.data(),
            Self::Numel(form) => form.data(),
            Self::Camerupt(form) => form.data(),
            Self::Torkoal(form) => form.data(),
            Self::Spoink(form) => form.data(),
            Self::Grumpig(form) => form.data(),
            Self::Spinda(form) => form.data(),
            Self::Trapinch(form) => form.data(),
            Self::Vibrava(form) => form.data(),
            Self::Flygon(form) => form.data(),
            Self::Cacnea(form) => form.data(),
            Self::Cacturne(form) => form.data(),
            Self::Swablu(form) => form.data(),
            Self::Altaria(form) => form.data(),
            Self::Zangoose(form) => form.data(),
            Self::Seviper(form) => form.data(),
            Self::Lunatone(form) => form.data(),
            Self::Solrock(form) => form.data(),
            Self::Barboach(form) => form.data(),
            Self::Whiscash(form) => form.data(),
            Self::Corphish(form) => form.data(),
            Self::Crawdaunt(form) => form.data(),
            Self::Baltoy(form) => form.data(),
            Self::Claydol(form) => form.data(),
            Self::Lileep(form) => form.data(),
            Self::Cradily(form) => form.data(),
            Self::Anorith(form) => form.data(),
            Self::Armaldo(form) => form.data(),
            Self::Feebas(form) => form.data(),
            Self::Milotic(form) => form.data(),
            Self::Castform(form) => form.data(),
            Self::Kecleon(form) => form.data(),
            Self::Shuppet(form) => form.data(),
            Self::Banette(form) => form.data(),
            Self::Duskull(form) => form.data(),
            Self::Dusclops(form) => form.data(),
            Self::Tropius(form) => form.data(),
            Self::Chimecho(form) => form.data(),
            Self::Absol(form) => form.data(),
            Self::Wynaut(form) => form.data(),
            Self::Snorunt(form) => form.data(),
            Self::Glalie(form) => form.data(),
            Self::Spheal(form) => form.data(),
            Self::Sealeo(form) => form.data(),
            Self::Walrein(form) => form.data(),
            Self::Clamperl(form) => form.data(),
            Self::Huntail(form) => form.data(),
            Self::Gorebyss(form) => form.data(),
            Self::Relicanth(form) => form.data(),
            Self::Luvdisc(form) => form.data(),
            Self::Bagon(form) => form.data(),
            Self::Shelgon(form) => form.data(),
            Self::Salamence(form) => form.data(),
            Self::Beldum(form) => form.data(),
            Self::Metang(form) => form.data(),
            Self::Metagross(form) => form.data(),
            Self::Regirock(form) => form.data(),
            Self::Regice(form) => form.data(),
            Self::Registeel(form) => form.data(),
            Self::Latias(form) => form.data(),
            Self::Latios(form) => form.data(),
            Self::Kyogre(form) => form.data(),
            Self::Groudon(form) => form.data(),
            Self::Rayquaza(form) => form.data(),
            Self::Jirachi(form) => form.data(),
            Self::Deoxys(form) => form.data(),
            Self::Turtwig(form) => form.data(),
            Self::Grotle(form) => form.data(),
            Self::Torterra(form) => form.data(),
            Self::Chimchar(form) => form.data(),
            Self::Monferno(form) => form.data(),
            Self::Infernape(form) => form.data(),
            Self::Piplup(form) => form.data(),
            Self::Prinplup(form) => form.data(),
            Self::Empoleon(form) => form.data(),
            Self::Starly(form) => form.data(),
            Self::Staravia(form) => form.data(),
            Self::Staraptor(form) => form.data(),
            Self::Bidoof(form) => form.data(),
            Self::Bibarel(form) => form.data(),
            Self::Kricketot(form) => form.data(),
            Self::Kricketune(form) => form.data(),
            Self::Shinx(form) => form.data(),
            Self::Luxio(form) => form.data(),
            Self::Luxray(form) => form.data(),
            Self::Budew(form) => form.data(),
            Self::Roserade(form) => form.data(),
            Self::Cranidos(form) => form.data(),
            Self::Rampardos(form) => form.data(),
            Self::Shieldon(form) => form.data(),
            Self::Bastiodon(form) => form.data(),
            Self::Burmy(form) => form.data(),
            Self::Wormadam(form) => form.data(),
            Self::Mothim(form) => form.data(),
            Self::Combee(form) => form.data(),
            Self::Vespiquen(form) => form.data(),
            Self::Pachirisu(form) => form.data(),
            Self::Buizel(form) => form.data(),
            Self::Floatzel(form) => form.data(),
            Self::Cherubi(form) => form.data(),
            Self::Cherrim(form) => form.data(),
            Self::Shellos(form) => form.data(),
            Self::Gastrodon(form) => form.data(),
            Self::Ambipom(form) => form.data(),
            Self::Drifloon(form) => form.data(),
            Self::Drifblim(form) => form.data(),
            Self::Buneary(form) => form.data(),
            Self::Lopunny(form) => form.data(),
            Self::Mismagius(form) => form.data(),
            Self::Honchkrow(form) => form.data(),
            Self::Glameow(form) => form.data(),
            Self::Purugly(form) => form.data(),
            Self::Chingling(form) => form.data(),
            Self::Stunky(form) => form.data(),
            Self::Skuntank(form) => form.data(),
            Self::Bronzor(form) => form.data(),
            Self::Bronzong(form) => form.data(),
            Self::Bonsly(form) => form.data(),
            Self::MimeJr(form) => form.data(),
            Self::Happiny(form) => form.data(),
            Self::Chatot(form) => form.data(),
            Self::Spiritomb(form) => form.data(),
            Self::Gible(form) => form.data(),
            Self::Gabite(form) => form.data(),
            Self::Garchomp(form) => form.data(),
            Self::Munchlax(form) => form.data(),
            Self::Riolu(form) => form.data(),
            Self::Lucario(form) => form.data(),
            Self::Hippopotas(form) => form.data(),
            Self::Hippowdon(form) => form.data(),
            Self::Skorupi(form) => form.data(),
            Self::Drapion(form) => form.data(),
            Self::Croagunk(form) => form.data(),
            Self::Toxicroak(form) => form.data(),
            Self::Carnivine(form) => form.data(),
            Self::Finneon(form) => form.data(),
            Self::Lumineon(form) => form.data(),
            Self::Mantyke(form) => form.data(),
            Self::Snover(form) => form.data(),
            Self::Abomasnow(form) => form.data(),
            Self::Weavile(form) => form.data(),
            Self::Magnezone(form) => form.data(),
            Self::Lickilicky(form) => form.data(),
            Self::Rhyperior(form) => form.data(),
            Self::Tangrowth(form) => form.data(),
            Self::Electivire(form) => form.data(),
            Self::Magmortar(form) => form.data(),
            Self::Togekiss(form) => form.data(),
            Self::Yanmega(form) => form.data(),
            Self::Leafeon(form) => form.data(),
            Self::Glaceon(form) => form.data(),
            Self::Gliscor(form) => form.data(),
            Self::Mamoswine(form) => form.data(),
            Self::PorygonZ(form) => form.data(),
            Self::Gallade(form) => form.data(),
            Self::Probopass(form) => form.data(),
            Self::Dusknoir(form) => form.data(),
            Self::Froslass(form) => form.data(),
            Self::Rotom(form) => form.data(),
            Self::Uxie(form) => form.data(),
            Self::Mesprit(form) => form.data(),
            Self::Azelf(form) => form.data(),
            Self::Dialga(form) => form.data(),
            Self::Palkia(form) => form.data(),
            Self::Heatran(form) => form.data(),
            Self::Regigigas(form) => form.data(),
            Self::Giratina(form) => form.data(),
            Self::Cresselia(form) => form.data(),
            Self::Phione(form) => form.data(),
            Self::Manaphy(form) => form.data(),
            Self::Darkrai(form) => form.data(),
            Self::Shaymin(form) => form.data(),
            Self::Arceus(form) => form.data(),
            Self::Victini(form) => form.data(),
            Self::Snivy(form) => form.data(),
            Self::Servine(form) => form.data(),
            Self::Serperior(form) => form.data(),
            Self::Tepig(form) => form.data(),
            Self::Pignite(form) => form.data(),
            Self::Emboar(form) => form.data(),
            Self::Oshawott(form) => form.data(),
            Self::Dewott(form) => form.data(),
            Self::Samurott(form) => form.data(),
            Self::Patrat(form) => form.data(),
            Self::Watchog(form) => form.data(),
            Self::Lillipup(form) => form.data(),
            Self::Herdier(form) => form.data(),
            Self::Stoutland(form) => form.data(),
            Self::Purrloin(form) => form.data(),
            Self::Liepard(form) => form.data(),
            Self::Pansage(form) => form.data(),
            Self::Simisage(form) => form.data(),
            Self::Pansear(form) => form.data(),
            Self::Simisear(form) => form.data(),
            Self::Panpour(form) => form.data(),
            Self::Simipour(form) => form.data(),
            Self::Munna(form) => form.data(),
            Self::Musharna(form) => form.data(),
            Self::Pidove(form) => form.data(),
            Self::Tranquill(form) => form.data(),
            Self::Unfezant(form) => form.data(),
            Self::Blitzle(form) => form.data(),
            Self::Zebstrika(form) => form.data(),
            Self::Roggenrola(form) => form.data(),
            Self::Boldore(form) => form.data(),
            Self::Gigalith(form) => form.data(),
            Self::Woobat(form) => form.data(),
            Self::Swoobat(form) => form.data(),
            Self::Drilbur(form) => form.data(),
            Self::Excadrill(form) => form.data(),
            Self::Audino(form) => form.data(),
            Self::Timburr(form) => form.data(),
            Self::Gurdurr(form) => form.data(),
            Self::Conkeldurr(form) => form.data(),
            Self::Tympole(form) => form.data(),
            Self::Palpitoad(form) => form.data(),
            Self::Seismitoad(form) => form.data(),
            Self::Throh(form) => form.data(),
            Self::Sawk(form) => form.data(),
            Self::Sewaddle(form) => form.data(),
            Self::Swadloon(form) => form.data(),
            Self::Leavanny(form) => form.data(),
            Self::Venipede(form) => form.data(),
            Self::Whirlipede(form) => form.data(),
            Self::Scolipede(form) => form.data(),
            Self::Cottonee(form) => form.data(),
            Self::Whimsicott(form) => form.data(),
            Self::Petilil(form) => form.data(),
            Self::Lilligant(form) => form.data(),
            Self::Basculin(form) => form.data(),
            Self::Sandile(form) => form.data(),
            Self::Krokorok(form) => form.data(),
            Self::Krookodile(form) => form.data(),
            Self::Darumaka(form) => form.data(),
            Self::Darmanitan(form) => form.data(),
            Self::Maractus(form) => form.data(),
            Self::Dwebble(form) => form.data(),
            Self::Crustle(form) => form.data(),
            Self::Scraggy(form) => form.data(),
            Self::Scrafty(form) => form.data(),
            Self::Sigilyph(form) => form.data(),
            Self::Yamask(form) => form.data(),
            Self::Cofagrigus(form) => form.data(),
            Self::Tirtouga(form) => form.data(),
            Self::Carracosta(form) => form.data(),
            Self::Archen(form) => form.data(),
            Self::Archeops(form) => form.data(),
            Self::Trubbish(form) => form.data(),
            Self::Garbodor(form) => form.data(),
            Self::Zorua(form) => form.data(),
            Self::Zoroark(form) => form.data(),
            Self::Minccino(form) => form.data(),
            Self::Cinccino(form) => form.data(),
            Self::Gothita(form) => form.data(),
            Self::Gothorita(form) => form.data(),
            Self::Gothitelle(form) => form.data(),
            Self::Solosis(form) => form.data(),
            Self::Duosion(form) => form.data(),
            Self::Reuniclus(form) => form.data(),
            Self::Ducklett(form) => form.data(),
            Self::Swanna(form) => form.data(),
            Self::Vanillite(form) => form.data(),
            Self::Vanillish(form) => form.data(),
            Self::Vanilluxe(form) => form.data(),
            Self::Deerling(form) => form.data(),
            Self::Sawsbuck(form) => form.data(),
            Self::Emolga(form) => form.data(),
            Self::Karrablast(form) => form.data(),
            Self::Escavalier(form) => form.data(),
            Self::Foongus(form) => form.data(),
            Self::Amoonguss(form) => form.data(),
            Self::Frillish(form) => form.data(),
            Self::Jellicent(form) => form.data(),
            Self::Alomomola(form) => form.data(),
            Self::Joltik(form) => form.data(),
            Self::Galvantula(form) => form.data(),
            Self::Ferroseed(form) => form.data(),
            Self::Ferrothorn(form) => form.data(),
            Self::Klink(form) => form.data(),
            Self::Klang(form) => form.data(),
            Self::Klinklang(form) => form.data(),
            Self::Tynamo(form) => form.data(),
            Self::Eelektrik(form) => form.data(),
            Self::Eelektross(form) => form.data(),
            Self::Elgyem(form) => form.data(),
            Self::Beheeyem(form) => form.data(),
            Self::Litwick(form) => form.data(),
            Self::Lampent(form) => form.data(),
            Self::Chandelure(form) => form.data(),
            Self::Axew(form) => form.data(),
            Self::Fraxure(form) => form.data(),
            Self::Haxorus(form) => form.data(),
            Self::Cubchoo(form) => form.data(),
            Self::Beartic(form) => form.data(),
            Self::Cryogonal(form) => form.data(),
            Self::Shelmet(form) => form.data(),
            Self::Accelgor(form) => form.data(),
            Self::Stunfisk(form) => form.data(),
            Self::Mienfoo(form) => form.data(),
            Self::Mienshao(form) => form.data(),
            Self::Druddigon(form) => form.data(),
            Self::Golett(form) => form.data(),
            Self::Golurk(form) => form.data(),
            Self::Pawniard(form) => form.data(),
            Self::Bisharp(form) => form.data(),
            Self::Bouffalant(form) => form.data(),
            Self::Rufflet(form) => form.data(),
            Self::Braviary(form) => form.data(),
            Self::Vullaby(form) => form.data(),
            Self::Mandibuzz(form) => form.data(),
            Self::Heatmor(form) => form.data(),
            Self::Durant(form) => form.data(),
            Self::Deino(form) => form.data(),
            Self::Zweilous(form) => form.data(),
            Self::Hydreigon(form) => form.data(),
            Self::Larvesta(form) => form.data(),
            Self::Volcarona(form) => form.data(),
            Self::Cobalion(form) => form.data(),
            Self::Terrakion(form) => form.data(),
            Self::Virizion(form) => form.data(),
            Self::Tornadus(form) => form.data(),
            Self::Thundurus(form) => form.data(),
            Self::Reshiram(form) => form.data(),
            Self::Zekrom(form) => form.data(),
            Self::Landorus(form) => form.data(),
            Self::Kyurem(form) => form.data(),
            Self::Keldeo(form) => form.data(),
            Self::Meloetta(form) => form.data(),
            Self::Genesect(form) => form.data(),
            Self::Chespin(form) => form.data(),
            Self::Quilladin(form) => form.data(),
            Self::Chesnaught(form) => form.data(),
            Self::Fennekin(form) => form.data(),
            Self::Braixen(form) => form.data(),
            Self::Delphox(form) => form.data(),
            Self::Froakie(form) => form.data(),
            Self::Frogadier(form) => form.data(),
            Self::Greninja(form) => form.data(),
            Self::Bunnelby(form) => form.data(),
            Self::Diggersby(form) => form.data(),
            Self::Fletchling(form) => form.data(),
            Self::Fletchinder(form) => form.data(),
            Self::Talonflame(form) => form.data(),
            Self::Scatterbug(form) => form.data(),
            Self::Spewpa(form) => form.data(),
            Self::Vivillon(form) => form.data(),
            Self::Litleo(form) => form.data(),
            Self::Pyroar(form) => form.data(),
            Self::Flabebe(form) => form.data(),
            Self::Floette(form) => form.data(),
            Self::Florges(form) => form.data(),
            Self::Skiddo(form) => form.data(),
            Self::Gogoat(form) => form.data(),
            Self::Pancham(form) => form.data(),
            Self::Pangoro(form) => form.data(),
            Self::Furfrou(form) => form.data(),
            Self::Espurr(form) => form.data(),
            Self::Meowstic(form) => form.data(),
            Self::Honedge(form) => form.data(),
            Self::Doublade(form) => form.data(),
            Self::Aegislash(form) => form.data(),
            Self::Spritzee(form) => form.data(),
            Self::Aromatisse(form) => form.data(),
            Self::Swirlix(form) => form.data(),
            Self::Slurpuff(form) => form.data(),
            Self::Inkay(form) => form.data(),
            Self::Malamar(form) => form.data(),
            Self::Binacle(form) => form.data(),
            Self::Barbaracle(form) => form.data(),
            Self::Skrelp(form) => form.data(),
            Self::Dragalge(form) => form.data(),
            Self::Clauncher(form) => form.data(),
            Self::Clawitzer(form) => form.data(),
            Self::Helioptile(form) => form.data(),
            Self::Heliolisk(form) => form.data(),
            Self::Tyrunt(form) => form.data(),
            Self::Tyrantrum(form) => form.data(),
            Self::Amaura(form) => form.data(),
            Self::Aurorus(form) => form.data(),
            Self::Sylveon(form) => form.data(),
            Self::Hawlucha(form) => form.data(),
            Self::Dedenne(form) => form.data(),
            Self::Carbink(form) => form.data(),
            Self::Goomy(form) => form.data(),
            Self::Sliggoo(form) => form.data(),
            Self::Goodra(form) => form.data(),
            Self::Klefki(form) => form.data(),
            Self::Phantump(form) => form.data(),
            Self::Trevenant(form) => form.data(),
            Self::Pumpkaboo(form) => form.data(),
            Self::Gourgeist(form) => form.data(),
            Self::Bergmite(form) => form.data(),
            Self::Avalugg(form) => form.data(),
            Self::Noibat(form) => form.data(),
            Self::Noivern(form) => form.data(),
            Self::Xerneas(form) => form.data(),
            Self::Yveltal(form) => form.data(),
            Self::Zygarde(form) => form.data(),
            Self::Diancie(form) => form.data(),
            Self::Hoopa(form) => form.data(),
            Self::Volcanion(form) => form.data(),
            Self::Rowlet(form) => form.data(),
            Self::Dartrix(form) => form.data(),
            Self::Decidueye(form) => form.data(),
            Self::Litten(form) => form.data(),
            Self::Torracat(form) => form.data(),
            Self::Incineroar(form) => form.data(),
            Self::Popplio(form) => form.data(),
            Self::Brionne(form) => form.data(),
            Self::Primarina(form) => form.data(),
            Self::Pikipek(form) => form.data(),
            Self::Trumbeak(form) => form.data(),
            Self::Toucannon(form) => form.data(),
            Self::Yungoos(form) => form.data(),
            Self::Gumshoos(form) => form.data(),
            Self::Grubbin(form) => form.data(),
            Self::Charjabug(form) => form.data(),
            Self::Vikavolt(form) => form.data(),
            Self::Crabrawler(form) => form.data(),
            Self::Crabominable(form) => form.data(),
            Self::Oricorio(form) => form.data(),
            Self::Cutiefly(form) => form.data(),
            Self::Ribombee(form) => form.data(),
            Self::Rockruff(form) => form.data(),
            Self::Lycanroc(form) => form.data(),
            Self::Wishiwashi(form) => form.data(),
            Self::Mareanie(form) => form.data(),
            Self::Toxapex(form) => form.data(),
            Self::Mudbray(form) => form.data(),
            Self::Mudsdale(form) => form.data(),
            Self::Dewpider(form) => form.data(),
            Self::Araquanid(form) => form.data(),
            Self::Fomantis(form) => form.data(),
            Self::Lurantis(form) => form.data(),
            Self::Morelull(form) => form.data(),
            Self::Shiinotic(form) => form.data(),
            Self::Salandit(form) => form.data(),
            Self::Salazzle(form) => form.data(),
            Self::Stufful(form) => form.data(),
            Self::Bewear(form) => form.data(),
            Self::Bounsweet(form) => form.data(),
            Self::Steenee(form) => form.data(),
            Self::Tsareena(form) => form.data(),
            Self::Comfey(form) => form.data(),
            Self::Oranguru(form) => form.data(),
            Self::Passimian(form) => form.data(),
            Self::Wimpod(form) => form.data(),
            Self::Golisopod(form) => form.data(),
            Self::Sandygast(form) => form.data(),
            Self::Palossand(form) => form.data(),
            Self::Pyukumuku(form) => form.data(),
            Self::TypeNull(form) => form.data(),
            Self::Silvally(form) => form.data(),
            Self::Minior(form) => form.data(),
            Self::Komala(form) => form.data(),
            Self::Turtonator(form) => form.data(),
            Self::Togedemaru(form) => form.data(),
            Self::Mimikyu(form) => form.data(),
            Self::Bruxish(form) => form.data(),
            Self::Drampa(form) => form.data(),
            Self::Dhelmise(form) => form.data(),
            Self::Jangmoo(form) => form.data(),
            Self::Hakamoo(form) => form.data(),
            Self::Kommoo(form) => form.data(),
            Self::TapuKoko(form) => form.data(),
            Self::TapuLele(form) => form.data(),
            Self::TapuBulu(form) => form.data(),
            Self::TapuFini(form) => form.data(),
            Self::Cosmog(form) => form.data(),
            Self::Cosmoem(form) => form.data(),
            Self::Solgaleo(form) => form.data(),
            Self::Lunala(form) => form.data(),
            Self::Nihilego(form) => form.data(),
            Self::Buzzwole(form) => form.data(),
            Self::Pheromosa(form) => form.data(),
            Self::Xurkitree(form) => form.data(),
            Self::Celesteela(form) => form.data(),
            Self::Kartana(form) => form.data(),
            Self::Guzzlord(form) => form.data(),
            Self::Necrozma(form) => form.data(),
            Self::Magearna(form) => form.data(),
            Self::Marshadow(form) => form.data(),
            Self::Poipole(form) => form.data(),
            Self::Naganadel(form) => form.data(),
            Self::Stakataka(form) => form.data(),
            Self::Blacephalon(form) => form.data(),
            Self::Zeraora(form) => form.data(),
            Self::Meltan(form) => form.data(),
            Self::Melmetal(form) => form.data(),
            Self::Grookey(form) => form.data(),
            Self::Thwackey(form) => form.data(),
            Self::Rillaboom(form) => form.data(),
            Self::Scorbunny(form) => form.data(),
            Self::Raboot(form) => form.data(),
            Self::Cinderace(form) => form.data(),
            Self::Sobble(form) => form.data(),
            Self::Drizzile(form) => form.data(),
            Self::Inteleon(form) => form.data(),
            Self::Skwovet(form) => form.data(),
            Self::Greedent(form) => form.data(),
            Self::Rookidee(form) => form.data(),
            Self::Corvisquire(form) => form.data(),
            Self::Corviknight(form) => form.data(),
            Self::Blipbug(form) => form.data(),
            Self::Dottler(form) => form.data(),
            Self::Orbeetle(form) => form.data(),
            Self::Nickit(form) => form.data(),
            Self::Thievul(form) => form.data(),
            Self::Gossifleur(form) => form.data(),
            Self::Eldegoss(form) => form.data(),
            Self::Wooloo(form) => form.data(),
            Self::Dubwool(form) => form.data(),
            Self::Chewtle(form) => form.data(),
            Self::Drednaw(form) => form.data(),
            Self::Yamper(form) => form.data(),
            Self::Boltund(form) => form.data(),
            Self::Rolycoly(form) => form.data(),
            Self::Carkol(form) => form.data(),
            Self::Coalossal(form) => form.data(),
            Self::Applin(form) => form.data(),
            Self::Flapple(form) => form.data(),
            Self::Appletun(form) => form.data(),
            Self::Silicobra(form) => form.data(),
            Self::Sandaconda(form) => form.data(),
            Self::Cramorant(form) => form.data(),
            Self::Arrokuda(form) => form.data(),
            Self::Barraskewda(form) => form.data(),
            Self::Toxel(form) => form.data(),
            Self::Toxtricity(form) => form.data(),
            Self::Sizzlipede(form) => form.data(),
            Self::Centiskorch(form) => form.data(),
            Self::Clobbopus(form) => form.data(),
            Self::Grapploct(form) => form.data(),
            Self::Sinistea(form) => form.data(),
            Self::Polteageist(form) => form.data(),
            Self::Hatenna(form) => form.data(),
            Self::Hattrem(form) => form.data(),
            Self::Hatterene(form) => form.data(),
            Self::Impidimp(form) => form.data(),
            Self::Morgrem(form) => form.data(),
            Self::Grimmsnarl(form) => form.data(),
            Self::Obstagoon(form) => form.data(),
            Self::Perrserker(form) => form.data(),
            Self::Cursola(form) => form.data(),
            Self::Sirfetchd(form) => form.data(),
            Self::MrRime(form) => form.data(),
            Self::Runerigus(form) => form.data(),
            Self::Milcery(form) => form.data(),
            Self::Alcremie(form) => form.data(),
            Self::Falinks(form) => form.data(),
            Self::Pincurchin(form) => form.data(),
            Self::Snom(form) => form.data(),
            Self::Frosmoth(form) => form.data(),
            Self::Stonjourner(form) => form.data(),
            Self::Eiscue(form) => form.data(),
            Self::Indeedee(form) => form.data(),
            Self::Morpeko(form) => form.data(),
            Self::Cufant(form) => form.data(),
            Self::Copperajah(form) => form.data(),
            Self::Dracozolt(form) => form.data(),
            Self::Arctozolt(form) => form.data(),
            Self::Dracovish(form) => form.data(),
            Self::Arctovish(form) => form.data(),
            Self::Duraludon(form) => form.data(),
            Self::Dreepy(form) => form.data(),
            Self::Drakloak(form) => form.data(),
            Self::Dragapult(form) => form.data(),
            Self::Zacian(form) => form.data(),
            Self::Zamazenta(form) => form.data(),
            Self::Eternatus(form) => form.data(),
            Self::Kubfu(form) => form.data(),
            Self::Urshifu(form) => form.data(),
            Self::Zarude(form) => form.data(),
            Self::Regieleki(form) => form.data(),
            Self::Regidrago(form) => form.data(),
            Self::Glastrier(form) => form.data(),
            Self::Spectrier(form) => form.data(),
            Self::Calyrex(form) => form.data(),
            Self::Wyrdeer(form) => form.data(),
            Self::Kleavor(form) => form.data(),
            Self::Ursaluna(form) => form.data(),
            Self::Basculegion(form) => form.data(),
            Self::Sneasler(form) => form.data(),
            Self::Overqwil(form) => form.data(),
            Self::Enamorus(form) => form.data(),
            Self::Sprigatito(form) => form.data(),
            Self::Floragato(form) => form.data(),
            Self::Meowscarada(form) => form.data(),
            Self::Fuecoco(form) => form.data(),
            Self::Crocalor(form) => form.data(),
            Self::Skeledirge(form) => form.data(),
            Self::Quaxly(form) => form.data(),
            Self::Quaxwell(form) => form.data(),
            Self::Quaquaval(form) => form.data(),
            Self::Lechonk(form) => form.data(),
            Self::Oinkologne(form) => form.data(),
            Self::Tarountula(form) => form.data(),
            Self::Spidops(form) => form.data(),
            Self::Nymble(form) => form.data(),
            Self::Lokix(form) => form.data(),
            Self::Pawmi(form) => form.data(),
            Self::Pawmo(form) => form.data(),
            Self::Pawmot(form) => form.data(),
            Self::Tandemaus(form) => form.data(),
            Self::Maushold(form) => form.data(),
            Self::Fidough(form) => form.data(),
            Self::Dachsbun(form) => form.data(),
            Self::Smoliv(form) => form.data(),
            Self::Dolliv(form) => form.data(),
            Self::Arboliva(form) => form.data(),
            Self::Squawkabilly(form) => form.data(),
            Self::Nacli(form) => form.data(),
            Self::Naclstack(form) => form.data(),
            Self::Garganacl(form) => form.data(),
            Self::Charcadet(form) => form.data(),
            Self::Armarouge(form) => form.data(),
            Self::Ceruledge(form) => form.data(),
            Self::Tadbulb(form) => form.data(),
            Self::Bellibolt(form) => form.data(),
            Self::Wattrel(form) => form.data(),
            Self::Kilowattrel(form) => form.data(),
            Self::Maschiff(form) => form.data(),
            Self::Mabosstiff(form) => form.data(),
            Self::Shroodle(form) => form.data(),
            Self::Grafaiai(form) => form.data(),
            Self::Bramblin(form) => form.data(),
            Self::Brambleghast(form) => form.data(),
            Self::Toedscool(form) => form.data(),
            Self::Toedscruel(form) => form.data(),
            Self::Klawf(form) => form.data(),
            Self::Capsakid(form) => form.data(),
            Self::Scovillain(form) => form.data(),
            Self::Rellor(form) => form.data(),
            Self::Rabsca(form) => form.data(),
            Self::Flittle(form) => form.data(),
            Self::Espathra(form) => form.data(),
            Self::Tinkatink(form) => form.data(),
            Self::Tinkatuff(form) => form.data(),
            Self::Tinkaton(form) => form.data(),
            Self::Wiglett(form) => form.data(),
            Self::Wugtrio(form) => form.data(),
            Self::Bombirdier(form) => form.data(),
            Self::Finizen(form) => form.data(),
            Self::Palafin(form) => form.data(),
            Self::Varoom(form) => form.data(),
            Self::Revavroom(form) => form.data(),
            Self::Cyclizar(form) => form.data(),
            Self::Orthworm(form) => form.data(),
            Self::Glimmet(form) => form.data(),
            Self::Glimmora(form) => form.data(),
            Self::Greavard(form) => form.data(),
            Self::Houndstone(form) => form.data(),
            Self::Flamigo(form) => form.data(),
            Self::Cetoddle(form) => form.data(),
            Self::Cetitan(form) => form.data(),
            Self::Veluza(form) => form.data(),
            Self::Dondozo(form) => form.data(),
            Self::Tatsugiri(form) => form.data(),
            Self::Annihilape(form) => form.data(),
            Self::Clodsire(form) => form.data(),
            Self::Farigiraf(form) => form.data(),
            Self::Dudunsparce(form) => form.data(),
            Self::Kingambit(form) => form.data(),
            Self::GreatTusk(form) => form.data(),
            Self::ScreamTail(form) => form.data(),
            Self::BruteBonnet(form) => form.data(),
            Self::FlutterMane(form) => form.data(),
            Self::SlitherWing(form) => form.data(),
            Self::SandyShocks(form) => form.data(),
            Self::IronTreads(form) => form.data(),
            Self::IronBundle(form) => form.data(),
            Self::IronHands(form) => form.data(),
            Self::IronJugulis(form) => form.data(),
            Self::IronMoth(form) => form.data(),
            Self::IronThorns(form) => form.data(),
            Self::Frigibax(form) => form.data(),
            Self::Arctibax(form) => form.data(),
            Self::Baxcalibur(form) => form.data(),
            Self::Gimmighoul(form) => form.data(),
            Self::Gholdengo(form) => form.data(),
            Self::WoChien(form) => form.data(),
            Self::ChienPao(form) => form.data(),
            Self::TingLu(form) => form.data(),
            Self::ChiYu(form) => form.data(),
            Self::RoaringMoon(form) => form.data(),
            Self::IronValiant(form) => form.data(),
            Self::Koraidon(form) => form.data(),
            Self::Miraidon(form) => form.data(),
            Self::WalkingWake(form) => form.data(),
            Self::IronLeaves(form) => form.data(),
            Self::Dipplin(form) => form.data(),
            Self::Poltchageist(form) => form.data(),
            Self::Sinistcha(form) => form.data(),
            Self::Okidogi(form) => form.data(),
            Self::Munkidori(form) => form.data(),
            Self::Fezandipiti(form) => form.data(),
            Self::Ogerpon(form) => form.data(),
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BulbasaurForm {
    Base,
}
impl BulbasaurForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum IvysaurForm {
    Base,
}
impl IvysaurForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum VenusaurForm {
    Base,
    Mega,
    Gigantamax,
}
impl VenusaurForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガフシギバナ",
                        "Mega Venusaur",
                        "Méga-Florizarre",
                        "MegaVenusaur",
                        "Mega-Bisaflor",
                        "Mega-Venusaur",
                        "메가이상해꽃",
                        "超级妙蛙花",
                        "超級妙蛙花",
                    ],
                },
            },
            Self::Gigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CharmanderForm {
    Base,
}
impl CharmanderForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CharmeleonForm {
    Base,
}
impl CharmeleonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CharizardForm {
    Base,
    MegaX,
    MegaY,
    Gigantamax,
}
impl CharizardForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::MegaX => &FormData {
                names: NamesData {
                    names: [
                        "メガリザードンＸ",
                        "Mega Charizard X",
                        "Méga-Dracaufeu X",
                        "MegaCharizard X",
                        "Mega-Glurak X",
                        "Mega-Charizard X",
                        "메가리자몽X",
                        "超级喷火龙Ｘ",
                        "超級噴火龍Ｘ",
                    ],
                },
            },
            Self::MegaY => &FormData {
                names: NamesData {
                    names: [
                        "メガリザードンＹ",
                        "Mega Charizard Y",
                        "Méga-Dracaufeu Y",
                        "MegaCharizard Y",
                        "Mega-Glurak Y",
                        "Mega-Charizard Y",
                        "메가리자몽Y",
                        "超级喷火龙Ｙ",
                        "超級噴火龍Ｙ",
                    ],
                },
            },
            Self::Gigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SquirtleForm {
    Base,
}
impl SquirtleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum WartortleForm {
    Base,
}
impl WartortleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BlastoiseForm {
    Base,
    Mega,
    Gigantamax,
}
impl BlastoiseForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガカメックス",
                        "Mega Blastoise",
                        "Méga-Tortank",
                        "MegaBlastoise",
                        "Mega-Turtok",
                        "Mega-Blastoise",
                        "메가거북왕",
                        "超级水箭龟",
                        "超級水箭龜",
                    ],
                },
            },
            Self::Gigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CaterpieForm {
    Base,
}
impl CaterpieForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MetapodForm {
    Base,
}
impl MetapodForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ButterfreeForm {
    Base,
    Gigantamax,
}
impl ButterfreeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Gigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum WeedleForm {
    Base,
}
impl WeedleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KakunaForm {
    Base,
}
impl KakunaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BeedrillForm {
    Base,
    Mega,
}
impl BeedrillForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガスピアー",
                        "Mega Beedrill",
                        "Méga-Dardargnan",
                        "MegaBeedrill",
                        "Mega-Bibor",
                        "Mega-Beedrill",
                        "메가독침붕",
                        "超级大针蜂",
                        "超級大針蜂",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PidgeyForm {
    Base,
}
impl PidgeyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PidgeottoForm {
    Base,
}
impl PidgeottoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PidgeotForm {
    Base,
    Mega,
}
impl PidgeotForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガピジョット",
                        "Mega Pidgeot",
                        "Méga-Roucarnage",
                        "MegaPidgeot",
                        "Mega-Tauboss",
                        "Mega-Pidgeot",
                        "메가피죤투",
                        "超级大比鸟",
                        "超級大比鳥",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RattataForm {
    Base,
    AlolanForm,
}
impl RattataForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::AlolanForm => &FormData {
                names: NamesData {
                    names: [
                        "アローラのすがた",
                        "Alolan Form",
                        "Forme d’Alola",
                        "Forma di Alola",
                        "Alola-Form",
                        "Forma de Alola",
                        "알로라의 모습",
                        "阿罗拉的样子",
                        "阿羅拉的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RaticateForm {
    Base,
    AlolanForm,
    TotemForm,
}
impl RaticateForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::AlolanForm => &FormData {
                names: NamesData {
                    names: [
                        "アローラのすがた",
                        "Alolan Form",
                        "Forme d’Alola",
                        "Forma di Alola",
                        "Alola-Form",
                        "Forma de Alola",
                        "알로라의 모습",
                        "阿罗拉的样子",
                        "阿羅拉的樣子",
                    ],
                },
            },
            Self::TotemForm => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SpearowForm {
    Base,
}
impl SpearowForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FearowForm {
    Base,
}
impl FearowForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum EkansForm {
    Base,
}
impl EkansForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ArbokForm {
    Base,
}
impl ArbokForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PikachuForm {
    Base,
    PikachuRockStar,
    PikachuBelle,
    PikachuPopStar,
    PikachuPhD,
    PikachuLibre,
    CosplayPikachu,
    OriginalCap,
    HoennCap,
    SinnohCap,
    UnovaCap,
    KalosCap,
    AlolaCap,
    PartnerCap,
    LetsGoPartner,
    WorldCap,
    Gigantamax,
}
impl PikachuForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::PikachuRockStar => &FormData {
                names: NamesData {
                    names: [
                        "ハードロック・ピカチュウ",
                        "Pikachu Rock Star",
                        "Pikachu Rockeur",
                        "Pikachu rockstar",
                        "Rocker-Pikachu",
                        "Pikachu Roquera",
                        "하드록 피카츄",
                        "",
                        "",
                    ],
                },
            },
            Self::PikachuBelle => &FormData {
                names: NamesData {
                    names: [
                        "マダム・ピカチュウ",
                        "Pikachu Belle",
                        "Pikachu Lady",
                        "Pikachu damigella",
                        "Damen-Pikachu",
                        "Pikachu Aristócrata",
                        "마담 피카츄",
                        "",
                        "",
                    ],
                },
            },
            Self::PikachuPopStar => &FormData {
                names: NamesData {
                    names: [
                        "アイドル・ピカチュウ",
                        "Pikachu Pop Star",
                        "Pikachu Star",
                        "Pikachu confetto",
                        "Star-Pikachu",
                        "Pikachu Superstar",
                        "아이돌 피카츄",
                        "",
                        "",
                    ],
                },
            },
            Self::PikachuPhD => &FormData {
                names: NamesData {
                    names: [
                        "ドクター・ピカチュウ",
                        "Pikachu, Ph.D.",
                        "Pikachu Docteur",
                        "Pikachu scienziata",
                        "Professoren-Pikachu",
                        "Pikachu Erudita",
                        "닥터 피카츄",
                        "",
                        "",
                    ],
                },
            },
            Self::PikachuLibre => &FormData {
                names: NamesData {
                    names: [
                        "マスク・ド・ピカチュウ",
                        "Pikachu Libre",
                        "Pikachu Catcheur",
                        "Pikachu wrestler",
                        "Wrestler-Pikachu",
                        "Pikachu Enmascarada",
                        "마스크드 피카츄",
                        "",
                        "",
                    ],
                },
            },
            Self::CosplayPikachu => &FormData {
                names: NamesData {
                    names: [
                        "おきがえピカチュウ",
                        "Cosplay Pikachu",
                        "Pikachu Cosplayeur",
                        "Pikachu Cosplay",
                        "Cosplay-Pikachu",
                        "Pikachu Coqueta",
                        "옷갈아입기 피카츄",
                        "",
                        "",
                    ],
                },
            },
            Self::OriginalCap => &FormData {
                names: NamesData {
                    names: [
                        "オリジナルキャップ",
                        "Original Cap",
                        "Casquette Originale",
                        "Berretto Originale",
                        "Original-Kappe",
                        "Gorra Original",
                        "오리지널캡",
                        "初始帽子",
                        "初始帽子",
                    ],
                },
            },
            Self::HoennCap => &FormData {
                names: NamesData {
                    names: [
                        "ホウエンキャップ",
                        "Hoenn Cap",
                        "Casquette de Hoenn",
                        "Berretto Hoenn",
                        "Hoenn-Kappe",
                        "Gorra Hoenn",
                        "호연캡",
                        "丰缘帽子",
                        "豐緣帽子",
                    ],
                },
            },
            Self::SinnohCap => &FormData {
                names: NamesData {
                    names: [
                        "シンオウキャップ",
                        "Sinnoh Cap",
                        "Casquette de Sinnoh",
                        "Berretto Sinnoh",
                        "Sinnoh-Kappe",
                        "Gorra Sinnoh",
                        "신오캡",
                        "神奥帽子",
                        "神奧帽子",
                    ],
                },
            },
            Self::UnovaCap => &FormData {
                names: NamesData {
                    names: [
                        "イッシュキャップ",
                        "Unova Cap",
                        "Casquette d’Unys",
                        "Berretto Unima",
                        "Einall-Kappe",
                        "Gorra Teselia",
                        "하나캡",
                        "合众帽子",
                        "合眾帽子",
                    ],
                },
            },
            Self::KalosCap => &FormData {
                names: NamesData {
                    names: [
                        "カロスキャップ",
                        "Kalos Cap",
                        "Casquette de Kalos",
                        "Berretto Kalos",
                        "Kalos-Kappe",
                        "Gorra Kalos",
                        "칼로스캡",
                        "卡洛斯帽子",
                        "卡洛斯帽子",
                    ],
                },
            },
            Self::AlolaCap => &FormData {
                names: NamesData {
                    names: [
                        "アローラキャップ",
                        "Alola Cap",
                        "Casquette d’Alola",
                        "Berretto Alola",
                        "Alola-Kappe",
                        "Gorra Alola",
                        "알로라캡",
                        "阿罗拉帽子",
                        "阿羅拉帽子",
                    ],
                },
            },
            Self::PartnerCap => &FormData {
                names: NamesData {
                    names: [
                        "キミにきめたキャップ",
                        "Partner Cap",
                        "Casquette Partenaire",
                        "Berretto Compagni",
                        "Partner-Kappe",
                        "Gorra Compañero",
                        "너로정했다캡",
                        "就决定是你了之帽子",
                        "就決定是你了之帽子",
                    ],
                },
            },
            Self::LetsGoPartner => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::WorldCap => &FormData {
                names: NamesData {
                    names: [
                        "ワールドキャップ",
                        "World Cap",
                        "Casquette Monde",
                        "Berretto Giramondo",
                        "Weltreise-Kappe",
                        "Gorra Trotamundos",
                        "월드캡",
                        "世界帽子",
                        "世界帽子",
                    ],
                },
            },
            Self::Gigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RaichuForm {
    Base,
    AlolanForm,
}
impl RaichuForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::AlolanForm => &FormData {
                names: NamesData {
                    names: [
                        "アローラのすがた",
                        "Alolan Form",
                        "Forme d’Alola",
                        "Forma di Alola",
                        "Alola-Form",
                        "Forma de Alola",
                        "알로라의 모습",
                        "阿罗拉的样子",
                        "阿羅拉的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SandshrewForm {
    Base,
    AlolanForm,
}
impl SandshrewForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::AlolanForm => &FormData {
                names: NamesData {
                    names: [
                        "アローラのすがた",
                        "Alolan Form",
                        "Forme d’Alola",
                        "Forma di Alola",
                        "Alola-Form",
                        "Forma de Alola",
                        "알로라의 모습",
                        "阿罗拉的样子",
                        "阿羅拉的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SandslashForm {
    Base,
    AlolanForm,
}
impl SandslashForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::AlolanForm => &FormData {
                names: NamesData {
                    names: [
                        "アローラのすがた",
                        "Alolan Form",
                        "Forme d’Alola",
                        "Forma di Alola",
                        "Alola-Form",
                        "Forma de Alola",
                        "알로라의 모습",
                        "阿罗拉的样子",
                        "阿羅拉的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum NidoranFemaleForm {
    Base,
}
impl NidoranFemaleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum NidorinaForm {
    Base,
}
impl NidorinaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum NidoqueenForm {
    Base,
}
impl NidoqueenForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum NidoranMaleForm {
    Base,
}
impl NidoranMaleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum NidorinoForm {
    Base,
}
impl NidorinoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum NidokingForm {
    Base,
}
impl NidokingForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ClefairyForm {
    Base,
}
impl ClefairyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ClefableForm {
    Base,
}
impl ClefableForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum VulpixForm {
    Base,
    AlolanForm,
}
impl VulpixForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::AlolanForm => &FormData {
                names: NamesData {
                    names: [
                        "アローラのすがた",
                        "Alolan Form",
                        "Forme d’Alola",
                        "Forma di Alola",
                        "Alola-Form",
                        "Forma de Alola",
                        "알로라의 모습",
                        "阿罗拉的样子",
                        "阿羅拉的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum NinetalesForm {
    Base,
    AlolanForm,
}
impl NinetalesForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::AlolanForm => &FormData {
                names: NamesData {
                    names: [
                        "アローラのすがた",
                        "Alolan Form",
                        "Forme d’Alola",
                        "Forma di Alola",
                        "Alola-Form",
                        "Forma de Alola",
                        "알로라의 모습",
                        "阿罗拉的样子",
                        "阿羅拉的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum JigglypuffForm {
    Base,
}
impl JigglypuffForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum WigglytuffForm {
    Base,
}
impl WigglytuffForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ZubatForm {
    Base,
}
impl ZubatForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GolbatForm {
    Base,
}
impl GolbatForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum OddishForm {
    Base,
}
impl OddishForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GloomForm {
    Base,
}
impl GloomForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum VileplumeForm {
    Base,
}
impl VileplumeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ParasForm {
    Base,
}
impl ParasForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ParasectForm {
    Base,
}
impl ParasectForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum VenonatForm {
    Base,
}
impl VenonatForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum VenomothForm {
    Base,
}
impl VenomothForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DiglettForm {
    Base,
    AlolanForm,
}
impl DiglettForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::AlolanForm => &FormData {
                names: NamesData {
                    names: [
                        "アローラのすがた",
                        "Alolan Form",
                        "Forme d’Alola",
                        "Forma di Alola",
                        "Alola-Form",
                        "Forma de Alola",
                        "알로라의 모습",
                        "阿罗拉的样子",
                        "阿羅拉的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DugtrioForm {
    Base,
    AlolanForm,
}
impl DugtrioForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::AlolanForm => &FormData {
                names: NamesData {
                    names: [
                        "アローラのすがた",
                        "Alolan Form",
                        "Forme d’Alola",
                        "Forma di Alola",
                        "Alola-Form",
                        "Forma de Alola",
                        "알로라의 모습",
                        "阿罗拉的样子",
                        "阿羅拉的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MeowthForm {
    Base,
    AlolanForm,
    GalarianForm,
    Gigantamax,
}
impl MeowthForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::AlolanForm => &FormData {
                names: NamesData {
                    names: [
                        "アローラのすがた",
                        "Alolan Form",
                        "Forme d’Alola",
                        "Forma di Alola",
                        "Alola-Form",
                        "Forma de Alola",
                        "알로라의 모습",
                        "阿罗拉的样子",
                        "阿羅拉的樣子",
                    ],
                },
            },
            Self::GalarianForm => &FormData {
                names: NamesData {
                    names: [
                        "ガラルのすがた",
                        "Galarian Form",
                        "Forme de Galar",
                        "Forma di Galar",
                        "Galar-Form",
                        "Forma de Galar",
                        "가라르의 모습",
                        "伽勒尔的样子",
                        "伽勒爾的樣子",
                    ],
                },
            },
            Self::Gigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PersianForm {
    Base,
    AlolanForm,
}
impl PersianForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::AlolanForm => &FormData {
                names: NamesData {
                    names: [
                        "アローラのすがた",
                        "Alolan Form",
                        "Forme d’Alola",
                        "Forma di Alola",
                        "Alola-Form",
                        "Forma de Alola",
                        "알로라의 모습",
                        "阿罗拉的样子",
                        "阿羅拉的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PsyduckForm {
    Base,
}
impl PsyduckForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GolduckForm {
    Base,
}
impl GolduckForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MankeyForm {
    Base,
}
impl MankeyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PrimeapeForm {
    Base,
}
impl PrimeapeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GrowlitheForm {
    Base,
    HisuianForm,
}
impl GrowlitheForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::HisuianForm => &FormData {
                names: NamesData {
                    names: [
                        "ヒスイのすがた",
                        "Hisuian Form",
                        "Forme de Hisui",
                        "Forma di Hisui",
                        "Hisui-Form",
                        "Forma de Hisui",
                        "히스이의 모습",
                        "洗翠的样子",
                        "洗翠的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ArcanineForm {
    Base,
    HisuianForm,
    LordForm,
}
impl ArcanineForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::HisuianForm => &FormData {
                names: NamesData {
                    names: [
                        "ヒスイのすがた",
                        "Hisuian Form",
                        "Forme de Hisui",
                        "Forma di Hisui",
                        "Hisui-Form",
                        "Forma de Hisui",
                        "히스이의 모습",
                        "洗翠的样子",
                        "洗翠的樣子",
                    ],
                },
            },
            Self::LordForm => &FormData {
                names: NamesData {
                    names: [
                        "キングのすがた",
                        "Lord Form",
                        "Forme de Roi",
                        "Forma Re",
                        "Königsform",
                        "Forma de Señor",
                        "왕의 모습",
                        "王的样子",
                        "王的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PoliwagForm {
    Base,
}
impl PoliwagForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PoliwhirlForm {
    Base,
}
impl PoliwhirlForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PoliwrathForm {
    Base,
}
impl PoliwrathForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum AbraForm {
    Base,
}
impl AbraForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KadabraForm {
    Base,
}
impl KadabraForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum AlakazamForm {
    Base,
    Mega,
}
impl AlakazamForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガフーディン",
                        "Mega Alakazam",
                        "Méga-Alakazam",
                        "MegaAlakazam",
                        "Mega-Simsala",
                        "Mega-Alakazam",
                        "메가후딘",
                        "超级胡地",
                        "超級胡地",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MachopForm {
    Base,
}
impl MachopForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MachokeForm {
    Base,
}
impl MachokeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MachampForm {
    Base,
    Gigantamax,
}
impl MachampForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Gigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BellsproutForm {
    Base,
}
impl BellsproutForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum WeepinbellForm {
    Base,
}
impl WeepinbellForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum VictreebelForm {
    Base,
}
impl VictreebelForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TentacoolForm {
    Base,
}
impl TentacoolForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TentacruelForm {
    Base,
}
impl TentacruelForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GeodudeForm {
    Base,
    AlolanForm,
}
impl GeodudeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::AlolanForm => &FormData {
                names: NamesData {
                    names: [
                        "アローラのすがた",
                        "Alolan Form",
                        "Forme d’Alola",
                        "Forma di Alola",
                        "Alola-Form",
                        "Forma de Alola",
                        "알로라의 모습",
                        "阿罗拉的样子",
                        "阿羅拉的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GravelerForm {
    Base,
    AlolanForm,
}
impl GravelerForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::AlolanForm => &FormData {
                names: NamesData {
                    names: [
                        "アローラのすがた",
                        "Alolan Form",
                        "Forme d’Alola",
                        "Forma di Alola",
                        "Alola-Form",
                        "Forma de Alola",
                        "알로라의 모습",
                        "阿罗拉的样子",
                        "阿羅拉的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GolemForm {
    Base,
    AlolanForm,
}
impl GolemForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::AlolanForm => &FormData {
                names: NamesData {
                    names: [
                        "アローラのすがた",
                        "Alolan Form",
                        "Forme d’Alola",
                        "Forma di Alola",
                        "Alola-Form",
                        "Forma de Alola",
                        "알로라의 모습",
                        "阿罗拉的样子",
                        "阿羅拉的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PonytaForm {
    Base,
    GalarianForm,
}
impl PonytaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::GalarianForm => &FormData {
                names: NamesData {
                    names: [
                        "ガラルのすがた",
                        "Galarian Form",
                        "Forme de Galar",
                        "Forma di Galar",
                        "Galar-Form",
                        "Forma de Galar",
                        "가라르의 모습",
                        "伽勒尔的样子",
                        "伽勒爾的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RapidashForm {
    Base,
    GalarianForm,
}
impl RapidashForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::GalarianForm => &FormData {
                names: NamesData {
                    names: [
                        "ガラルのすがた",
                        "Galarian Form",
                        "Forme de Galar",
                        "Forma di Galar",
                        "Galar-Form",
                        "Forma de Galar",
                        "가라르의 모습",
                        "伽勒尔的样子",
                        "伽勒爾的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SlowpokeForm {
    Base,
    GalarianForm,
}
impl SlowpokeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::GalarianForm => &FormData {
                names: NamesData {
                    names: [
                        "ガラルのすがた",
                        "Galarian Form",
                        "Forme de Galar",
                        "Forma di Galar",
                        "Galar-Form",
                        "Forma de Galar",
                        "가라르의 모습",
                        "伽勒尔的样子",
                        "伽勒爾的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SlowbroForm {
    Base,
    Mega,
    GalarianForm,
}
impl SlowbroForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガヤドラン",
                        "Mega Slowbro",
                        "Méga-Flagadoss",
                        "MegaSlowbro",
                        "Mega-Lahmus",
                        "Mega-Slowbro",
                        "메가야도란",
                        "超级呆壳兽",
                        "超級呆殼獸",
                    ],
                },
            },
            Self::GalarianForm => &FormData {
                names: NamesData {
                    names: [
                        "ガラルのすがた",
                        "Galarian Form",
                        "Forme de Galar",
                        "Forma di Galar",
                        "Galar-Form",
                        "Forma de Galar",
                        "가라르의 모습",
                        "伽勒尔的样子",
                        "伽勒爾的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MagnemiteForm {
    Base,
}
impl MagnemiteForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MagnetonForm {
    Base,
}
impl MagnetonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FarfetchdForm {
    Base,
    GalarianForm,
}
impl FarfetchdForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::GalarianForm => &FormData {
                names: NamesData {
                    names: [
                        "ガラルのすがた",
                        "Galarian Form",
                        "Forme de Galar",
                        "Forma di Galar",
                        "Galar-Form",
                        "Forma de Galar",
                        "가라르의 모습",
                        "伽勒尔的样子",
                        "伽勒爾的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DoduoForm {
    Base,
}
impl DoduoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DodrioForm {
    Base,
}
impl DodrioForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SeelForm {
    Base,
}
impl SeelForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DewgongForm {
    Base,
}
impl DewgongForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GrimerForm {
    Base,
    AlolanForm,
}
impl GrimerForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::AlolanForm => &FormData {
                names: NamesData {
                    names: [
                        "アローラのすがた",
                        "Alolan Form",
                        "Forme d’Alola",
                        "Forma di Alola",
                        "Alola-Form",
                        "Forma de Alola",
                        "알로라의 모습",
                        "阿罗拉的样子",
                        "阿羅拉的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MukForm {
    Base,
    AlolanForm,
}
impl MukForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::AlolanForm => &FormData {
                names: NamesData {
                    names: [
                        "アローラのすがた",
                        "Alolan Form",
                        "Forme d’Alola",
                        "Forma di Alola",
                        "Alola-Form",
                        "Forma de Alola",
                        "알로라의 모습",
                        "阿罗拉的样子",
                        "阿羅拉的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ShellderForm {
    Base,
}
impl ShellderForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CloysterForm {
    Base,
}
impl CloysterForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GastlyForm {
    Base,
}
impl GastlyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HaunterForm {
    Base,
}
impl HaunterForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GengarForm {
    Base,
    Mega,
    Gigantamax,
}
impl GengarForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガゲンガー",
                        "Mega Gengar",
                        "Méga-Ectoplasma",
                        "MegaGengar",
                        "Mega-Gengar",
                        "Mega-Gengar",
                        "메가팬텀",
                        "超级耿鬼",
                        "超級耿鬼",
                    ],
                },
            },
            Self::Gigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum OnixForm {
    Base,
}
impl OnixForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DrowzeeForm {
    Base,
}
impl DrowzeeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HypnoForm {
    Base,
}
impl HypnoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KrabbyForm {
    Base,
}
impl KrabbyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KinglerForm {
    Base,
    Gigantamax,
}
impl KinglerForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Gigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum VoltorbForm {
    Base,
    HisuianForm,
}
impl VoltorbForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::HisuianForm => &FormData {
                names: NamesData {
                    names: [
                        "ヒスイのすがた",
                        "Hisuian Form",
                        "Forme de Hisui",
                        "Forma di Hisui",
                        "Hisui-Form",
                        "Forma de Hisui",
                        "히스이의 모습",
                        "洗翠的样子",
                        "洗翠的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ElectrodeForm {
    Base,
    HisuianForm,
    LordForm,
}
impl ElectrodeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::HisuianForm => &FormData {
                names: NamesData {
                    names: [
                        "ヒスイのすがた",
                        "Hisuian Form",
                        "Forme de Hisui",
                        "Forma di Hisui",
                        "Hisui-Form",
                        "Forma de Hisui",
                        "히스이의 모습",
                        "洗翠的样子",
                        "洗翠的樣子",
                    ],
                },
            },
            Self::LordForm => &FormData {
                names: NamesData {
                    names: [
                        "キングのすがた",
                        "Lord Form",
                        "Forme de Roi",
                        "Forma Re",
                        "Königsform",
                        "Forma de Señor",
                        "왕의 모습",
                        "王的样子",
                        "王的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ExeggcuteForm {
    Base,
}
impl ExeggcuteForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ExeggutorForm {
    Base,
    AlolanForm,
}
impl ExeggutorForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::AlolanForm => &FormData {
                names: NamesData {
                    names: [
                        "アローラのすがた",
                        "Alolan Form",
                        "Forme d’Alola",
                        "Forma di Alola",
                        "Alola-Form",
                        "Forma de Alola",
                        "알로라의 모습",
                        "阿罗拉的样子",
                        "阿羅拉的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CuboneForm {
    Base,
}
impl CuboneForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MarowakForm {
    Base,
    AlolanForm,
    TotemForm,
}
impl MarowakForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::AlolanForm => &FormData {
                names: NamesData {
                    names: [
                        "アローラのすがた",
                        "Alolan Form",
                        "Forme d’Alola",
                        "Forma di Alola",
                        "Alola-Form",
                        "Forma de Alola",
                        "알로라의 모습",
                        "阿罗拉的样子",
                        "阿羅拉的樣子",
                    ],
                },
            },
            Self::TotemForm => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "알로라의 모습", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HitmonleeForm {
    Base,
}
impl HitmonleeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HitmonchanForm {
    Base,
}
impl HitmonchanForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LickitungForm {
    Base,
}
impl LickitungForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KoffingForm {
    Base,
}
impl KoffingForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum WeezingForm {
    Base,
    GalarianForm,
}
impl WeezingForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::GalarianForm => &FormData {
                names: NamesData {
                    names: [
                        "ガラルのすがた",
                        "Galarian Form",
                        "Forme de Galar",
                        "Forma di Galar",
                        "Galar-Form",
                        "Forma de Galar",
                        "가라르의 모습",
                        "伽勒尔的样子",
                        "伽勒爾的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RhyhornForm {
    Base,
}
impl RhyhornForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RhydonForm {
    Base,
}
impl RhydonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ChanseyForm {
    Base,
}
impl ChanseyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TangelaForm {
    Base,
}
impl TangelaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KangaskhanForm {
    Base,
    Mega,
}
impl KangaskhanForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガガルーラ",
                        "Mega Kangaskhan",
                        "Méga-Kangourex",
                        "MegaKangaskhan",
                        "Mega-Kangama",
                        "Mega-Kangaskhan",
                        "메가캥카",
                        "超级袋兽",
                        "超級袋獸",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HorseaForm {
    Base,
}
impl HorseaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SeadraForm {
    Base,
}
impl SeadraForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GoldeenForm {
    Base,
}
impl GoldeenForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SeakingForm {
    Base,
}
impl SeakingForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum StaryuForm {
    Base,
}
impl StaryuForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum StarmieForm {
    Base,
}
impl StarmieForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MrMimeForm {
    Base,
    GalarianForm,
}
impl MrMimeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::GalarianForm => &FormData {
                names: NamesData {
                    names: [
                        "ガラルのすがた",
                        "Galarian Form",
                        "Forme de Galar",
                        "Forma di Galar",
                        "Galar-Form",
                        "Forma de Galar",
                        "가라르의 모습",
                        "伽勒尔的样子",
                        "伽勒爾的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ScytherForm {
    Base,
}
impl ScytherForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum JynxForm {
    Base,
}
impl JynxForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ElectabuzzForm {
    Base,
}
impl ElectabuzzForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MagmarForm {
    Base,
}
impl MagmarForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PinsirForm {
    Base,
    Mega,
}
impl PinsirForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガカイロス",
                        "Mega Pinsir",
                        "Méga-Scarabrute",
                        "MegaPinsir",
                        "Mega-Pinsir",
                        "Mega-Pinsir",
                        "메가쁘사이저",
                        "超级凯罗斯",
                        "超級凱羅斯",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TaurosForm {
    Base,
    PaldeanFormCombatBreed,
    PaldeanFormBlazeBreed,
    PaldeanFormAquaBreed,
}
impl TaurosForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::PaldeanFormCombatBreed => &FormData {
                names: NamesData {
                    names: [
                        "パルデアのすがた・コンバットしゅ",
                        "Paldean Form / Combat Breed",
                        "Forme de Paldea / Race Combative",
                        "Forma di Paldea/Varietà Combattiva",
                        "Paldea-Form/Gefechtvariante",
                        "Forma de Paldea/Variedad Combatiente",
                        "팔데아의 모습/컴뱃종",
                        "帕底亚的样子／斗战种",
                        "帕底亞的樣子／鬥戰種",
                    ],
                },
            },
            Self::PaldeanFormBlazeBreed => &FormData {
                names: NamesData {
                    names: [
                        "パルデアのすがた・ブレイズしゅ",
                        "Paldean Form / Blaze Breed",
                        "Forme de Paldea / Race Flamboyante",
                        "Forma di Paldea/Varietà Infuocata",
                        "Paldea-Form/Flammenvariante",
                        "Forma de Paldea/Variedad Ardiente",
                        "팔데아의 모습/블레이즈종",
                        "帕底亚的样子／火炽种",
                        "帕底亞的樣子／火熾種",
                    ],
                },
            },
            Self::PaldeanFormAquaBreed => &FormData {
                names: NamesData {
                    names: [
                        "パルデアのすがた・ウォーターしゅ",
                        "Paldean Form / Aqua Breed",
                        "Forme de Paldea / Race Aquatique",
                        "Forma di Paldea/Varietà Acquatica",
                        "Paldea-Form/Flutenvariante",
                        "Forma de Paldea/Variedad Acuática",
                        "팔데아의 모습/워터종",
                        "帕底亚的样子／水澜种",
                        "帕底亞的樣子／水瀾種",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MagikarpForm {
    Base,
}
impl MagikarpForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GyaradosForm {
    Base,
    Mega,
}
impl GyaradosForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガギャラドス",
                        "Mega Gyarados",
                        "Méga-Léviator",
                        "MegaGyarados",
                        "Mega-Garados",
                        "Mega-Gyarados",
                        "메가갸라도스",
                        "超级暴鲤龙",
                        "超級暴鯉龍",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LaprasForm {
    Base,
    Gigantamax,
}
impl LaprasForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Gigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DittoForm {
    Base,
}
impl DittoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum EeveeForm {
    Base,
    LetsGoPartner,
    Gigantamax,
}
impl EeveeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::LetsGoPartner => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Gigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum VaporeonForm {
    Base,
}
impl VaporeonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum JolteonForm {
    Base,
}
impl JolteonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FlareonForm {
    Base,
}
impl FlareonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PorygonForm {
    Base,
}
impl PorygonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum OmanyteForm {
    Base,
}
impl OmanyteForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum OmastarForm {
    Base,
}
impl OmastarForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KabutoForm {
    Base,
}
impl KabutoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KabutopsForm {
    Base,
}
impl KabutopsForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum AerodactylForm {
    Base,
    Mega,
}
impl AerodactylForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガプテラ",
                        "Mega Aerodactyl",
                        "Méga-Ptéra",
                        "MegaAerodactyl",
                        "Mega-Aerodactyl",
                        "Mega-Aerodactyl",
                        "메가프테라",
                        "超级化石翼龙",
                        "超級化石翼龍",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SnorlaxForm {
    Base,
    Gigantamax,
}
impl SnorlaxForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Gigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ArticunoForm {
    Base,
    GalarianForm,
}
impl ArticunoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::GalarianForm => &FormData {
                names: NamesData {
                    names: [
                        "ガラルのすがた",
                        "Galarian Form",
                        "Forme de Galar",
                        "Forma di Galar",
                        "Galar-Form",
                        "Forma de Galar",
                        "가라르의 모습",
                        "伽勒尔的样子",
                        "伽勒爾的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ZapdosForm {
    Base,
    GalarianForm,
}
impl ZapdosForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::GalarianForm => &FormData {
                names: NamesData {
                    names: [
                        "ガラルのすがた",
                        "Galarian Form",
                        "Forme de Galar",
                        "Forma di Galar",
                        "Galar-Form",
                        "Forma de Galar",
                        "가라르의 모습",
                        "伽勒尔的样子",
                        "伽勒爾的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MoltresForm {
    Base,
    GalarianForm,
}
impl MoltresForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::GalarianForm => &FormData {
                names: NamesData {
                    names: [
                        "ガラルのすがた",
                        "Galarian Form",
                        "Forme de Galar",
                        "Forma di Galar",
                        "Galar-Form",
                        "Forma de Galar",
                        "가라르의 모습",
                        "伽勒尔的样子",
                        "伽勒爾的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DratiniForm {
    Base,
}
impl DratiniForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DragonairForm {
    Base,
}
impl DragonairForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DragoniteForm {
    Base,
}
impl DragoniteForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MewtwoForm {
    Base,
    MegaX,
    MegaY,
}
impl MewtwoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::MegaX => &FormData {
                names: NamesData {
                    names: [
                        "メガミュウツーＸ",
                        "Mega Mewtwo X",
                        "Méga-Mewtwo X",
                        "MegaMewtwo X",
                        "Mega-Mewtu X",
                        "Mega-Mewtwo X",
                        "메가뮤츠X",
                        "超级超梦Ｘ",
                        "超級超夢Ｘ",
                    ],
                },
            },
            Self::MegaY => &FormData {
                names: NamesData {
                    names: [
                        "メガミュウツーＹ",
                        "Mega Mewtwo Y",
                        "Méga-Mewtwo Y",
                        "MegaMewtwo Y",
                        "Mega-Mewtu Y",
                        "Mega-Mewtwo Y",
                        "메가뮤츠Y",
                        "超级超梦Ｙ",
                        "超級超夢Ｙ",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MewForm {
    Base,
}
impl MewForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ChikoritaForm {
    Base,
}
impl ChikoritaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BayleefForm {
    Base,
}
impl BayleefForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MeganiumForm {
    Base,
}
impl MeganiumForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CyndaquilForm {
    Base,
}
impl CyndaquilForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum QuilavaForm {
    Base,
}
impl QuilavaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TyphlosionForm {
    Base,
    HisuianForm,
}
impl TyphlosionForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::HisuianForm => &FormData {
                names: NamesData {
                    names: [
                        "ヒスイのすがた",
                        "Hisuian Form",
                        "Forme de Hisui",
                        "Forma di Hisui",
                        "Hisui-Form",
                        "Forma de Hisui",
                        "히스이의 모습",
                        "洗翠的样子",
                        "洗翠的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TotodileForm {
    Base,
}
impl TotodileForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CroconawForm {
    Base,
}
impl CroconawForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FeraligatrForm {
    Base,
}
impl FeraligatrForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SentretForm {
    Base,
}
impl SentretForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FurretForm {
    Base,
}
impl FurretForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HoothootForm {
    Base,
}
impl HoothootForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum NoctowlForm {
    Base,
}
impl NoctowlForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LedybaForm {
    Base,
}
impl LedybaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LedianForm {
    Base,
}
impl LedianForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SpinarakForm {
    Base,
}
impl SpinarakForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum AriadosForm {
    Base,
}
impl AriadosForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CrobatForm {
    Base,
}
impl CrobatForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ChinchouForm {
    Base,
}
impl ChinchouForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LanturnForm {
    Base,
}
impl LanturnForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PichuForm {
    Base,
    SpikyEaredPichu,
}
impl PichuForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::SpikyEaredPichu => &FormData {
                names: NamesData {
                    names: [
                        "ギザみみピチュー",
                        "Spiky-eared Pichu",
                        "Pichu Troizépi",
                        "Pichu Spunzorek",
                        "Strubbelohr-Pichu",
                        "Pichu Picoreja",
                        "삐쭉귀 피츄",
                        "",
                        "",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CleffaForm {
    Base,
}
impl CleffaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum IgglybuffForm {
    Base,
}
impl IgglybuffForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TogepiForm {
    Base,
}
impl TogepiForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TogeticForm {
    Base,
}
impl TogeticForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum NatuForm {
    Base,
}
impl NatuForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum XatuForm {
    Base,
}
impl XatuForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MareepForm {
    Base,
}
impl MareepForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FlaaffyForm {
    Base,
}
impl FlaaffyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum AmpharosForm {
    Base,
    Mega,
}
impl AmpharosForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガデンリュウ",
                        "Mega Ampharos",
                        "Méga-Pharamp",
                        "MegaAmpharos",
                        "Mega-Ampharos",
                        "Mega-Ampharos",
                        "메가전룡",
                        "超级电龙",
                        "超級電龍",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BellossomForm {
    Base,
}
impl BellossomForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MarillForm {
    Base,
}
impl MarillForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum AzumarillForm {
    Base,
}
impl AzumarillForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SudowoodoForm {
    Base,
}
impl SudowoodoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PolitoedForm {
    Base,
}
impl PolitoedForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HoppipForm {
    Base,
}
impl HoppipForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SkiploomForm {
    Base,
}
impl SkiploomForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum JumpluffForm {
    Base,
}
impl JumpluffForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum AipomForm {
    Base,
}
impl AipomForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SunkernForm {
    Base,
}
impl SunkernForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SunfloraForm {
    Base,
}
impl SunfloraForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum YanmaForm {
    Base,
}
impl YanmaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum WooperForm {
    Base,
    PaldeanForm,
}
impl WooperForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::PaldeanForm => &FormData {
                names: NamesData {
                    names: [
                        "パルデアのすがた",
                        "Paldean Form",
                        "Forme de Paldea",
                        "Forma di Paldea",
                        "Paldea-Form",
                        "Forma de Paldea",
                        "팔데아의 모습",
                        "帕底亚的样子",
                        "帕底亞的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum QuagsireForm {
    Base,
}
impl QuagsireForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum EspeonForm {
    Base,
}
impl EspeonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum UmbreonForm {
    Base,
}
impl UmbreonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MurkrowForm {
    Base,
}
impl MurkrowForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SlowkingForm {
    Base,
    GalarianForm,
}
impl SlowkingForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::GalarianForm => &FormData {
                names: NamesData {
                    names: [
                        "ガラルのすがた",
                        "Galarian Form",
                        "Forme de Galar",
                        "Forma di Galar",
                        "Galar-Form",
                        "Forma de Galar",
                        "가라르의 모습",
                        "伽勒尔的样子",
                        "伽勒爾的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MisdreavusForm {
    Base,
}
impl MisdreavusForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum UnownForm {
    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    M,
    N,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,
    ExclamationMark,
    QuestionMark,
}
impl UnownForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::A => &FormData {
                names: NamesData {
                    names: [
                        "あるすがた",
                        "One form",
                        "Forme Unique",
                        "Forma Vaga",
                        "Eine Form",
                        "Forma de Unown",
                        "형태별 모습",
                        "某种样子",
                        "某種樣子",
                    ],
                },
            },
            Self::B => &FormData {
                names: NamesData {
                    names: [
                        "あるすがた",
                        "One form",
                        "Forme Unique",
                        "Forma Vaga",
                        "Eine Form",
                        "Forma de Unown",
                        "형태별 모습",
                        "某种样子",
                        "某種樣子",
                    ],
                },
            },
            Self::C => &FormData {
                names: NamesData {
                    names: [
                        "あるすがた",
                        "One form",
                        "Forme Unique",
                        "Forma Vaga",
                        "Eine Form",
                        "Forma de Unown",
                        "형태별 모습",
                        "某种样子",
                        "某種樣子",
                    ],
                },
            },
            Self::D => &FormData {
                names: NamesData {
                    names: [
                        "あるすがた",
                        "One form",
                        "Forme Unique",
                        "Forma Vaga",
                        "Eine Form",
                        "Forma de Unown",
                        "형태별 모습",
                        "某种样子",
                        "某種樣子",
                    ],
                },
            },
            Self::E => &FormData {
                names: NamesData {
                    names: [
                        "あるすがた",
                        "One form",
                        "Forme Unique",
                        "Forma Vaga",
                        "Eine Form",
                        "Forma de Unown",
                        "형태별 모습",
                        "某种样子",
                        "某種樣子",
                    ],
                },
            },
            Self::F => &FormData {
                names: NamesData {
                    names: [
                        "あるすがた",
                        "One form",
                        "Forme Unique",
                        "Forma Vaga",
                        "Eine Form",
                        "Forma de Unown",
                        "형태별 모습",
                        "某种样子",
                        "某種樣子",
                    ],
                },
            },
            Self::G => &FormData {
                names: NamesData {
                    names: [
                        "あるすがた",
                        "One form",
                        "Forme Unique",
                        "Forma Vaga",
                        "Eine Form",
                        "Forma de Unown",
                        "형태별 모습",
                        "某种样子",
                        "某種樣子",
                    ],
                },
            },
            Self::H => &FormData {
                names: NamesData {
                    names: [
                        "あるすがた",
                        "One form",
                        "Forme Unique",
                        "Forma Vaga",
                        "Eine Form",
                        "Forma de Unown",
                        "형태별 모습",
                        "某种样子",
                        "某種樣子",
                    ],
                },
            },
            Self::I => &FormData {
                names: NamesData {
                    names: [
                        "あるすがた",
                        "One form",
                        "Forme Unique",
                        "Forma Vaga",
                        "Eine Form",
                        "Forma de Unown",
                        "형태별 모습",
                        "某种样子",
                        "某種樣子",
                    ],
                },
            },
            Self::J => &FormData {
                names: NamesData {
                    names: [
                        "あるすがた",
                        "One form",
                        "Forme Unique",
                        "Forma Vaga",
                        "Eine Form",
                        "Forma de Unown",
                        "형태별 모습",
                        "某种样子",
                        "某種樣子",
                    ],
                },
            },
            Self::K => &FormData {
                names: NamesData {
                    names: [
                        "あるすがた",
                        "One form",
                        "Forme Unique",
                        "Forma Vaga",
                        "Eine Form",
                        "Forma de Unown",
                        "형태별 모습",
                        "某种样子",
                        "某種樣子",
                    ],
                },
            },
            Self::L => &FormData {
                names: NamesData {
                    names: [
                        "あるすがた",
                        "One form",
                        "Forme Unique",
                        "Forma Vaga",
                        "Eine Form",
                        "Forma de Unown",
                        "형태별 모습",
                        "某种样子",
                        "某種樣子",
                    ],
                },
            },
            Self::M => &FormData {
                names: NamesData {
                    names: [
                        "あるすがた",
                        "One form",
                        "Forme Unique",
                        "Forma Vaga",
                        "Eine Form",
                        "Forma de Unown",
                        "형태별 모습",
                        "某种样子",
                        "某種樣子",
                    ],
                },
            },
            Self::N => &FormData {
                names: NamesData {
                    names: [
                        "あるすがた",
                        "One form",
                        "Forme Unique",
                        "Forma Vaga",
                        "Eine Form",
                        "Forma de Unown",
                        "형태별 모습",
                        "某种样子",
                        "某種樣子",
                    ],
                },
            },
            Self::O => &FormData {
                names: NamesData {
                    names: [
                        "あるすがた",
                        "One form",
                        "Forme Unique",
                        "Forma Vaga",
                        "Eine Form",
                        "Forma de Unown",
                        "형태별 모습",
                        "某种样子",
                        "某種樣子",
                    ],
                },
            },
            Self::P => &FormData {
                names: NamesData {
                    names: [
                        "あるすがた",
                        "One form",
                        "Forme Unique",
                        "Forma Vaga",
                        "Eine Form",
                        "Forma de Unown",
                        "형태별 모습",
                        "某种样子",
                        "某種樣子",
                    ],
                },
            },
            Self::Q => &FormData {
                names: NamesData {
                    names: [
                        "あるすがた",
                        "One form",
                        "Forme Unique",
                        "Forma Vaga",
                        "Eine Form",
                        "Forma de Unown",
                        "형태별 모습",
                        "某种样子",
                        "某種樣子",
                    ],
                },
            },
            Self::R => &FormData {
                names: NamesData {
                    names: [
                        "あるすがた",
                        "One form",
                        "Forme Unique",
                        "Forma Vaga",
                        "Eine Form",
                        "Forma de Unown",
                        "형태별 모습",
                        "某种样子",
                        "某種樣子",
                    ],
                },
            },
            Self::S => &FormData {
                names: NamesData {
                    names: [
                        "あるすがた",
                        "One form",
                        "Forme Unique",
                        "Forma Vaga",
                        "Eine Form",
                        "Forma de Unown",
                        "형태별 모습",
                        "某种样子",
                        "某種樣子",
                    ],
                },
            },
            Self::T => &FormData {
                names: NamesData {
                    names: [
                        "あるすがた",
                        "One form",
                        "Forme Unique",
                        "Forma Vaga",
                        "Eine Form",
                        "Forma de Unown",
                        "형태별 모습",
                        "某种样子",
                        "某種樣子",
                    ],
                },
            },
            Self::U => &FormData {
                names: NamesData {
                    names: [
                        "あるすがた",
                        "One form",
                        "Forme Unique",
                        "Forma Vaga",
                        "Eine Form",
                        "Forma de Unown",
                        "형태별 모습",
                        "某种样子",
                        "某種樣子",
                    ],
                },
            },
            Self::V => &FormData {
                names: NamesData {
                    names: [
                        "あるすがた",
                        "One form",
                        "Forme Unique",
                        "Forma Vaga",
                        "Eine Form",
                        "Forma de Unown",
                        "형태별 모습",
                        "某种样子",
                        "某種樣子",
                    ],
                },
            },
            Self::W => &FormData {
                names: NamesData {
                    names: [
                        "あるすがた",
                        "One form",
                        "Forme Unique",
                        "Forma Vaga",
                        "Eine Form",
                        "Forma de Unown",
                        "형태별 모습",
                        "某种样子",
                        "某種樣子",
                    ],
                },
            },
            Self::X => &FormData {
                names: NamesData {
                    names: [
                        "あるすがた",
                        "One form",
                        "Forme Unique",
                        "Forma Vaga",
                        "Eine Form",
                        "Forma de Unown",
                        "형태별 모습",
                        "某种样子",
                        "某種樣子",
                    ],
                },
            },
            Self::Y => &FormData {
                names: NamesData {
                    names: [
                        "あるすがた",
                        "One form",
                        "Forme Unique",
                        "Forma Vaga",
                        "Eine Form",
                        "Forma de Unown",
                        "형태별 모습",
                        "某种样子",
                        "某種樣子",
                    ],
                },
            },
            Self::Z => &FormData {
                names: NamesData {
                    names: [
                        "あるすがた",
                        "One form",
                        "Forme Unique",
                        "Forma Vaga",
                        "Eine Form",
                        "Forma de Unown",
                        "형태별 모습",
                        "某种样子",
                        "某種樣子",
                    ],
                },
            },
            Self::ExclamationMark => &FormData {
                names: NamesData {
                    names: [
                        "あるすがた",
                        "One form",
                        "Forme Unique",
                        "Forma Vaga",
                        "Eine Form",
                        "Forma de Unown",
                        "형태별 모습",
                        "某种样子",
                        "某種樣子",
                    ],
                },
            },
            Self::QuestionMark => &FormData {
                names: NamesData {
                    names: [
                        "あるすがた",
                        "One form",
                        "Forme Unique",
                        "Forma Vaga",
                        "Eine Form",
                        "Forma de Unown",
                        "형태별 모습",
                        "某种样子",
                        "某種樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum WobbuffetForm {
    Base,
}
impl WobbuffetForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GirafarigForm {
    Base,
}
impl GirafarigForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PinecoForm {
    Base,
}
impl PinecoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ForretressForm {
    Base,
}
impl ForretressForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DunsparceForm {
    Base,
}
impl DunsparceForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GligarForm {
    Base,
}
impl GligarForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SteelixForm {
    Base,
    Mega,
}
impl SteelixForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガハガネール",
                        "Mega Steelix",
                        "Méga-Steelix",
                        "MegaSteelix",
                        "Mega-Stahlos",
                        "Mega-Steelix",
                        "메가강철톤",
                        "超级大钢蛇",
                        "超級大鋼蛇",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SnubbullForm {
    Base,
}
impl SnubbullForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GranbullForm {
    Base,
}
impl GranbullForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum QwilfishForm {
    Base,
    HisuianForm,
}
impl QwilfishForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::HisuianForm => &FormData {
                names: NamesData {
                    names: [
                        "ヒスイのすがた",
                        "Hisuian Form",
                        "Forme de Hisui",
                        "Forma di Hisui",
                        "Hisui-Form",
                        "Forma de Hisui",
                        "히스이의 모습",
                        "洗翠的样子",
                        "洗翠的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ScizorForm {
    Base,
    Mega,
}
impl ScizorForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガハッサム",
                        "Mega Scizor",
                        "Méga-Cizayox",
                        "MegaScizor",
                        "Mega-Scherox",
                        "Mega-Scizor",
                        "메가핫삼",
                        "超级巨钳螳螂",
                        "超級巨鉗螳螂",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ShuckleForm {
    Base,
}
impl ShuckleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HeracrossForm {
    Base,
    Mega,
}
impl HeracrossForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガヘラクロス",
                        "Mega Heracross",
                        "Méga-Scarhino",
                        "MegaHeracross",
                        "Mega-Skaraborn",
                        "Mega-Heracross",
                        "메가헤라크로스",
                        "超级赫拉克罗斯",
                        "超級赫拉克羅斯",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SneaselForm {
    Base,
    HisuianForm,
}
impl SneaselForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::HisuianForm => &FormData {
                names: NamesData {
                    names: [
                        "ヒスイのすがた",
                        "Hisuian Form",
                        "Forme de Hisui",
                        "Forma di Hisui",
                        "Hisui-Form",
                        "Forma de Hisui",
                        "히스이의 모습",
                        "洗翠的样子",
                        "洗翠的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TeddiursaForm {
    Base,
}
impl TeddiursaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum UrsaringForm {
    Base,
}
impl UrsaringForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SlugmaForm {
    Base,
}
impl SlugmaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MagcargoForm {
    Base,
}
impl MagcargoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SwinubForm {
    Base,
}
impl SwinubForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PiloswineForm {
    Base,
}
impl PiloswineForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CorsolaForm {
    Base,
    GalarianForm,
}
impl CorsolaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::GalarianForm => &FormData {
                names: NamesData {
                    names: [
                        "ガラルのすがた",
                        "Galarian Form",
                        "Forme de Galar",
                        "Forma di Galar",
                        "Galar-Form",
                        "Forma de Galar",
                        "가라르의 모습",
                        "伽勒尔的样子",
                        "伽勒爾的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RemoraidForm {
    Base,
}
impl RemoraidForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum OctilleryForm {
    Base,
}
impl OctilleryForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DelibirdForm {
    Base,
}
impl DelibirdForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MantineForm {
    Base,
}
impl MantineForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SkarmoryForm {
    Base,
}
impl SkarmoryForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HoundourForm {
    Base,
}
impl HoundourForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HoundoomForm {
    Base,
    Mega,
}
impl HoundoomForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガヘルガー",
                        "Mega Houndoom",
                        "Méga-Démolosse",
                        "MegaHoundoom",
                        "Mega-Hundemon",
                        "Mega-Houndoom",
                        "메가헬가",
                        "超级黑鲁加",
                        "超級黑魯加",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KingdraForm {
    Base,
}
impl KingdraForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PhanpyForm {
    Base,
}
impl PhanpyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DonphanForm {
    Base,
}
impl DonphanForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum Porygon2Form {
    Base,
}
impl Porygon2Form {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum StantlerForm {
    Base,
}
impl StantlerForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SmeargleForm {
    Base,
}
impl SmeargleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TyrogueForm {
    Base,
}
impl TyrogueForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HitmontopForm {
    Base,
}
impl HitmontopForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SmoochumForm {
    Base,
}
impl SmoochumForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ElekidForm {
    Base,
}
impl ElekidForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MagbyForm {
    Base,
}
impl MagbyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MiltankForm {
    Base,
}
impl MiltankForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BlisseyForm {
    Base,
}
impl BlisseyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RaikouForm {
    Base,
}
impl RaikouForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum EnteiForm {
    Base,
}
impl EnteiForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SuicuneForm {
    Base,
}
impl SuicuneForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LarvitarForm {
    Base,
}
impl LarvitarForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PupitarForm {
    Base,
}
impl PupitarForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TyranitarForm {
    Base,
    Mega,
}
impl TyranitarForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガバンギラス",
                        "Mega Tyranitar",
                        "Méga-Tyranocif",
                        "MegaTyranitar",
                        "Mega-Despotar",
                        "Mega-Tyranitar",
                        "메가마기라스",
                        "超级班基拉斯",
                        "超級班基拉斯",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LugiaForm {
    Base,
}
impl LugiaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HoOhForm {
    Base,
}
impl HoOhForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CelebiForm {
    Base,
}
impl CelebiForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TreeckoForm {
    Base,
}
impl TreeckoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GrovyleForm {
    Base,
}
impl GrovyleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SceptileForm {
    Base,
    Mega,
}
impl SceptileForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガジュカイン",
                        "Mega Sceptile",
                        "Méga-Jungko",
                        "MegaSceptile",
                        "Mega-Gewaldro",
                        "Mega-Sceptile",
                        "메가나무킹",
                        "超级蜥蜴王",
                        "超級蜥蜴王",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TorchicForm {
    Base,
}
impl TorchicForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CombuskenForm {
    Base,
}
impl CombuskenForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BlazikenForm {
    Base,
    Mega,
}
impl BlazikenForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガバシャーモ",
                        "Mega Blaziken",
                        "Méga-Braségali",
                        "MegaBlaziken",
                        "Mega-Lohgock",
                        "Mega-Blaziken",
                        "메가번치코",
                        "超级火焰鸡",
                        "超級火焰雞",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MudkipForm {
    Base,
}
impl MudkipForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MarshtompForm {
    Base,
}
impl MarshtompForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SwampertForm {
    Base,
    Mega,
}
impl SwampertForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガラグラージ",
                        "Mega Swampert",
                        "Méga-Laggron",
                        "MegaSwampert",
                        "Mega-Sumpex",
                        "Mega-Swampert",
                        "메가대짱이",
                        "超级巨沼怪",
                        "超級巨沼怪",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PoochyenaForm {
    Base,
}
impl PoochyenaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MightyenaForm {
    Base,
}
impl MightyenaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ZigzagoonForm {
    Base,
    GalarianForm,
}
impl ZigzagoonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::GalarianForm => &FormData {
                names: NamesData {
                    names: [
                        "ガラルのすがた",
                        "Galarian Form",
                        "Forme de Galar",
                        "Forma di Galar",
                        "Galar-Form",
                        "Forma de Galar",
                        "가라르의 모습",
                        "伽勒尔的样子",
                        "伽勒爾的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LinooneForm {
    Base,
    GalarianForm,
}
impl LinooneForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::GalarianForm => &FormData {
                names: NamesData {
                    names: [
                        "ガラルのすがた",
                        "Galarian Form",
                        "Forme de Galar",
                        "Forma di Galar",
                        "Galar-Form",
                        "Forma de Galar",
                        "가라르의 모습",
                        "伽勒尔的样子",
                        "伽勒爾的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum WurmpleForm {
    Base,
}
impl WurmpleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SilcoonForm {
    Base,
}
impl SilcoonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BeautiflyForm {
    Base,
}
impl BeautiflyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CascoonForm {
    Base,
}
impl CascoonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DustoxForm {
    Base,
}
impl DustoxForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LotadForm {
    Base,
}
impl LotadForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LombreForm {
    Base,
}
impl LombreForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LudicoloForm {
    Base,
}
impl LudicoloForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SeedotForm {
    Base,
}
impl SeedotForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum NuzleafForm {
    Base,
}
impl NuzleafForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ShiftryForm {
    Base,
}
impl ShiftryForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TaillowForm {
    Base,
}
impl TaillowForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SwellowForm {
    Base,
}
impl SwellowForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum WingullForm {
    Base,
}
impl WingullForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PelipperForm {
    Base,
}
impl PelipperForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RaltsForm {
    Base,
}
impl RaltsForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KirliaForm {
    Base,
}
impl KirliaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GardevoirForm {
    Base,
    Mega,
}
impl GardevoirForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガサーナイト",
                        "Mega Gardevoir",
                        "Méga-Gardevoir",
                        "MegaGardevoir",
                        "Mega-Guardevoir",
                        "Mega-Gardevoir",
                        "메가가디안",
                        "超级沙奈朵",
                        "超級沙奈朵",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SurskitForm {
    Base,
}
impl SurskitForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MasquerainForm {
    Base,
}
impl MasquerainForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ShroomishForm {
    Base,
}
impl ShroomishForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BreloomForm {
    Base,
}
impl BreloomForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SlakothForm {
    Base,
}
impl SlakothForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum VigorothForm {
    Base,
}
impl VigorothForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SlakingForm {
    Base,
}
impl SlakingForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum NincadaForm {
    Base,
}
impl NincadaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum NinjaskForm {
    Base,
}
impl NinjaskForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ShedinjaForm {
    Base,
}
impl ShedinjaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum WhismurForm {
    Base,
}
impl WhismurForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LoudredForm {
    Base,
}
impl LoudredForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ExploudForm {
    Base,
}
impl ExploudForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MakuhitaForm {
    Base,
}
impl MakuhitaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HariyamaForm {
    Base,
}
impl HariyamaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum AzurillForm {
    Base,
}
impl AzurillForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum NosepassForm {
    Base,
}
impl NosepassForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SkittyForm {
    Base,
}
impl SkittyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DelcattyForm {
    Base,
}
impl DelcattyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SableyeForm {
    Base,
    Mega,
}
impl SableyeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガヤミラミ",
                        "Mega Sableye",
                        "Méga-Ténéfix",
                        "MegaSableye",
                        "Mega-Zobiris",
                        "Mega-Sableye",
                        "메가깜까미",
                        "超级勾魂眼",
                        "超級勾魂眼",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MawileForm {
    Base,
    Mega,
}
impl MawileForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガクチート",
                        "Mega Mawile",
                        "Méga-Mysdibule",
                        "MegaMawile",
                        "Mega-Flunkifer",
                        "Mega-Mawile",
                        "메가입치트",
                        "超级大嘴娃",
                        "超級大嘴娃",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum AronForm {
    Base,
}
impl AronForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LaironForm {
    Base,
}
impl LaironForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum AggronForm {
    Base,
    Mega,
}
impl AggronForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガボスゴドラ",
                        "Mega Aggron",
                        "Méga-Galeking",
                        "MegaAggron",
                        "Mega-Stolloss",
                        "Mega-Aggron",
                        "메가보스로라",
                        "超级波士可多拉",
                        "超級波士可多拉",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MedititeForm {
    Base,
}
impl MedititeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MedichamForm {
    Base,
    Mega,
}
impl MedichamForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガチャーレム",
                        "Mega Medicham",
                        "Méga-Charmina",
                        "MegaMedicham",
                        "Mega-Meditalis",
                        "Mega-Medicham",
                        "메가요가램",
                        "超级恰雷姆",
                        "超級恰雷姆",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ElectrikeForm {
    Base,
}
impl ElectrikeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ManectricForm {
    Base,
    Mega,
}
impl ManectricForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガライボルト",
                        "Mega Manectric",
                        "Méga-Élecsprint",
                        "MegaManectric",
                        "Mega-Voltenso",
                        "Mega-Manectric",
                        "메가썬더볼트",
                        "超级雷电兽",
                        "超級雷電獸",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PlusleForm {
    Base,
}
impl PlusleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MinunForm {
    Base,
}
impl MinunForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum VolbeatForm {
    Base,
}
impl VolbeatForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum IllumiseForm {
    Base,
}
impl IllumiseForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RoseliaForm {
    Base,
}
impl RoseliaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GulpinForm {
    Base,
}
impl GulpinForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SwalotForm {
    Base,
}
impl SwalotForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CarvanhaForm {
    Base,
}
impl CarvanhaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SharpedoForm {
    Base,
    Mega,
}
impl SharpedoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガサメハダー",
                        "Mega Sharpedo",
                        "Méga-Sharpedo",
                        "MegaSharpedo",
                        "Mega-Tohaido",
                        "Mega-Sharpedo",
                        "메가샤크니아",
                        "超级巨牙鲨",
                        "超級巨牙鯊",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum WailmerForm {
    Base,
}
impl WailmerForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum WailordForm {
    Base,
}
impl WailordForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum NumelForm {
    Base,
}
impl NumelForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CameruptForm {
    Base,
    Mega,
}
impl CameruptForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガバクーダ",
                        "Mega Camerupt",
                        "Méga-Camérupt",
                        "MegaCamerupt",
                        "Mega-Camerupt",
                        "Mega-Camerupt",
                        "메가폭타",
                        "超级喷火驼",
                        "超級噴火駝",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TorkoalForm {
    Base,
}
impl TorkoalForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SpoinkForm {
    Base,
}
impl SpoinkForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GrumpigForm {
    Base,
}
impl GrumpigForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SpindaForm {
    Base,
}
impl SpindaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TrapinchForm {
    Base,
}
impl TrapinchForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum VibravaForm {
    Base,
}
impl VibravaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FlygonForm {
    Base,
}
impl FlygonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CacneaForm {
    Base,
}
impl CacneaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CacturneForm {
    Base,
}
impl CacturneForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SwabluForm {
    Base,
}
impl SwabluForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum AltariaForm {
    Base,
    Mega,
}
impl AltariaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガチルタリス",
                        "Mega Altaria",
                        "Méga-Altaria",
                        "MegaAltaria",
                        "Mega-Altaria",
                        "Mega-Altaria",
                        "메가파비코리",
                        "超级七夕青鸟",
                        "超級七夕青鳥",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ZangooseForm {
    Base,
}
impl ZangooseForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SeviperForm {
    Base,
}
impl SeviperForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LunatoneForm {
    Base,
}
impl LunatoneForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SolrockForm {
    Base,
}
impl SolrockForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BarboachForm {
    Base,
}
impl BarboachForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum WhiscashForm {
    Base,
}
impl WhiscashForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CorphishForm {
    Base,
}
impl CorphishForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CrawdauntForm {
    Base,
}
impl CrawdauntForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BaltoyForm {
    Base,
}
impl BaltoyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ClaydolForm {
    Base,
}
impl ClaydolForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LileepForm {
    Base,
}
impl LileepForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CradilyForm {
    Base,
}
impl CradilyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum AnorithForm {
    Base,
}
impl AnorithForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ArmaldoForm {
    Base,
}
impl ArmaldoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FeebasForm {
    Base,
}
impl FeebasForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MiloticForm {
    Base,
}
impl MiloticForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CastformForm {
    Normal,
    SunnyForm,
    RainyForm,
    SnowyForm,
}
impl CastformForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Normal => &FormData {
                names: NamesData {
                    names: [
                        "ポワルンのすがた",
                        "Normal",
                        "Forme de Morphéo",
                        "Forma Castform",
                        "Formeo",
                        "Forma de Castform",
                        "캐스퐁의 모습",
                        "飘浮泡泡的样子",
                        "飄浮泡泡的樣子",
                    ],
                },
            },
            Self::SunnyForm => &FormData {
                names: NamesData {
                    names: [
                        "たいようのすがた",
                        "Sunny Form",
                        "Forme Solaire",
                        "Forma Sole",
                        "Sonnenform",
                        "Forma Sol",
                        "태양의 모습",
                        "太阳的样子",
                        "太陽的樣子",
                    ],
                },
            },
            Self::RainyForm => &FormData {
                names: NamesData {
                    names: [
                        "あまみずのすがた",
                        "Rainy Form",
                        "Forme Eau de Pluie",
                        "Forma Pioggia",
                        "Regenform",
                        "Forma Lluvia",
                        "빗방울의 모습",
                        "雨水的样子",
                        "雨水的樣子",
                    ],
                },
            },
            Self::SnowyForm => &FormData {
                names: NamesData {
                    names: [
                        "ゆきぐものすがた",
                        "Snowy Form",
                        "Forme Blizzard",
                        "Forma Nuvola di Neve",
                        "Schneeform",
                        "Forma Nieve",
                        "설운의 모습",
                        "雪云的样子",
                        "雪雲的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KecleonForm {
    Base,
}
impl KecleonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ShuppetForm {
    Base,
}
impl ShuppetForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BanetteForm {
    Base,
    Mega,
}
impl BanetteForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガジュペッタ",
                        "Mega Banette",
                        "Méga-Branette",
                        "MegaBanette",
                        "Mega-Banette",
                        "Mega-Banette",
                        "메가다크펫",
                        "超级诅咒娃娃",
                        "超級詛咒娃娃",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DuskullForm {
    Base,
}
impl DuskullForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DusclopsForm {
    Base,
}
impl DusclopsForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TropiusForm {
    Base,
}
impl TropiusForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ChimechoForm {
    Base,
}
impl ChimechoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum AbsolForm {
    Base,
    Mega,
}
impl AbsolForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガアブソル",
                        "Mega Absol",
                        "Méga-Absol",
                        "MegaAbsol",
                        "Mega-Absol",
                        "Mega-Absol",
                        "메가앱솔",
                        "超级阿勃梭鲁",
                        "超級阿勃梭魯",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum WynautForm {
    Base,
}
impl WynautForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SnoruntForm {
    Base,
}
impl SnoruntForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GlalieForm {
    Base,
    Mega,
}
impl GlalieForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガオニゴーリ",
                        "Mega Glalie",
                        "Méga-Oniglali",
                        "MegaGlalie",
                        "Mega-Firnontor",
                        "Mega-Glalie",
                        "메가얼음귀신",
                        "超级冰鬼护",
                        "超級冰鬼護",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SphealForm {
    Base,
}
impl SphealForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SealeoForm {
    Base,
}
impl SealeoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum WalreinForm {
    Base,
}
impl WalreinForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ClamperlForm {
    Base,
}
impl ClamperlForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HuntailForm {
    Base,
}
impl HuntailForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GorebyssForm {
    Base,
}
impl GorebyssForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RelicanthForm {
    Base,
}
impl RelicanthForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LuvdiscForm {
    Base,
}
impl LuvdiscForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BagonForm {
    Base,
}
impl BagonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ShelgonForm {
    Base,
}
impl ShelgonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SalamenceForm {
    Base,
    Mega,
}
impl SalamenceForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガボーマンダ",
                        "Mega Salamence",
                        "Méga-Drattak",
                        "MegaSalamence",
                        "Mega-Brutalanda",
                        "Mega-Salamence",
                        "메가보만다",
                        "超级暴飞龙",
                        "超級暴飛龍",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BeldumForm {
    Base,
}
impl BeldumForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MetangForm {
    Base,
}
impl MetangForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MetagrossForm {
    Base,
    Mega,
}
impl MetagrossForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガメタグロス",
                        "Mega Metagross",
                        "Méga-Métalosse",
                        "MegaMetagross",
                        "Mega-Metagross",
                        "Mega-Metagross",
                        "메가메타그로스",
                        "超级巨金怪",
                        "超級巨金怪",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RegirockForm {
    Base,
}
impl RegirockForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RegiceForm {
    Base,
}
impl RegiceForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RegisteelForm {
    Base,
}
impl RegisteelForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LatiasForm {
    Base,
    Mega,
}
impl LatiasForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガラティアス",
                        "Mega Latias",
                        "Méga-Latias",
                        "MegaLatias",
                        "Mega-Latias",
                        "Mega-Latias",
                        "메가라티아스",
                        "超级拉帝亚斯",
                        "超級拉帝亞斯",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LatiosForm {
    Base,
    Mega,
}
impl LatiosForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガラティオス",
                        "Mega Latios",
                        "Méga-Latios",
                        "MegaLatios",
                        "Mega-Latios",
                        "Mega-Latios",
                        "메가라티오스",
                        "超级拉帝欧斯",
                        "超級拉帝歐斯",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KyogreForm {
    Kyogre,
    PrimalReversion,
}
impl KyogreForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Kyogre => &FormData {
                names: NamesData {
                    names: [
                        "カイオーガのすがた",
                        "Kyogre",
                        "Kyogre",
                        "",
                        "Kyogre",
                        "Kyogre",
                        "가이오가의 모습",
                        "盖欧卡的样子",
                        "蓋歐卡的樣子",
                    ],
                },
            },
            Self::PrimalReversion => &FormData {
                names: NamesData {
                    names: [
                        "ゲンシカイキのすがた",
                        "Primal Reversion",
                        "Primo-Résurgence",
                        "Archeorisveglio",
                        "Protomorphose",
                        "Regresión Primigenia",
                        "원시회귀의 모습",
                        "原始回归的样子",
                        "原始回歸的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GroudonForm {
    Groudon,
    PrimalReversion,
}
impl GroudonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Groudon => &FormData {
                names: NamesData {
                    names: [
                        "グラードンのすがた",
                        "Groudon",
                        "Groudon",
                        "",
                        "Groudon",
                        "Groudon",
                        "그란돈의 모습",
                        "固拉多的样子",
                        "固拉多的樣子",
                    ],
                },
            },
            Self::PrimalReversion => &FormData {
                names: NamesData {
                    names: [
                        "ゲンシカイキのすがた",
                        "Primal Reversion",
                        "Primo-Résurgence",
                        "Archeorisveglio",
                        "Protomorphose",
                        "Regresión Primigenia",
                        "원시회귀의 모습",
                        "原始回归的样子",
                        "原始回歸的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RayquazaForm {
    Base,
    Mega,
}
impl RayquazaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガレックウザ",
                        "Mega Rayquaza",
                        "Méga-Rayquaza",
                        "MegaRayquaza",
                        "Mega-Rayquaza",
                        "Mega-Rayquaza",
                        "메가레쿠쟈",
                        "超级烈空坐",
                        "超級烈空坐",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum JirachiForm {
    Base,
}
impl JirachiForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DeoxysForm {
    NormalForme,
    AttackForme,
    DefenseForme,
    SpeedForme,
}
impl DeoxysForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::NormalForme => &FormData {
                names: NamesData {
                    names: [
                        "ノーマルフォルム",
                        "Normal Forme",
                        "Forme Normale",
                        "Forma Normale",
                        "Normalform",
                        "Forma Normal",
                        "노말폼",
                        "普通形态",
                        "普通形態",
                    ],
                },
            },
            Self::AttackForme => &FormData {
                names: NamesData {
                    names: [
                        "アタックフォルム",
                        "Attack Forme",
                        "Forme Attaque",
                        "Forma Attacco",
                        "Angriffsform",
                        "Forma Ataque",
                        "어택폼",
                        "攻击形态",
                        "攻擊形態",
                    ],
                },
            },
            Self::DefenseForme => &FormData {
                names: NamesData {
                    names: [
                        "ディフェンスフォルム",
                        "Defense Forme",
                        "Forme Défense",
                        "Forma Difesa",
                        "Verteidigungsform",
                        "Forma Defensa",
                        "디펜스폼",
                        "防御形态",
                        "防禦形態",
                    ],
                },
            },
            Self::SpeedForme => &FormData {
                names: NamesData {
                    names: [
                        "スピードフォルム",
                        "Speed Forme",
                        "Forme Vitesse",
                        "Forma Velocità",
                        "Initiativeform",
                        "Forma Velocidad",
                        "스피드폼",
                        "速度形态",
                        "速度形態",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TurtwigForm {
    Base,
}
impl TurtwigForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GrotleForm {
    Base,
}
impl GrotleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TorterraForm {
    Base,
}
impl TorterraForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ChimcharForm {
    Base,
}
impl ChimcharForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MonfernoForm {
    Base,
}
impl MonfernoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum InfernapeForm {
    Base,
}
impl InfernapeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PiplupForm {
    Base,
}
impl PiplupForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PrinplupForm {
    Base,
}
impl PrinplupForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum EmpoleonForm {
    Base,
}
impl EmpoleonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum StarlyForm {
    Base,
}
impl StarlyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum StaraviaForm {
    Base,
}
impl StaraviaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum StaraptorForm {
    Base,
}
impl StaraptorForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BidoofForm {
    Base,
}
impl BidoofForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BibarelForm {
    Base,
}
impl BibarelForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KricketotForm {
    Base,
}
impl KricketotForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KricketuneForm {
    Base,
}
impl KricketuneForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ShinxForm {
    Base,
}
impl ShinxForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LuxioForm {
    Base,
}
impl LuxioForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LuxrayForm {
    Base,
}
impl LuxrayForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BudewForm {
    Base,
}
impl BudewForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RoseradeForm {
    Base,
}
impl RoseradeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CranidosForm {
    Base,
}
impl CranidosForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RampardosForm {
    Base,
}
impl RampardosForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ShieldonForm {
    Base,
}
impl ShieldonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BastiodonForm {
    Base,
}
impl BastiodonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BurmyForm {
    PlantCloak,
    SandyCloak,
    TrashCloak,
}
impl BurmyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::PlantCloak => &FormData {
                names: NamesData {
                    names: [
                        "くさきのミノ",
                        "Plant Cloak",
                        "Cape Plante",
                        "Manto Pianta",
                        "Pflanzenumhang",
                        "Tronco Planta",
                        "초목도롱",
                        "草木蓑衣",
                        "草木蓑衣",
                    ],
                },
            },
            Self::SandyCloak => &FormData {
                names: NamesData {
                    names: [
                        "すなちのミノ",
                        "Sandy Cloak",
                        "Cape Sable",
                        "Manto Sabbia",
                        "Sandumhang",
                        "Tronco Arena",
                        "모래땅도롱",
                        "砂土蓑衣",
                        "砂土蓑衣",
                    ],
                },
            },
            Self::TrashCloak => &FormData {
                names: NamesData {
                    names: [
                        "ゴミのミノ",
                        "Trash Cloak",
                        "Cape Déchet",
                        "Manto Scarti",
                        "Lumpenumhang",
                        "Tronco Basura",
                        "슈레도롱",
                        "垃圾蓑衣",
                        "垃圾蓑衣",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum WormadamForm {
    PlantCloak,
    SandyCloak,
    TrashCloak,
}
impl WormadamForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::PlantCloak => &FormData {
                names: NamesData {
                    names: [
                        "くさきのミノ",
                        "Plant Cloak",
                        "Cape Plante",
                        "Manto Pianta",
                        "Pflanzenumhang",
                        "Tronco Planta",
                        "초목도롱",
                        "草木蓑衣",
                        "草木蓑衣",
                    ],
                },
            },
            Self::SandyCloak => &FormData {
                names: NamesData {
                    names: [
                        "すなちのミノ",
                        "Sandy Cloak",
                        "Cape Sable",
                        "Manto Sabbia",
                        "Sandumhang",
                        "Tronco Arena",
                        "모래땅도롱",
                        "砂土蓑衣",
                        "砂土蓑衣",
                    ],
                },
            },
            Self::TrashCloak => &FormData {
                names: NamesData {
                    names: [
                        "ゴミのミノ",
                        "Trash Cloak",
                        "Cape Déchet",
                        "Manto Scarti",
                        "Lumpenumhang",
                        "Tronco Basura",
                        "슈레도롱",
                        "垃圾蓑衣",
                        "垃圾蓑衣",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MothimForm {
    PlantCloak,
    SandyCloak,
    TrashCloak,
}
impl MothimForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::PlantCloak => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::SandyCloak => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::TrashCloak => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CombeeForm {
    Base,
}
impl CombeeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum VespiquenForm {
    Base,
}
impl VespiquenForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PachirisuForm {
    Base,
}
impl PachirisuForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BuizelForm {
    Base,
}
impl BuizelForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FloatzelForm {
    Base,
}
impl FloatzelForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CherubiForm {
    Base,
}
impl CherubiForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CherrimForm {
    OvercastForm,
    SunshineForm,
}
impl CherrimForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::OvercastForm => &FormData {
                names: NamesData {
                    names: [
                        "ネガフォルム",
                        "Overcast Form",
                        "Temps Couvert",
                        "Forma Nuvola",
                        "Wolkenform",
                        "Forma Encapotado",
                        "네거폼",
                        "阴天形态",
                        "陰天形態",
                    ],
                },
            },
            Self::SunshineForm => &FormData {
                names: NamesData {
                    names: [
                        "ポジフォルム",
                        "Sunshine Form",
                        "Temps Ensoleillé",
                        "Forma Splendore",
                        "Sonnenform",
                        "Forma Soleado",
                        "포지폼",
                        "晴天形态",
                        "晴天形態",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ShellosForm {
    WestSea,
    EastSea,
}
impl ShellosForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::WestSea => &FormData {
                names: NamesData {
                    names: [
                        "にしのうみ",
                        "West Sea",
                        "Mer Occident",
                        "Mare Ovest",
                        "Westliches Meer",
                        "Mar Oeste",
                        "서쪽바다",
                        "西海",
                        "西海",
                    ],
                },
            },
            Self::EastSea => &FormData {
                names: NamesData {
                    names: [
                        "ひがしのうみ",
                        "East Sea",
                        "Mer Orient",
                        "Mare Est",
                        "Östliches Meer",
                        "Mar Este",
                        "동쪽바다",
                        "东海",
                        "東海",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GastrodonForm {
    WestSea,
    EastSea,
}
impl GastrodonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::WestSea => &FormData {
                names: NamesData {
                    names: [
                        "にしのうみ",
                        "West Sea",
                        "Mer Occident",
                        "Mare Ovest",
                        "Westliches Meer",
                        "Mar Oeste",
                        "서쪽바다",
                        "西海",
                        "西海",
                    ],
                },
            },
            Self::EastSea => &FormData {
                names: NamesData {
                    names: [
                        "ひがしのうみ",
                        "East Sea",
                        "Mer Orient",
                        "Mare Est",
                        "Östliches Meer",
                        "Mar Este",
                        "동쪽바다",
                        "东海",
                        "東海",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum AmbipomForm {
    Base,
}
impl AmbipomForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DrifloonForm {
    Base,
}
impl DrifloonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DrifblimForm {
    Base,
}
impl DrifblimForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BunearyForm {
    Base,
}
impl BunearyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LopunnyForm {
    Base,
    Mega,
}
impl LopunnyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガミミロップ",
                        "Mega Lopunny",
                        "Méga-Lockpin",
                        "MegaLopunny",
                        "Mega-Schlapor",
                        "Mega-Lopunny",
                        "메가이어롭",
                        "超级长耳兔",
                        "超級長耳兔",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MismagiusForm {
    Base,
}
impl MismagiusForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HonchkrowForm {
    Base,
}
impl HonchkrowForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GlameowForm {
    Base,
}
impl GlameowForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PuruglyForm {
    Base,
}
impl PuruglyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ChinglingForm {
    Base,
}
impl ChinglingForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum StunkyForm {
    Base,
}
impl StunkyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SkuntankForm {
    Base,
}
impl SkuntankForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BronzorForm {
    Base,
}
impl BronzorForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BronzongForm {
    Base,
}
impl BronzongForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BonslyForm {
    Base,
}
impl BonslyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MimeJrForm {
    Base,
}
impl MimeJrForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HappinyForm {
    Base,
}
impl HappinyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ChatotForm {
    Base,
}
impl ChatotForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SpiritombForm {
    Base,
}
impl SpiritombForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GibleForm {
    Base,
}
impl GibleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GabiteForm {
    Base,
}
impl GabiteForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GarchompForm {
    Base,
    Mega,
}
impl GarchompForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガガブリアス",
                        "Mega Garchomp",
                        "Méga-Carchacrok",
                        "MegaGarchomp",
                        "Mega-Knakrack",
                        "Mega-Garchomp",
                        "메가한카리아스",
                        "超级烈咬陆鲨",
                        "超級烈咬陸鯊",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MunchlaxForm {
    Base,
}
impl MunchlaxForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RioluForm {
    Base,
}
impl RioluForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LucarioForm {
    Base,
    Mega,
}
impl LucarioForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガルカリオ",
                        "Mega Lucario",
                        "Méga-Lucario",
                        "MegaLucario",
                        "Mega-Lucario",
                        "Mega-Lucario",
                        "메가루카리오",
                        "超级路卡利欧",
                        "超級路卡利歐",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HippopotasForm {
    Base,
}
impl HippopotasForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HippowdonForm {
    Base,
}
impl HippowdonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SkorupiForm {
    Base,
}
impl SkorupiForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DrapionForm {
    Base,
}
impl DrapionForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CroagunkForm {
    Base,
}
impl CroagunkForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ToxicroakForm {
    Base,
}
impl ToxicroakForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CarnivineForm {
    Base,
}
impl CarnivineForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FinneonForm {
    Base,
}
impl FinneonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LumineonForm {
    Base,
}
impl LumineonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MantykeForm {
    Base,
}
impl MantykeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SnoverForm {
    Base,
}
impl SnoverForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum AbomasnowForm {
    Base,
    Mega,
}
impl AbomasnowForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガユキノオー",
                        "Mega Abomasnow",
                        "Méga-Blizzaroi",
                        "MegaAbomasnow",
                        "Mega-Rexblisar",
                        "Mega-Abomasnow",
                        "메가눈설왕",
                        "超级暴雪王",
                        "超級暴雪王",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum WeavileForm {
    Base,
}
impl WeavileForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MagnezoneForm {
    Base,
}
impl MagnezoneForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LickilickyForm {
    Base,
}
impl LickilickyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RhyperiorForm {
    Base,
}
impl RhyperiorForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TangrowthForm {
    Base,
}
impl TangrowthForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ElectivireForm {
    Base,
}
impl ElectivireForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MagmortarForm {
    Base,
}
impl MagmortarForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TogekissForm {
    Base,
}
impl TogekissForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum YanmegaForm {
    Base,
}
impl YanmegaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LeafeonForm {
    Base,
}
impl LeafeonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GlaceonForm {
    Base,
}
impl GlaceonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GliscorForm {
    Base,
}
impl GliscorForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MamoswineForm {
    Base,
}
impl MamoswineForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PorygonZForm {
    Base,
}
impl PorygonZForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GalladeForm {
    Base,
    Mega,
}
impl GalladeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガエルレイド",
                        "Mega Gallade",
                        "Méga-Gallame",
                        "MegaGallade",
                        "Mega-Galagladi",
                        "Mega-Gallade",
                        "메가엘레이드",
                        "超级艾路雷朵",
                        "超級艾路雷朵",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ProbopassForm {
    Base,
}
impl ProbopassForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DusknoirForm {
    Base,
}
impl DusknoirForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FroslassForm {
    Base,
}
impl FroslassForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RotomForm {
    Rotom,
    HeatRotom,
    WashRotom,
    FrostRotom,
    FanRotom,
    MowRotom,
}
impl RotomForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Rotom => &FormData {
                names: NamesData {
                    names: [
                        "ロトムのすがた",
                        "Rotom",
                        "Forme de Motisma",
                        "Forma Rotom",
                        "Rotom",
                        "Forma de Rotom",
                        "로토무의 모습",
                        "洛托姆的样子",
                        "洛托姆的樣子",
                    ],
                },
            },
            Self::HeatRotom => &FormData {
                names: NamesData {
                    names: [
                        "ヒートロトム",
                        "Heat Rotom",
                        "Motisma Chaleur",
                        "Rotom Calore",
                        "Hitze-Rotom",
                        "Rotom Calor",
                        "히트로토무",
                        "加热洛托姆",
                        "加熱洛托姆",
                    ],
                },
            },
            Self::WashRotom => &FormData {
                names: NamesData {
                    names: [
                        "ウォッシュロトム",
                        "Wash Rotom",
                        "Motisma Lavage",
                        "Rotom Lavaggio",
                        "Wasch-Rotom",
                        "Rotom Lavado",
                        "워시로토무",
                        "清洗洛托姆",
                        "清洗洛托姆",
                    ],
                },
            },
            Self::FrostRotom => &FormData {
                names: NamesData {
                    names: [
                        "フロストロトム",
                        "Frost Rotom",
                        "Motisma Froid",
                        "Rotom Gelo",
                        "Frost-Rotom",
                        "Rotom Frío",
                        "프로스트로토무",
                        "结冰洛托姆",
                        "結冰洛托姆",
                    ],
                },
            },
            Self::FanRotom => &FormData {
                names: NamesData {
                    names: [
                        "スピンロトム",
                        "Fan Rotom",
                        "Motisma Hélice",
                        "Rotom Vortice",
                        "Wirbel-Rotom",
                        "Rotom Ventilador",
                        "스핀로토무",
                        "旋转洛托姆",
                        "旋轉洛托姆",
                    ],
                },
            },
            Self::MowRotom => &FormData {
                names: NamesData {
                    names: [
                        "カットロトム",
                        "Mow Rotom",
                        "Motisma Tonte",
                        "Rotom Taglio",
                        "Schneid-Rotom",
                        "Rotom Corte",
                        "커트로토무",
                        "切割洛托姆",
                        "切割洛托姆",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum UxieForm {
    Base,
}
impl UxieForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MespritForm {
    Base,
}
impl MespritForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum AzelfForm {
    Base,
}
impl AzelfForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DialgaForm {
    Base,
    OriginForme,
}
impl DialgaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::OriginForme => &FormData {
                names: NamesData {
                    names: [
                        "オリジンフォルム",
                        "Origin Forme",
                        "Forme Originelle",
                        "Forma Originale",
                        "Urform",
                        "Forma Origen",
                        "오리진폼",
                        "起源形态",
                        "起源形態",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PalkiaForm {
    Base,
    OriginForme,
}
impl PalkiaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::OriginForme => &FormData {
                names: NamesData {
                    names: [
                        "オリジンフォルム",
                        "Origin Forme",
                        "Forme Originelle",
                        "Forma Originale",
                        "Urform",
                        "Forma Origen",
                        "오리진폼",
                        "起源形态",
                        "起源形態",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HeatranForm {
    Base,
}
impl HeatranForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RegigigasForm {
    Base,
}
impl RegigigasForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GiratinaForm {
    AlteredForme,
    OriginForme,
}
impl GiratinaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::AlteredForme => &FormData {
                names: NamesData {
                    names: [
                        "アナザーフォルム",
                        "Altered Forme",
                        "Forme Alternative",
                        "Forma Alterata",
                        "Wandelform",
                        "Forma Modificada",
                        "어나더폼",
                        "别种形态",
                        "別種形態",
                    ],
                },
            },
            Self::OriginForme => &FormData {
                names: NamesData {
                    names: [
                        "オリジンフォルム",
                        "Origin Forme",
                        "Forme Originelle",
                        "Forma Originale",
                        "Urform",
                        "Forma Origen",
                        "오리진폼",
                        "起源形态",
                        "起源形態",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CresseliaForm {
    Base,
}
impl CresseliaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PhioneForm {
    Base,
}
impl PhioneForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ManaphyForm {
    Base,
}
impl ManaphyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DarkraiForm {
    Base,
}
impl DarkraiForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ShayminForm {
    LandForme,
    SkyForme,
}
impl ShayminForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::LandForme => &FormData {
                names: NamesData {
                    names: [
                        "ランドフォルム",
                        "Land Forme",
                        "Forme Terrestre",
                        "Forma Terra",
                        "Landform",
                        "Forma Tierra",
                        "랜드폼",
                        "陆上形态",
                        "陸上形態",
                    ],
                },
            },
            Self::SkyForme => &FormData {
                names: NamesData {
                    names: [
                        "スカイフォルム",
                        "Sky Forme",
                        "Forme Céleste",
                        "Forma Cielo",
                        "Zenitform",
                        "Forma Cielo",
                        "스카이폼",
                        "天空形态",
                        "天空形態",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ArceusForm {
    Normal,
    Fighting,
    Flying,
    Poison,
    Ground,
    Rock,
    Bug,
    Ghost,
    Steel,
    Fire,
    Water,
    Grass,
    Electric,
    Psychic,
    Ice,
    Dragon,
    Dark,
    Fairy,
}
impl ArceusForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Normal => &FormData {
                names: NamesData {
                    names: [
                        "アルセウスのすがた",
                        "Arceus",
                        "Forme d’Arceus",
                        "Forma di Arceus",
                        "Arceus",
                        "Forma de Arceus",
                        "아르세우스의 모습",
                        "阿尔宙斯的样子",
                        "阿爾宙斯的樣子",
                    ],
                },
            },
            Self::Fighting => &FormData {
                names: NamesData {
                    names: [
                        "アルセウスのすがた",
                        "Arceus",
                        "Forme d’Arceus",
                        "Forma di Arceus",
                        "Arceus",
                        "Forma de Arceus",
                        "아르세우스의 모습",
                        "阿尔宙斯的样子",
                        "阿爾宙斯的樣子",
                    ],
                },
            },
            Self::Flying => &FormData {
                names: NamesData {
                    names: [
                        "アルセウスのすがた",
                        "Arceus",
                        "Forme d’Arceus",
                        "Forma di Arceus",
                        "Arceus",
                        "Forma de Arceus",
                        "아르세우스의 모습",
                        "阿尔宙斯的样子",
                        "阿爾宙斯的樣子",
                    ],
                },
            },
            Self::Poison => &FormData {
                names: NamesData {
                    names: [
                        "アルセウスのすがた",
                        "Arceus",
                        "Forme d’Arceus",
                        "Forma di Arceus",
                        "Arceus",
                        "Forma de Arceus",
                        "아르세우스의 모습",
                        "阿尔宙斯的样子",
                        "阿爾宙斯的樣子",
                    ],
                },
            },
            Self::Ground => &FormData {
                names: NamesData {
                    names: [
                        "アルセウスのすがた",
                        "Arceus",
                        "Forme d’Arceus",
                        "Forma di Arceus",
                        "Arceus",
                        "Forma de Arceus",
                        "아르세우스의 모습",
                        "阿尔宙斯的样子",
                        "阿爾宙斯的樣子",
                    ],
                },
            },
            Self::Rock => &FormData {
                names: NamesData {
                    names: [
                        "アルセウスのすがた",
                        "Arceus",
                        "Forme d’Arceus",
                        "Forma di Arceus",
                        "Arceus",
                        "Forma de Arceus",
                        "아르세우스의 모습",
                        "阿尔宙斯的样子",
                        "阿爾宙斯的樣子",
                    ],
                },
            },
            Self::Bug => &FormData {
                names: NamesData {
                    names: [
                        "アルセウスのすがた",
                        "Arceus",
                        "Forme d’Arceus",
                        "Forma di Arceus",
                        "Arceus",
                        "Forma de Arceus",
                        "아르세우스의 모습",
                        "阿尔宙斯的样子",
                        "阿爾宙斯的樣子",
                    ],
                },
            },
            Self::Ghost => &FormData {
                names: NamesData {
                    names: [
                        "アルセウスのすがた",
                        "Arceus",
                        "Forme d’Arceus",
                        "Forma di Arceus",
                        "Arceus",
                        "Forma de Arceus",
                        "아르세우스의 모습",
                        "阿尔宙斯的样子",
                        "阿爾宙斯的樣子",
                    ],
                },
            },
            Self::Steel => &FormData {
                names: NamesData {
                    names: [
                        "アルセウスのすがた",
                        "Arceus",
                        "Forme d’Arceus",
                        "Forma di Arceus",
                        "Arceus",
                        "Forma de Arceus",
                        "아르세우스의 모습",
                        "阿尔宙斯的样子",
                        "阿爾宙斯的樣子",
                    ],
                },
            },
            Self::Fire => &FormData {
                names: NamesData {
                    names: [
                        "アルセウスのすがた",
                        "Arceus",
                        "Forme d’Arceus",
                        "Forma di Arceus",
                        "Arceus",
                        "Forma de Arceus",
                        "아르세우스의 모습",
                        "阿尔宙斯的样子",
                        "阿爾宙斯的樣子",
                    ],
                },
            },
            Self::Water => &FormData {
                names: NamesData {
                    names: [
                        "アルセウスのすがた",
                        "Arceus",
                        "Forme d’Arceus",
                        "Forma di Arceus",
                        "Arceus",
                        "Forma de Arceus",
                        "아르세우스의 모습",
                        "阿尔宙斯的样子",
                        "阿爾宙斯的樣子",
                    ],
                },
            },
            Self::Grass => &FormData {
                names: NamesData {
                    names: [
                        "アルセウスのすがた",
                        "Arceus",
                        "Forme d’Arceus",
                        "Forma di Arceus",
                        "Arceus",
                        "Forma de Arceus",
                        "아르세우스의 모습",
                        "阿尔宙斯的样子",
                        "阿爾宙斯的樣子",
                    ],
                },
            },
            Self::Electric => &FormData {
                names: NamesData {
                    names: [
                        "アルセウスのすがた",
                        "Arceus",
                        "Forme d’Arceus",
                        "Forma di Arceus",
                        "Arceus",
                        "Forma de Arceus",
                        "아르세우스의 모습",
                        "阿尔宙斯的样子",
                        "阿爾宙斯的樣子",
                    ],
                },
            },
            Self::Psychic => &FormData {
                names: NamesData {
                    names: [
                        "アルセウスのすがた",
                        "Arceus",
                        "Forme d’Arceus",
                        "Forma di Arceus",
                        "Arceus",
                        "Forma de Arceus",
                        "아르세우스의 모습",
                        "阿尔宙斯的样子",
                        "阿爾宙斯的樣子",
                    ],
                },
            },
            Self::Ice => &FormData {
                names: NamesData {
                    names: [
                        "アルセウスのすがた",
                        "Arceus",
                        "Forme d’Arceus",
                        "Forma di Arceus",
                        "Arceus",
                        "Forma de Arceus",
                        "아르세우스의 모습",
                        "阿尔宙斯的样子",
                        "阿爾宙斯的樣子",
                    ],
                },
            },
            Self::Dragon => &FormData {
                names: NamesData {
                    names: [
                        "アルセウスのすがた",
                        "Arceus",
                        "Forme d’Arceus",
                        "Forma di Arceus",
                        "Arceus",
                        "Forma de Arceus",
                        "아르세우스의 모습",
                        "阿尔宙斯的样子",
                        "阿爾宙斯的樣子",
                    ],
                },
            },
            Self::Dark => &FormData {
                names: NamesData {
                    names: [
                        "アルセウスのすがた",
                        "Arceus",
                        "Forme d’Arceus",
                        "Forma di Arceus",
                        "Arceus",
                        "Forma de Arceus",
                        "아르세우스의 모습",
                        "阿尔宙斯的样子",
                        "阿爾宙斯的樣子",
                    ],
                },
            },
            Self::Fairy => &FormData {
                names: NamesData {
                    names: [
                        "アルセウスのすがた",
                        "Arceus",
                        "Forme d’Arceus",
                        "Forma di Arceus",
                        "Arceus",
                        "Forma de Arceus",
                        "아르세우스의 모습",
                        "阿尔宙斯的样子",
                        "阿爾宙斯的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum VictiniForm {
    Base,
}
impl VictiniForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SnivyForm {
    Base,
}
impl SnivyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ServineForm {
    Base,
}
impl ServineForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SerperiorForm {
    Base,
}
impl SerperiorForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TepigForm {
    Base,
}
impl TepigForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PigniteForm {
    Base,
}
impl PigniteForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum EmboarForm {
    Base,
}
impl EmboarForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum OshawottForm {
    Base,
}
impl OshawottForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DewottForm {
    Base,
}
impl DewottForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SamurottForm {
    Base,
    HisuianForm,
}
impl SamurottForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::HisuianForm => &FormData {
                names: NamesData {
                    names: [
                        "ヒスイのすがた",
                        "Hisuian Form",
                        "Forme de Hisui",
                        "Forma di Hisui",
                        "Hisui-Form",
                        "Forma de Hisui",
                        "히스이의 모습",
                        "洗翠的样子",
                        "洗翠的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PatratForm {
    Base,
}
impl PatratForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum WatchogForm {
    Base,
}
impl WatchogForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LillipupForm {
    Base,
}
impl LillipupForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HerdierForm {
    Base,
}
impl HerdierForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum StoutlandForm {
    Base,
}
impl StoutlandForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PurrloinForm {
    Base,
}
impl PurrloinForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LiepardForm {
    Base,
}
impl LiepardForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PansageForm {
    Base,
}
impl PansageForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SimisageForm {
    Base,
}
impl SimisageForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PansearForm {
    Base,
}
impl PansearForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SimisearForm {
    Base,
}
impl SimisearForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PanpourForm {
    Base,
}
impl PanpourForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SimipourForm {
    Base,
}
impl SimipourForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MunnaForm {
    Base,
}
impl MunnaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MusharnaForm {
    Base,
}
impl MusharnaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PidoveForm {
    Base,
}
impl PidoveForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TranquillForm {
    Base,
}
impl TranquillForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum UnfezantForm {
    Male,
    Female,
}
impl UnfezantForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Male => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Female => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BlitzleForm {
    Base,
}
impl BlitzleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ZebstrikaForm {
    Base,
}
impl ZebstrikaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RoggenrolaForm {
    Base,
}
impl RoggenrolaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BoldoreForm {
    Base,
}
impl BoldoreForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GigalithForm {
    Base,
}
impl GigalithForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum WoobatForm {
    Base,
}
impl WoobatForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SwoobatForm {
    Base,
}
impl SwoobatForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DrilburForm {
    Base,
}
impl DrilburForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ExcadrillForm {
    Base,
}
impl ExcadrillForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum AudinoForm {
    Base,
    Mega,
}
impl AudinoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガタブンネ",
                        "Mega Audino",
                        "Méga-Nanméouïe",
                        "MegaAudino",
                        "Mega-Ohrdoch",
                        "Mega-Audino",
                        "메가다부니",
                        "超级差不多娃娃",
                        "超級差不多娃娃",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TimburrForm {
    Base,
}
impl TimburrForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GurdurrForm {
    Base,
}
impl GurdurrForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ConkeldurrForm {
    Base,
}
impl ConkeldurrForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TympoleForm {
    Base,
}
impl TympoleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PalpitoadForm {
    Base,
}
impl PalpitoadForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SeismitoadForm {
    Base,
}
impl SeismitoadForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ThrohForm {
    Base,
}
impl ThrohForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SawkForm {
    Base,
}
impl SawkForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SewaddleForm {
    Base,
}
impl SewaddleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SwadloonForm {
    Base,
}
impl SwadloonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LeavannyForm {
    Base,
}
impl LeavannyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum VenipedeForm {
    Base,
}
impl VenipedeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum WhirlipedeForm {
    Base,
}
impl WhirlipedeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ScolipedeForm {
    Base,
}
impl ScolipedeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CottoneeForm {
    Base,
}
impl CottoneeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum WhimsicottForm {
    Base,
}
impl WhimsicottForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PetililForm {
    Base,
}
impl PetililForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LilligantForm {
    Base,
    HisuianForm,
    LadyForm,
}
impl LilligantForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::HisuianForm => &FormData {
                names: NamesData {
                    names: [
                        "ヒスイのすがた",
                        "Hisuian Form",
                        "Forme de Hisui",
                        "Forma di Hisui",
                        "Hisui-Form",
                        "Forma de Hisui",
                        "히스이의 모습",
                        "洗翠的样子",
                        "洗翠的樣子",
                    ],
                },
            },
            Self::LadyForm => &FormData {
                names: NamesData {
                    names: [
                        "クイーンのすがた",
                        "Lady Form",
                        "Forme de Reine",
                        "Forma Regina",
                        "Königinnenform",
                        "Forma de Señora",
                        "여왕의 모습",
                        "女王的样子",
                        "女王的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BasculinForm {
    RedStripedForm,
    BlueStripedForm,
    WhiteStripedForm,
}
impl BasculinForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::RedStripedForm => &FormData {
                names: NamesData {
                    names: [
                        "あかすじのすがた",
                        "Red-Striped Form",
                        "Motif Rouge",
                        "Forma Linearossa",
                        "Rotlinige Form",
                        "Forma Raya Roja",
                        "적색근의 모습",
                        "红条纹的样子",
                        "紅條紋的樣子",
                    ],
                },
            },
            Self::BlueStripedForm => &FormData {
                names: NamesData {
                    names: [
                        "あおすじのすがた",
                        "Blue-Striped Form",
                        "Motif Bleu",
                        "Forma Lineablu",
                        "Blaulinige Form",
                        "Forma Raya Azul",
                        "청색근의 모습",
                        "蓝条纹的样子",
                        "藍條紋的樣子",
                    ],
                },
            },
            Self::WhiteStripedForm => &FormData {
                names: NamesData {
                    names: [
                        "しろすじのすがた",
                        "White-Striped Form",
                        "Motif Blanc",
                        "Forma Lineabianca",
                        "Weißlinige Form",
                        "Forma Raya Blanca",
                        "백색근의 모습",
                        "白条纹的样子",
                        "白條紋的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SandileForm {
    Base,
}
impl SandileForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KrokorokForm {
    Base,
}
impl KrokorokForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KrookodileForm {
    Base,
}
impl KrookodileForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DarumakaForm {
    Base,
    GalarianForm,
}
impl DarumakaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::GalarianForm => &FormData {
                names: NamesData {
                    names: [
                        "ガラルのすがた",
                        "Galarian Form",
                        "Forme de Galar",
                        "Forma di Galar",
                        "Galar-Form",
                        "Forma de Galar",
                        "가라르의 모습",
                        "伽勒尔的样子",
                        "伽勒爾的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DarmanitanForm {
    StandardMode,
    ZenMode,
    GalarianForm,
    GalarianZenMode,
}
impl DarmanitanForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::StandardMode => &FormData {
                names: NamesData {
                    names: [
                        "ノーマルモード",
                        "Standard Mode",
                        "Mode Normal",
                        "Stato Normale",
                        "Normalmodus",
                        "Modo Normal",
                        "노말모드",
                        "普通模式",
                        "普通模式",
                    ],
                },
            },
            Self::ZenMode => &FormData {
                names: NamesData {
                    names: [
                        "ダルマモード",
                        "Zen Mode",
                        "Mode Transe",
                        "Stato Zen",
                        "Trance-Modus",
                        "Modo Daruma",
                        "달마모드",
                        "达摩模式",
                        "達摩模式",
                    ],
                },
            },
            Self::GalarianForm => &FormData {
                names: NamesData {
                    names: [
                        "ガラルのすがた",
                        "Galarian Form",
                        "Forme de Galar",
                        "Forma di Galar",
                        "Galar-Form",
                        "Forma de Galar",
                        "가라르의 모습",
                        "伽勒尔的样子",
                        "伽勒爾的樣子",
                    ],
                },
            },
            Self::GalarianZenMode => &FormData {
                names: NamesData {
                    names: [
                        "ダルマモード",
                        "Zen Mode",
                        "Mode Transe",
                        "Stato Zen",
                        "Trance-Modus",
                        "Modo Daruma",
                        "달마모드",
                        "达摩模式",
                        "達摩模式",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MaractusForm {
    Base,
}
impl MaractusForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DwebbleForm {
    Base,
}
impl DwebbleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CrustleForm {
    Base,
}
impl CrustleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ScraggyForm {
    Base,
}
impl ScraggyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ScraftyForm {
    Base,
}
impl ScraftyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SigilyphForm {
    Base,
}
impl SigilyphForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum YamaskForm {
    Base,
    GalarianForm,
}
impl YamaskForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::GalarianForm => &FormData {
                names: NamesData {
                    names: [
                        "ガラルのすがた",
                        "Galarian Form",
                        "Forme de Galar",
                        "Forma di Galar",
                        "Galar-Form",
                        "Forma de Galar",
                        "가라르의 모습",
                        "伽勒尔的样子",
                        "伽勒爾的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CofagrigusForm {
    Base,
}
impl CofagrigusForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TirtougaForm {
    Base,
}
impl TirtougaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CarracostaForm {
    Base,
}
impl CarracostaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ArchenForm {
    Base,
}
impl ArchenForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ArcheopsForm {
    Base,
}
impl ArcheopsForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TrubbishForm {
    Base,
}
impl TrubbishForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GarbodorForm {
    Base,
    Gigantamax,
}
impl GarbodorForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Gigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ZoruaForm {
    Base,
    HisuianForm,
}
impl ZoruaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::HisuianForm => &FormData {
                names: NamesData {
                    names: [
                        "ヒスイのすがた",
                        "Hisuian Form",
                        "Forme de Hisui",
                        "Forma di Hisui",
                        "Hisui-Form",
                        "Forma de Hisui",
                        "히스이의 모습",
                        "洗翠的样子",
                        "洗翠的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ZoroarkForm {
    Base,
    HisuianForm,
}
impl ZoroarkForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::HisuianForm => &FormData {
                names: NamesData {
                    names: [
                        "ヒスイのすがた",
                        "Hisuian Form",
                        "Forme de Hisui",
                        "Forma di Hisui",
                        "Hisui-Form",
                        "Forma de Hisui",
                        "히스이의 모습",
                        "洗翠的样子",
                        "洗翠的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MinccinoForm {
    Base,
}
impl MinccinoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CinccinoForm {
    Base,
}
impl CinccinoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GothitaForm {
    Base,
}
impl GothitaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GothoritaForm {
    Base,
}
impl GothoritaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GothitelleForm {
    Base,
}
impl GothitelleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SolosisForm {
    Base,
}
impl SolosisForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DuosionForm {
    Base,
}
impl DuosionForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ReuniclusForm {
    Base,
}
impl ReuniclusForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DucklettForm {
    Base,
}
impl DucklettForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SwannaForm {
    Base,
}
impl SwannaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum VanilliteForm {
    Base,
}
impl VanilliteForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum VanillishForm {
    Base,
}
impl VanillishForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum VanilluxeForm {
    Base,
}
impl VanilluxeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DeerlingForm {
    SpringForm,
    SummerForm,
    AutumnForm,
    WinterForm,
}
impl DeerlingForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::SpringForm => &FormData {
                names: NamesData {
                    names: [
                        "はるのすがた",
                        "Spring Form",
                        "Forme Printemps",
                        "Forma Primavera",
                        "Frühlingsform",
                        "Forma Primavera",
                        "봄의 모습",
                        "春天的样子",
                        "春天的樣子",
                    ],
                },
            },
            Self::SummerForm => &FormData {
                names: NamesData {
                    names: [
                        "なつのすがた",
                        "Summer Form",
                        "Forme Été",
                        "Forma Estate",
                        "Sommerform",
                        "Forma Verano",
                        "여름의 모습",
                        "夏天的样子",
                        "夏天的樣子",
                    ],
                },
            },
            Self::AutumnForm => &FormData {
                names: NamesData {
                    names: [
                        "あきのすがた",
                        "Autumn Form",
                        "Forme Automne",
                        "Forma Autunno",
                        "Herbstform",
                        "Forma Otoño",
                        "가을의 모습",
                        "秋天的样子",
                        "秋天的樣子",
                    ],
                },
            },
            Self::WinterForm => &FormData {
                names: NamesData {
                    names: [
                        "ふゆのすがた",
                        "Winter Form",
                        "Forme Hiver",
                        "Forma Inverno",
                        "Winterform",
                        "Forma Invierno",
                        "겨울의 모습",
                        "冬天的样子",
                        "冬天的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SawsbuckForm {
    SpringForm,
    SummerForm,
    AutumnForm,
    WinterForm,
}
impl SawsbuckForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::SpringForm => &FormData {
                names: NamesData {
                    names: [
                        "はるのすがた",
                        "Spring Form",
                        "Forme Printemps",
                        "Forma Primavera",
                        "Frühlingsform",
                        "Forma Primavera",
                        "봄의 모습",
                        "春天的样子",
                        "春天的樣子",
                    ],
                },
            },
            Self::SummerForm => &FormData {
                names: NamesData {
                    names: [
                        "なつのすがた",
                        "Summer Form",
                        "Forme Été",
                        "Forma Estate",
                        "Sommerform",
                        "Forma Verano",
                        "여름의 모습",
                        "夏天的样子",
                        "夏天的樣子",
                    ],
                },
            },
            Self::AutumnForm => &FormData {
                names: NamesData {
                    names: [
                        "あきのすがた",
                        "Autumn Form",
                        "Forme Automne",
                        "Forma Autunno",
                        "Herbstform",
                        "Forma Otoño",
                        "가을의 모습",
                        "秋天的样子",
                        "秋天的樣子",
                    ],
                },
            },
            Self::WinterForm => &FormData {
                names: NamesData {
                    names: [
                        "ふゆのすがた",
                        "Winter Form",
                        "Forme Hiver",
                        "Forma Inverno",
                        "Winterform",
                        "Forma Invierno",
                        "겨울의 모습",
                        "冬天的样子",
                        "冬天的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum EmolgaForm {
    Base,
}
impl EmolgaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KarrablastForm {
    Base,
}
impl KarrablastForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum EscavalierForm {
    Base,
}
impl EscavalierForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FoongusForm {
    Base,
}
impl FoongusForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum AmoongussForm {
    Base,
}
impl AmoongussForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FrillishForm {
    Male,
    Female,
}
impl FrillishForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Male => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Female => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum JellicentForm {
    Male,
    Female,
}
impl JellicentForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Male => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Female => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum AlomomolaForm {
    Base,
}
impl AlomomolaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum JoltikForm {
    Base,
}
impl JoltikForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GalvantulaForm {
    Base,
}
impl GalvantulaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FerroseedForm {
    Base,
}
impl FerroseedForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FerrothornForm {
    Base,
}
impl FerrothornForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KlinkForm {
    Base,
}
impl KlinkForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KlangForm {
    Base,
}
impl KlangForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KlinklangForm {
    Base,
}
impl KlinklangForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TynamoForm {
    Base,
}
impl TynamoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum EelektrikForm {
    Base,
}
impl EelektrikForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum EelektrossForm {
    Base,
}
impl EelektrossForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ElgyemForm {
    Base,
}
impl ElgyemForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BeheeyemForm {
    Base,
}
impl BeheeyemForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LitwickForm {
    Base,
}
impl LitwickForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LampentForm {
    Base,
}
impl LampentForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ChandelureForm {
    Base,
}
impl ChandelureForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum AxewForm {
    Base,
}
impl AxewForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FraxureForm {
    Base,
}
impl FraxureForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HaxorusForm {
    Base,
}
impl HaxorusForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CubchooForm {
    Base,
}
impl CubchooForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BearticForm {
    Base,
}
impl BearticForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CryogonalForm {
    Base,
}
impl CryogonalForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ShelmetForm {
    Base,
}
impl ShelmetForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum AccelgorForm {
    Base,
}
impl AccelgorForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum StunfiskForm {
    Base,
    GalarianForm,
}
impl StunfiskForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::GalarianForm => &FormData {
                names: NamesData {
                    names: [
                        "ガラルのすがた",
                        "Galarian Form",
                        "Forme de Galar",
                        "Forma di Galar",
                        "Galar-Form",
                        "Forma de Galar",
                        "가라르의 모습",
                        "伽勒尔的样子",
                        "伽勒爾的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MienfooForm {
    Base,
}
impl MienfooForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MienshaoForm {
    Base,
}
impl MienshaoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DruddigonForm {
    Base,
}
impl DruddigonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GolettForm {
    Base,
}
impl GolettForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GolurkForm {
    Base,
}
impl GolurkForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PawniardForm {
    Base,
}
impl PawniardForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BisharpForm {
    Base,
}
impl BisharpForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BouffalantForm {
    Base,
}
impl BouffalantForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RuffletForm {
    Base,
}
impl RuffletForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BraviaryForm {
    Base,
    HisuianForm,
}
impl BraviaryForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::HisuianForm => &FormData {
                names: NamesData {
                    names: [
                        "ヒスイのすがた",
                        "Hisuian Form",
                        "Forme de Hisui",
                        "Forma di Hisui",
                        "Hisui-Form",
                        "Forma de Hisui",
                        "히스이의 모습",
                        "洗翠的样子",
                        "洗翠的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum VullabyForm {
    Base,
}
impl VullabyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MandibuzzForm {
    Base,
}
impl MandibuzzForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HeatmorForm {
    Base,
}
impl HeatmorForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DurantForm {
    Base,
}
impl DurantForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DeinoForm {
    Base,
}
impl DeinoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ZweilousForm {
    Base,
}
impl ZweilousForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HydreigonForm {
    Base,
}
impl HydreigonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LarvestaForm {
    Base,
}
impl LarvestaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum VolcaronaForm {
    Base,
}
impl VolcaronaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CobalionForm {
    Base,
}
impl CobalionForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TerrakionForm {
    Base,
}
impl TerrakionForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum VirizionForm {
    Base,
}
impl VirizionForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TornadusForm {
    IncarnateForme,
    TherianForme,
}
impl TornadusForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::IncarnateForme => &FormData {
                names: NamesData {
                    names: [
                        "けしんフォルム",
                        "Incarnate Forme",
                        "Forme Avatar",
                        "Forma Incarnazione",
                        "Inkarnationsform",
                        "Forma Avatar",
                        "화신폼",
                        "化身形态",
                        "化身形態",
                    ],
                },
            },
            Self::TherianForme => &FormData {
                names: NamesData {
                    names: [
                        "れいじゅうフォルム",
                        "Therian Forme",
                        "Forme Totémique",
                        "Forma Totem",
                        "Tiergeistform",
                        "Forma Tótem",
                        "영물폼",
                        "灵兽形态",
                        "靈獸形態",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ThundurusForm {
    IncarnateForme,
    TherianForme,
}
impl ThundurusForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::IncarnateForme => &FormData {
                names: NamesData {
                    names: [
                        "けしんフォルム",
                        "Incarnate Forme",
                        "Forme Avatar",
                        "Forma Incarnazione",
                        "Inkarnationsform",
                        "Forma Avatar",
                        "화신폼",
                        "化身形态",
                        "化身形態",
                    ],
                },
            },
            Self::TherianForme => &FormData {
                names: NamesData {
                    names: [
                        "れいじゅうフォルム",
                        "Therian Forme",
                        "Forme Totémique",
                        "Forma Totem",
                        "Tiergeistform",
                        "Forma Tótem",
                        "영물폼",
                        "灵兽形态",
                        "靈獸形態",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ReshiramForm {
    Base,
}
impl ReshiramForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ZekromForm {
    Base,
}
impl ZekromForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LandorusForm {
    IncarnateForme,
    TherianForme,
}
impl LandorusForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::IncarnateForme => &FormData {
                names: NamesData {
                    names: [
                        "けしんフォルム",
                        "Incarnate Forme",
                        "Forme Avatar",
                        "Forma Incarnazione",
                        "Inkarnationsform",
                        "Forma Avatar",
                        "화신폼",
                        "化身形态",
                        "化身形態",
                    ],
                },
            },
            Self::TherianForme => &FormData {
                names: NamesData {
                    names: [
                        "れいじゅうフォルム",
                        "Therian Forme",
                        "Forme Totémique",
                        "Forma Totem",
                        "Tiergeistform",
                        "Forma Tótem",
                        "영물폼",
                        "灵兽形态",
                        "靈獸形態",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KyuremForm {
    Kyurem,
    WhiteKyurem,
    BlackKyurem,
}
impl KyuremForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Kyurem => &FormData {
                names: NamesData {
                    names: [
                        "キュレムのすがた",
                        "Kyurem",
                        "Forme de Kyurem",
                        "Forma di Kyurem",
                        "Kyurem",
                        "Forma de Kyurem",
                        "큐레무의 모습",
                        "酋雷姆的样子",
                        "酋雷姆的樣子",
                    ],
                },
            },
            Self::WhiteKyurem => &FormData {
                names: NamesData {
                    names: [
                        "ホワイトキュレム",
                        "White Kyurem",
                        "Kyurem Blanc",
                        "Kyurem Bianco",
                        "Weißes Kyurem",
                        "Kyurem Blanco",
                        "화이트큐레무",
                        "焰白酋雷姆",
                        "焰白酋雷姆",
                    ],
                },
            },
            Self::BlackKyurem => &FormData {
                names: NamesData {
                    names: [
                        "ブラックキュレム",
                        "Black Kyurem",
                        "Kyurem Noir",
                        "Kyurem Nero",
                        "Schwarzes Kyurem",
                        "Kyurem Negro",
                        "블랙큐레무",
                        "暗黑酋雷姆",
                        "闇黑酋雷姆",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KeldeoForm {
    OrdinaryForm,
    ResoluteForm,
}
impl KeldeoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::OrdinaryForm => &FormData {
                names: NamesData {
                    names: [
                        "いつものすがた",
                        "Ordinary Form",
                        "Aspect Normal",
                        "Forma Normale",
                        "Standardform",
                        "Forma Habitual",
                        "평상시 모습",
                        "平常的样子",
                        "平常的樣子",
                    ],
                },
            },
            Self::ResoluteForm => &FormData {
                names: NamesData {
                    names: [
                        "かくごのすがた",
                        "Resolute Form",
                        "Aspect Décidé",
                        "Forma Risoluta",
                        "Resolutform",
                        "Forma Brío",
                        "각오의 모습",
                        "觉悟的样子",
                        "覺悟的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MeloettaForm {
    AriaForme,
    PirouetteForme,
}
impl MeloettaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::AriaForme => &FormData {
                names: NamesData {
                    names: [
                        "ボイスフォルム",
                        "Aria Forme",
                        "Forme Chant",
                        "Forma Canto",
                        "Gesangsform",
                        "Forma Lírica",
                        "보이스폼",
                        "歌声形态",
                        "歌聲形態",
                    ],
                },
            },
            Self::PirouetteForme => &FormData {
                names: NamesData {
                    names: [
                        "ステップフォルム",
                        "Pirouette Forme",
                        "Forme Danse",
                        "Forma Danza",
                        "Tanzform",
                        "Forma Danza",
                        "스텝폼",
                        "舞步形态",
                        "舞步形態",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GenesectForm {
    Genesect,
    DouseDrive,
    ShockDrive,
    BurnDrive,
    ChillDrive,
}
impl GenesectForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Genesect => &FormData {
                names: NamesData {
                    names: [
                        "ゲノセクトのすがた",
                        "Genesect",
                        "Forme de Genesect",
                        "Forma di Genesect",
                        "Genesect",
                        "Forma de Genesect",
                        "게노세크트의 모습",
                        "盖诺赛克特的样子",
                        "蓋諾賽克特的樣子",
                    ],
                },
            },
            Self::DouseDrive => &FormData {
                names: NamesData {
                    names: [
                        "ゲノセクトのすがた",
                        "Genesect",
                        "Forme de Genesect",
                        "Forma di Genesect",
                        "Genesect",
                        "Forma de Genesect",
                        "게노세크트의 모습",
                        "盖诺赛克特的样子",
                        "蓋諾賽克特的樣子",
                    ],
                },
            },
            Self::ShockDrive => &FormData {
                names: NamesData {
                    names: [
                        "ゲノセクトのすがた",
                        "Genesect",
                        "Forme de Genesect",
                        "Forma di Genesect",
                        "Genesect",
                        "Forma de Genesect",
                        "게노세크트의 모습",
                        "盖诺赛克特的样子",
                        "蓋諾賽克特的樣子",
                    ],
                },
            },
            Self::BurnDrive => &FormData {
                names: NamesData {
                    names: [
                        "ゲノセクトのすがた",
                        "Genesect",
                        "Forme de Genesect",
                        "Forma di Genesect",
                        "Genesect",
                        "Forma de Genesect",
                        "게노세크트의 모습",
                        "盖诺赛克特的样子",
                        "蓋諾賽克特的樣子",
                    ],
                },
            },
            Self::ChillDrive => &FormData {
                names: NamesData {
                    names: [
                        "ゲノセクトのすがた",
                        "Genesect",
                        "Forme de Genesect",
                        "Forma di Genesect",
                        "Genesect",
                        "Forma de Genesect",
                        "게노세크트의 모습",
                        "盖诺赛克特的样子",
                        "蓋諾賽克特的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ChespinForm {
    Base,
}
impl ChespinForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum QuilladinForm {
    Base,
}
impl QuilladinForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ChesnaughtForm {
    Base,
}
impl ChesnaughtForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FennekinForm {
    Base,
}
impl FennekinForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BraixenForm {
    Base,
}
impl BraixenForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DelphoxForm {
    Base,
}
impl DelphoxForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FroakieForm {
    Base,
}
impl FroakieForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FrogadierForm {
    Base,
}
impl FrogadierForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GreninjaForm {
    Base,
    BattleBond,
    AshGreninja,
}
impl GreninjaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::BattleBond => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::AshGreninja => &FormData {
                names: NamesData {
                    names: [
                        "サトシゲッコウガ",
                        "Ash-Greninja",
                        "Forme Sacha",
                        "Forma Ash",
                        "Ash-Form",
                        "Forma Ash",
                        "지우개굴닌자",
                        "小智版甲贺忍蛙",
                        "小智版甲賀忍蛙",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BunnelbyForm {
    Base,
}
impl BunnelbyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DiggersbyForm {
    Base,
}
impl DiggersbyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FletchlingForm {
    Base,
}
impl FletchlingForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FletchinderForm {
    Base,
}
impl FletchinderForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TalonflameForm {
    Base,
}
impl TalonflameForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ScatterbugForm {
    IcySnowPattern,
    PolarPattern,
    TundraPattern,
    ContinentalPattern,
    GardenPattern,
    ElegantPattern,
    MeadowPattern,
    ModernPattern,
    MarinePattern,
    ArchipelagoPattern,
    HighPlainsPattern,
    SandstormPattern,
    RiverPattern,
    MonsoonPattern,
    SavannaPattern,
    SunPattern,
    OceanPattern,
    JunglePattern,
    FancyPattern,
    PokeBallPattern,
}
impl ScatterbugForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::IcySnowPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::PolarPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::TundraPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::ContinentalPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::GardenPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::ElegantPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::MeadowPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::ModernPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::MarinePattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::ArchipelagoPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::HighPlainsPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::SandstormPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::RiverPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::MonsoonPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::SavannaPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::SunPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::OceanPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::JunglePattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::FancyPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::PokeBallPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SpewpaForm {
    IcySnowPattern,
    PolarPattern,
    TundraPattern,
    ContinentalPattern,
    GardenPattern,
    ElegantPattern,
    MeadowPattern,
    ModernPattern,
    MarinePattern,
    ArchipelagoPattern,
    HighPlainsPattern,
    SandstormPattern,
    RiverPattern,
    MonsoonPattern,
    SavannaPattern,
    SunPattern,
    OceanPattern,
    JunglePattern,
    FancyPattern,
    PokeBallPattern,
}
impl SpewpaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::IcySnowPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::PolarPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::TundraPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::ContinentalPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::GardenPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::ElegantPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::MeadowPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::ModernPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::MarinePattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::ArchipelagoPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::HighPlainsPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::SandstormPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::RiverPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::MonsoonPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::SavannaPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::SunPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::OceanPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::JunglePattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::FancyPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::PokeBallPattern => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum VivillonForm {
    IcySnowPattern,
    PolarPattern,
    TundraPattern,
    ContinentalPattern,
    GardenPattern,
    ElegantPattern,
    MeadowPattern,
    ModernPattern,
    MarinePattern,
    ArchipelagoPattern,
    HighPlainsPattern,
    SandstormPattern,
    RiverPattern,
    MonsoonPattern,
    SavannaPattern,
    SunPattern,
    OceanPattern,
    JunglePattern,
    FancyPattern,
    PokeBallPattern,
}
impl VivillonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::IcySnowPattern => &FormData {
                names: NamesData {
                    names: [
                        "ひょうせつのもよう",
                        "Icy Snow Pattern",
                        "Motif Blizzard",
                        "Motivo Nevi Perenni",
                        "Frostmuster",
                        "Motivo Polar",
                        "빙설의 모양",
                        "冰雪花纹",
                        "冰雪花紋",
                    ],
                },
            },
            Self::PolarPattern => &FormData {
                names: NamesData {
                    names: [
                        "ゆきぐにのもよう",
                        "Polar Pattern",
                        "Motif Banquise",
                        "Motivo Nordico",
                        "Schneefeldmuster",
                        "Motivo Taiga",
                        "설국의 모양",
                        "雪国花纹",
                        "雪國花紋",
                    ],
                },
            },
            Self::TundraPattern => &FormData {
                names: NamesData {
                    names: [
                        "せつげんのもよう",
                        "Tundra Pattern",
                        "Motif Glace",
                        "Motivo Manto di Neve",
                        "Flockenmuster",
                        "Motivo Tundra",
                        "설원의 모양",
                        "雪原花纹",
                        "雪原花紋",
                    ],
                },
            },
            Self::ContinentalPattern => &FormData {
                names: NamesData {
                    names: [
                        "たいりくのもよう",
                        "Continental Pattern",
                        "Motif Continent",
                        "Motivo Continentale",
                        "Kontinentalmuster",
                        "Motivo Continental",
                        "대륙의 모양",
                        "大陆花纹",
                        "大陸花紋",
                    ],
                },
            },
            Self::GardenPattern => &FormData {
                names: NamesData {
                    names: [
                        "ていえんのもよう",
                        "Garden Pattern",
                        "Motif Verdure",
                        "Motivo Prato",
                        "Ziergartenmuster",
                        "Motivo Vergel",
                        "정원의 모양",
                        "庭园花纹",
                        "庭園花紋",
                    ],
                },
            },
            Self::ElegantPattern => &FormData {
                names: NamesData {
                    names: [
                        "みやびなもよう",
                        "Elegant Pattern",
                        "Motif Monarchie",
                        "Motivo Eleganza",
                        "Prunkmuster",
                        "Motivo Oriental",
                        "우아한 모양",
                        "高雅花纹",
                        "高雅花紋",
                    ],
                },
            },
            Self::MeadowPattern => &FormData {
                names: NamesData {
                    names: [
                        "はなぞののもよう",
                        "Meadow Pattern",
                        "Motif Floraison",
                        "Motivo Giardinfiore",
                        "Blumenmeermuster",
                        "Motivo Floral",
                        "화원의 모양",
                        "花园花纹",
                        "花園花紋",
                    ],
                },
            },
            Self::ModernPattern => &FormData {
                names: NamesData {
                    names: [
                        "モダンなもよう",
                        "Modern Pattern",
                        "Motif Métropole",
                        "Motivo Trendy",
                        "Innovationsmuster",
                        "Motivo Moderno",
                        "모던한 모양",
                        "摩登花纹",
                        "摩登花紋",
                    ],
                },
            },
            Self::MarinePattern => &FormData {
                names: NamesData {
                    names: [
                        "マリンのもよう",
                        "Marine Pattern",
                        "Motif Rivage",
                        "Motivo Marino",
                        "Aquamarinmuster",
                        "Motivo Marino",
                        "마린의 모양",
                        "大海花纹",
                        "大海花紋",
                    ],
                },
            },
            Self::ArchipelagoPattern => &FormData {
                names: NamesData {
                    names: [
                        "ぐんとうのもよう",
                        "Archipelago Pattern",
                        "Motif Archipel",
                        "Motivo Arcipelago",
                        "Archipelmuster",
                        "Motivo Isleño",
                        "군도의 모양",
                        "群岛花纹",
                        "群島花紋",
                    ],
                },
            },
            Self::HighPlainsPattern => &FormData {
                names: NamesData {
                    names: [
                        "こうやのもよう",
                        "High Plains Pattern",
                        "Motif Sécheresse",
                        "Motivo Deserto",
                        "Dürremuster",
                        "Motivo Estepa",
                        "황야의 모양",
                        "荒野花纹",
                        "荒野花紋",
                    ],
                },
            },
            Self::SandstormPattern => &FormData {
                names: NamesData {
                    names: [
                        "さじんのもよう",
                        "Sandstorm Pattern",
                        "Motif Sable",
                        "Motivo Sabbia",
                        "Sandmuster",
                        "Motivo Desierto",
                        "사진의 모양",
                        "沙尘花纹",
                        "沙塵花紋",
                    ],
                },
            },
            Self::RiverPattern => &FormData {
                names: NamesData {
                    names: [
                        "たいがのもよう",
                        "River Pattern",
                        "Motif Delta",
                        "Motivo Fluviale",
                        "Flussdeltamuster",
                        "Motivo Oasis",
                        "대하의 모양",
                        "大河花纹",
                        "大河花紋",
                    ],
                },
            },
            Self::MonsoonPattern => &FormData {
                names: NamesData {
                    names: [
                        "スコールのもよう",
                        "Monsoon Pattern",
                        "Motif Cyclone",
                        "Motivo Pluviale",
                        "Monsunmuster",
                        "Motivo Monzón",
                        "스콜의 모양",
                        "骤雨花纹",
                        "驟雨花紋",
                    ],
                },
            },
            Self::SavannaPattern => &FormData {
                names: NamesData {
                    names: [
                        "サバンナのもよう",
                        "Savanna Pattern",
                        "Motif Mangrove",
                        "Motivo Savana",
                        "Savannenmuster",
                        "Motivo Pantano",
                        "사바나의 모양",
                        "热带草原花纹",
                        "熱帶草原花紋",
                    ],
                },
            },
            Self::SunPattern => &FormData {
                names: NamesData {
                    names: [
                        "たいようのもよう",
                        "Sun Pattern",
                        "Motif Zénith",
                        "Motivo Solare",
                        "Sonnenmuster",
                        "Motivo Solar",
                        "태양의 모양",
                        "太阳花纹",
                        "太陽花紋",
                    ],
                },
            },
            Self::OceanPattern => &FormData {
                names: NamesData {
                    names: [
                        "オーシャンのもよう",
                        "Ocean Pattern",
                        "Motif Soleil Levant",
                        "Motivo Oceanico",
                        "Ozeanmuster",
                        "Motivo Océano",
                        "오션의 모양",
                        "大洋花纹",
                        "大洋花紋",
                    ],
                },
            },
            Self::JunglePattern => &FormData {
                names: NamesData {
                    names: [
                        "ジャングルのもよう",
                        "Jungle Pattern",
                        "Motif Jungle",
                        "Motivo Giungla",
                        "Dschungelmuster",
                        "Motivo Jungla",
                        "정글의 모양",
                        "热带雨林花纹",
                        "熱帶雨林花紋",
                    ],
                },
            },
            Self::FancyPattern => &FormData {
                names: NamesData {
                    names: [
                        "ファンシーなもよう",
                        "Fancy Pattern",
                        "Motif Fantaisie",
                        "Motivo Sbarazzino",
                        "Fantasiemuster",
                        "Motivo Fantasía",
                        "팬시한 모양",
                        "幻彩花纹",
                        "幻彩花紋",
                    ],
                },
            },
            Self::PokeBallPattern => &FormData {
                names: NamesData {
                    names: [
                        "ボールのもよう",
                        "Poké Ball Pattern",
                        "Motif Poké Ball",
                        "Motivo Poké Ball",
                        "Pokéball-Muster",
                        "Motivo Poké Ball",
                        "볼의 모양",
                        "球球花纹",
                        "球球花紋",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LitleoForm {
    Base,
}
impl LitleoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PyroarForm {
    Base,
}
impl PyroarForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FlabebeForm {
    RedFlower,
    YellowFlower,
    OrangeFlower,
    BlueFlower,
    WhiteFlower,
}
impl FlabebeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::RedFlower => &FormData {
                names: NamesData {
                    names: [
                        "あかいはな",
                        "Red Flower",
                        "Fleur Rouge",
                        "Fiore Rosso",
                        "Rotblütler",
                        "Flor Roja",
                        "빨간 꽃",
                        "红花",
                        "紅花",
                    ],
                },
            },
            Self::YellowFlower => &FormData {
                names: NamesData {
                    names: [
                        "きいろのはな",
                        "Yellow Flower",
                        "Fleur Jaune",
                        "Fiore Giallo",
                        "Gelbblütler",
                        "Flor Amarilla",
                        "노란 꽃",
                        "黄花",
                        "黃花",
                    ],
                },
            },
            Self::OrangeFlower => &FormData {
                names: NamesData {
                    names: [
                        "オレンジいろのはな",
                        "Orange Flower",
                        "Fleur Orange",
                        "Fiore Arancione",
                        "Orangeblütler",
                        "Flor Naranja",
                        "오렌지색 꽃",
                        "橙花",
                        "橙花",
                    ],
                },
            },
            Self::BlueFlower => &FormData {
                names: NamesData {
                    names: [
                        "あおいはな",
                        "Blue Flower",
                        "Fleur Bleue",
                        "Fiore Blu",
                        "Blaublütler",
                        "Flor Azul",
                        "파란 꽃",
                        "蓝花",
                        "藍花",
                    ],
                },
            },
            Self::WhiteFlower => &FormData {
                names: NamesData {
                    names: [
                        "しろいはな",
                        "White Flower",
                        "Fleur Blanche",
                        "Fiore Bianco",
                        "Weißblütler",
                        "Flor Blanca",
                        "하얀 꽃",
                        "白花",
                        "白花",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FloetteForm {
    RedFlower,
    YellowFlower,
    OrangeFlower,
    BlueFlower,
    WhiteFlower,
    EternalFlower,
}
impl FloetteForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::RedFlower => &FormData {
                names: NamesData {
                    names: [
                        "あかいはな",
                        "Red Flower",
                        "Fleur Rouge",
                        "Fiore Rosso",
                        "Rotblütler",
                        "Flor Roja",
                        "빨간 꽃",
                        "红花",
                        "紅花",
                    ],
                },
            },
            Self::YellowFlower => &FormData {
                names: NamesData {
                    names: [
                        "きいろのはな",
                        "Yellow Flower",
                        "Fleur Jaune",
                        "Fiore Giallo",
                        "Gelbblütler",
                        "Flor Amarilla",
                        "노란 꽃",
                        "黄花",
                        "黃花",
                    ],
                },
            },
            Self::OrangeFlower => &FormData {
                names: NamesData {
                    names: [
                        "オレンジいろのはな",
                        "Orange Flower",
                        "Fleur Orange",
                        "Fiore Arancione",
                        "Orangeblütler",
                        "Flor Naranja",
                        "오렌지색 꽃",
                        "橙花",
                        "橙花",
                    ],
                },
            },
            Self::BlueFlower => &FormData {
                names: NamesData {
                    names: [
                        "あおいはな",
                        "Blue Flower",
                        "Fleur Bleue",
                        "Fiore Blu",
                        "Blaublütler",
                        "Flor Azul",
                        "파란 꽃",
                        "蓝花",
                        "藍花",
                    ],
                },
            },
            Self::WhiteFlower => &FormData {
                names: NamesData {
                    names: [
                        "しろいはな",
                        "White Flower",
                        "Fleur Blanche",
                        "Fiore Bianco",
                        "Weißblütler",
                        "Flor Blanca",
                        "하얀 꽃",
                        "白花",
                        "白花",
                    ],
                },
            },
            Self::EternalFlower => &FormData {
                names: NamesData {
                    names: [
                        "えいえんのはな",
                        "Eternal Flower",
                        "Éternelle",
                        "Fiore Eterno",
                        "Ewigblütler",
                        "Flor Eterna",
                        "영원의 꽃",
                        "永恒之花",
                        "永恆之花",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FlorgesForm {
    RedFlower,
    YellowFlower,
    OrangeFlower,
    BlueFlower,
    WhiteFlower,
}
impl FlorgesForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::RedFlower => &FormData {
                names: NamesData {
                    names: [
                        "あかいはな",
                        "Red Flower",
                        "Fleur Rouge",
                        "Fiore Rosso",
                        "Rotblütler",
                        "Flor Roja",
                        "빨간 꽃",
                        "红花",
                        "紅花",
                    ],
                },
            },
            Self::YellowFlower => &FormData {
                names: NamesData {
                    names: [
                        "きいろのはな",
                        "Yellow Flower",
                        "Fleur Jaune",
                        "Fiore Giallo",
                        "Gelbblütler",
                        "Flor Amarilla",
                        "노란 꽃",
                        "黄花",
                        "黃花",
                    ],
                },
            },
            Self::OrangeFlower => &FormData {
                names: NamesData {
                    names: [
                        "オレンジいろのはな",
                        "Orange Flower",
                        "Fleur Orange",
                        "Fiore Arancione",
                        "Orangeblütler",
                        "Flor Naranja",
                        "오렌지색 꽃",
                        "橙花",
                        "橙花",
                    ],
                },
            },
            Self::BlueFlower => &FormData {
                names: NamesData {
                    names: [
                        "あおいはな",
                        "Blue Flower",
                        "Fleur Bleue",
                        "Fiore Blu",
                        "Blaublütler",
                        "Flor Azul",
                        "파란 꽃",
                        "蓝花",
                        "藍花",
                    ],
                },
            },
            Self::WhiteFlower => &FormData {
                names: NamesData {
                    names: [
                        "しろいはな",
                        "White Flower",
                        "Fleur Blanche",
                        "Fiore Bianco",
                        "Weißblütler",
                        "Flor Blanca",
                        "하얀 꽃",
                        "白花",
                        "白花",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SkiddoForm {
    Base,
}
impl SkiddoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GogoatForm {
    Base,
}
impl GogoatForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PanchamForm {
    Base,
}
impl PanchamForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PangoroForm {
    Base,
}
impl PangoroForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FurfrouForm {
    NaturalForm,
    HeartTrim,
    StarTrim,
    DiamondTrim,
    DebutanteTrim,
    MatronTrim,
    DandyTrim,
    LaReineTrim,
    KabukiTrim,
    PharaohTrim,
}
impl FurfrouForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::NaturalForm => &FormData {
                names: NamesData {
                    names: [
                        "やせいのすがた",
                        "Natural Form",
                        "Forme Sauvage",
                        "Forma Selvatica",
                        "Zottelform",
                        "Forma Salvaje",
                        "야생의 모습",
                        "野生的样子",
                        "野生的樣子",
                    ],
                },
            },
            Self::HeartTrim => &FormData {
                names: NamesData {
                    names: [
                        "ハートカット",
                        "Heart Trim",
                        "Coupe Cœur",
                        "Taglio Cuore",
                        "Herzchenschnitt",
                        "Corte Corazón",
                        "하트컷",
                        "心形造型",
                        "心形造型",
                    ],
                },
            },
            Self::StarTrim => &FormData {
                names: NamesData {
                    names: [
                        "スターカット",
                        "Star Trim",
                        "Coupe Étoile",
                        "Taglio Stella",
                        "Sternchenschnitt",
                        "Corte Estrella",
                        "스타컷",
                        "星形造型",
                        "星形造型",
                    ],
                },
            },
            Self::DiamondTrim => &FormData {
                names: NamesData {
                    names: [
                        "ダイヤカット",
                        "Diamond Trim",
                        "Coupe Diamant",
                        "Taglio Diamante",
                        "Diamantenschnitt",
                        "Corte Rombo",
                        "다이아컷",
                        "菱形造型",
                        "菱形造型",
                    ],
                },
            },
            Self::DebutanteTrim => &FormData {
                names: NamesData {
                    names: [
                        "レディカット",
                        "Debutante Trim",
                        "Coupe Demoiselle",
                        "Taglio Signorina",
                        "Fräuleinschnitt",
                        "Corte Señorita",
                        "레이디컷",
                        "淑女造型",
                        "淑女造型",
                    ],
                },
            },
            Self::MatronTrim => &FormData {
                names: NamesData {
                    names: [
                        "マダムカット",
                        "Matron Trim",
                        "Coupe Madame",
                        "Taglio Gentildonna",
                        "Damenschnitt",
                        "Corte Dama",
                        "마담컷",
                        "贵妇造型",
                        "貴婦造型",
                    ],
                },
            },
            Self::DandyTrim => &FormData {
                names: NamesData {
                    names: [
                        "ジェントルカット",
                        "Dandy Trim",
                        "Coupe Monsieur",
                        "Taglio Gentiluomo",
                        "Kavaliersschnitt",
                        "Corte Caballero",
                        "젠틀컷",
                        "绅士造型",
                        "紳士造型",
                    ],
                },
            },
            Self::LaReineTrim => &FormData {
                names: NamesData {
                    names: [
                        "クイーンカット",
                        "La Reine Trim",
                        "Coupe Reine",
                        "Taglio Regina",
                        "Königinnenschnitt",
                        "Corte Aristocrático",
                        "퀸컷",
                        "女王造型",
                        "女王造型",
                    ],
                },
            },
            Self::KabukiTrim => &FormData {
                names: NamesData {
                    names: [
                        "カブキカット",
                        "Kabuki Trim",
                        "Coupe Kabuki",
                        "Taglio Kabuki",
                        "Kabuki-Schnitt",
                        "Corte Kabuki",
                        "가부키컷",
                        "歌舞伎造型",
                        "歌舞伎造型",
                    ],
                },
            },
            Self::PharaohTrim => &FormData {
                names: NamesData {
                    names: [
                        "キングダムカット",
                        "Pharaoh Trim",
                        "Coupe Pharaon",
                        "Taglio Faraone",
                        "Herrscherschnitt",
                        "Corte Faraónico",
                        "킹덤컷",
                        "国王造型",
                        "國王造型",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum EspurrForm {
    Base,
}
impl EspurrForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MeowsticForm {
    Male,
    Female,
}
impl MeowsticForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Male => &FormData {
                names: NamesData {
                    names: [
                        "オスのすがた",
                        "Male",
                        "Mâle",
                        "Maschio",
                        "Männlich",
                        "Macho",
                        "수컷의 모습",
                        "雄性的样子",
                        "雄性的樣子",
                    ],
                },
            },
            Self::Female => &FormData {
                names: NamesData {
                    names: [
                        "メスのすがた",
                        "Female",
                        "Femelle",
                        "Femmina",
                        "Weiblich",
                        "Hembra",
                        "암컷의 모습",
                        "雌性的样子",
                        "雌性的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HonedgeForm {
    Base,
}
impl HonedgeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DoubladeForm {
    Base,
}
impl DoubladeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum AegislashForm {
    ShieldForme,
    BladeForme,
}
impl AegislashForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::ShieldForme => &FormData {
                names: NamesData {
                    names: [
                        "シールドフォルム",
                        "Shield Forme",
                        "Forme Parade",
                        "Forma Scudo",
                        "Schildform",
                        "Forma Escudo",
                        "실드폼",
                        "盾牌形态",
                        "盾牌形態",
                    ],
                },
            },
            Self::BladeForme => &FormData {
                names: NamesData {
                    names: [
                        "ブレードフォルム",
                        "Blade Forme",
                        "Forme Assaut",
                        "Forma Spada",
                        "Klingenform",
                        "Forma Filo",
                        "블레이드폼",
                        "刀剑形态",
                        "刀劍形態",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SpritzeeForm {
    Base,
}
impl SpritzeeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum AromatisseForm {
    Base,
}
impl AromatisseForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SwirlixForm {
    Base,
}
impl SwirlixForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SlurpuffForm {
    Base,
}
impl SlurpuffForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum InkayForm {
    Base,
}
impl InkayForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MalamarForm {
    Base,
}
impl MalamarForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BinacleForm {
    Base,
}
impl BinacleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BarbaracleForm {
    Base,
}
impl BarbaracleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SkrelpForm {
    Base,
}
impl SkrelpForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DragalgeForm {
    Base,
}
impl DragalgeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ClauncherForm {
    Base,
}
impl ClauncherForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ClawitzerForm {
    Base,
}
impl ClawitzerForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HelioptileForm {
    Base,
}
impl HelioptileForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HelioliskForm {
    Base,
}
impl HelioliskForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TyruntForm {
    Base,
}
impl TyruntForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TyrantrumForm {
    Base,
}
impl TyrantrumForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum AmauraForm {
    Base,
}
impl AmauraForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum AurorusForm {
    Base,
}
impl AurorusForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SylveonForm {
    Base,
}
impl SylveonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HawluchaForm {
    Base,
}
impl HawluchaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DedenneForm {
    Base,
}
impl DedenneForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CarbinkForm {
    Base,
}
impl CarbinkForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GoomyForm {
    Base,
}
impl GoomyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SliggooForm {
    Base,
    HisuianForm,
}
impl SliggooForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::HisuianForm => &FormData {
                names: NamesData {
                    names: [
                        "ヒスイのすがた",
                        "Hisuian Form",
                        "Forme de Hisui",
                        "Forma di Hisui",
                        "Hisui-Form",
                        "Forma de Hisui",
                        "히스이의 모습",
                        "洗翠的样子",
                        "洗翠的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GoodraForm {
    Base,
    HisuianForm,
}
impl GoodraForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::HisuianForm => &FormData {
                names: NamesData {
                    names: [
                        "ヒスイのすがた",
                        "Hisuian Form",
                        "Forme de Hisui",
                        "Forma di Hisui",
                        "Hisui-Form",
                        "Forma de Hisui",
                        "히스이의 모습",
                        "洗翠的样子",
                        "洗翠的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KlefkiForm {
    Base,
}
impl KlefkiForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PhantumpForm {
    Base,
}
impl PhantumpForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TrevenantForm {
    Base,
}
impl TrevenantForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PumpkabooForm {
    AverageSize,
    SmallSize,
    LargeSize,
    SuperSize,
}
impl PumpkabooForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::AverageSize => &FormData {
                names: NamesData {
                    names: [
                        "ふつうのサイズ",
                        "Average Size",
                        "Taille Normale",
                        "Normale",
                        "Größe M",
                        "Tamaño Normal",
                        "보통 사이즈",
                        "普通尺寸",
                        "普通尺寸",
                    ],
                },
            },
            Self::SmallSize => &FormData {
                names: NamesData {
                    names: [
                        "ちいさいサイズ",
                        "Small Size",
                        "Taille Mini",
                        "Mini",
                        "Größe S",
                        "Tamaño Pequeño",
                        "작은 사이즈",
                        "小尺寸",
                        "小尺寸",
                    ],
                },
            },
            Self::LargeSize => &FormData {
                names: NamesData {
                    names: [
                        "おおきいサイズ",
                        "Large Size",
                        "Taille Maxi",
                        "Grande",
                        "Größe L",
                        "Tamaño Grande",
                        "큰 사이즈",
                        "大尺寸",
                        "大尺寸",
                    ],
                },
            },
            Self::SuperSize => &FormData {
                names: NamesData {
                    names: [
                        "とくだいサイズ",
                        "Super Size",
                        "Taille Ultra",
                        "Maxi",
                        "Größe XL",
                        "Tamaño Extragrande",
                        "특대 사이즈",
                        "特大尺寸",
                        "特大尺寸",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GourgeistForm {
    AverageSize,
    SmallSize,
    LargeSize,
    SuperSize,
}
impl GourgeistForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::AverageSize => &FormData {
                names: NamesData {
                    names: [
                        "ふつうのサイズ",
                        "Average Size",
                        "Taille Normale",
                        "Normale",
                        "Größe M",
                        "Tamaño Normal",
                        "보통 사이즈",
                        "普通尺寸",
                        "普通尺寸",
                    ],
                },
            },
            Self::SmallSize => &FormData {
                names: NamesData {
                    names: [
                        "ちいさいサイズ",
                        "Small Size",
                        "Taille Mini",
                        "Mini",
                        "Größe S",
                        "Tamaño Pequeño",
                        "작은 사이즈",
                        "小尺寸",
                        "小尺寸",
                    ],
                },
            },
            Self::LargeSize => &FormData {
                names: NamesData {
                    names: [
                        "おおきいサイズ",
                        "Large Size",
                        "Taille Maxi",
                        "Grande",
                        "Größe L",
                        "Tamaño Grande",
                        "큰 사이즈",
                        "大尺寸",
                        "大尺寸",
                    ],
                },
            },
            Self::SuperSize => &FormData {
                names: NamesData {
                    names: [
                        "とくだいサイズ",
                        "Super Size",
                        "Taille Ultra",
                        "Maxi",
                        "Größe XL",
                        "Tamaño Extragrande",
                        "특대 사이즈",
                        "特大尺寸",
                        "特大尺寸",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BergmiteForm {
    Base,
}
impl BergmiteForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum AvaluggForm {
    Base,
    HisuianForm,
    LordForm,
}
impl AvaluggForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::HisuianForm => &FormData {
                names: NamesData {
                    names: [
                        "ヒスイのすがた",
                        "Hisuian Form",
                        "Forme de Hisui",
                        "Forma di Hisui",
                        "Hisui-Form",
                        "Forma de Hisui",
                        "히스이의 모습",
                        "洗翠的样子",
                        "洗翠的樣子",
                    ],
                },
            },
            Self::LordForm => &FormData {
                names: NamesData {
                    names: [
                        "キングのすがた",
                        "Lord Form",
                        "Forme de Roi",
                        "Forma Re",
                        "Königsform",
                        "Forma de Señor",
                        "왕의 모습",
                        "王的样子",
                        "王的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum NoibatForm {
    Base,
}
impl NoibatForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum NoivernForm {
    Base,
}
impl NoivernForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum XerneasForm {
    NeutralMode,
    ActiveMode,
}
impl XerneasForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::NeutralMode => &FormData {
                names: NamesData {
                    names: [
                        "リラックスモード",
                        "Neutral Mode",
                        "Mode Paisible",
                        "Modo Relax",
                        "Ruhe-Modus",
                        "Modo Relajado",
                        "릴랙스모드",
                        "放松模式",
                        "放鬆模式",
                    ],
                },
            },
            Self::ActiveMode => &FormData {
                names: NamesData {
                    names: [
                        "アクティブモード",
                        "Active Mode",
                        "Mode Déchaîné",
                        "Modo Attivo",
                        "Aktiv-Modus",
                        "Modo Activo",
                        "액티브모드",
                        "活跃模式",
                        "活躍模式",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum YveltalForm {
    Base,
}
impl YveltalForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ZygardeForm {
    FiftyPercentFormeAuraBreak,
    TenPercentFormeAuraBreak,
    TenPercentFormePowerConstruct,
    FiftyPercentFormePowerConstruct,
    CompleteForme,
}
impl ZygardeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::FiftyPercentFormeAuraBreak => &FormData {
                names: NamesData {
                    names: [
                        "５０％フォルム",
                        "50% Forme",
                        "Forme 50 %",
                        "Forma 50%",
                        "50%-Form",
                        "Forma 50%",
                        "50%폼",
                        "５０％形态",
                        "５０％形態",
                    ],
                },
            },
            Self::TenPercentFormeAuraBreak => &FormData {
                names: NamesData {
                    names: [
                        "１０％フォルム",
                        "10% Forme",
                        "Forme 10 %",
                        "Forma 10%",
                        "10%-Form",
                        "Forma 10%",
                        "10%폼",
                        "１０％形态",
                        "１０％形態",
                    ],
                },
            },
            Self::TenPercentFormePowerConstruct => &FormData {
                names: NamesData {
                    names: [
                        "１０％フォルム",
                        "10% Forme",
                        "Forme 10 %",
                        "Forma 10%",
                        "10%-Form",
                        "Forma 10%",
                        "10%폼",
                        "１０％形态",
                        "１０％形態",
                    ],
                },
            },
            Self::FiftyPercentFormePowerConstruct => &FormData {
                names: NamesData {
                    names: [
                        "５０％フォルム",
                        "50% Forme",
                        "Forme 50 %",
                        "Forma 50%",
                        "50%-Form",
                        "Forma 50%",
                        "50%폼",
                        "５０％形态",
                        "５０％形態",
                    ],
                },
            },
            Self::CompleteForme => &FormData {
                names: NamesData {
                    names: [
                        "パーフェクトフォルム",
                        "Complete Forme",
                        "Forme Parfaite",
                        "Forma Perfetta",
                        "Optimumform",
                        "Forma Completa",
                        "퍼펙트폼",
                        "完全体形态",
                        "完全體形態",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DiancieForm {
    Base,
    Mega,
}
impl DiancieForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Mega => &FormData {
                names: NamesData {
                    names: [
                        "メガディアンシー",
                        "Mega Diancie",
                        "Méga-Diancie",
                        "MegaDiancie",
                        "Mega-Diancie",
                        "Mega-Diancie",
                        "메가디안시",
                        "超级蒂安希",
                        "超級蒂安希",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HoopaForm {
    HoopaConfined,
    HoopaUnbound,
}
impl HoopaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::HoopaConfined => &FormData {
                names: NamesData {
                    names: [
                        "いましめられしフーパ",
                        "Hoopa Confined",
                        "Hoopa Enchaîné",
                        "Hoopa Vincolato",
                        "Gebanntes Hoopa",
                        "Hoopa Contenido",
                        "굴레에 빠진 후파",
                        "惩戒胡帕",
                        "懲戒胡帕",
                    ],
                },
            },
            Self::HoopaUnbound => &FormData {
                names: NamesData {
                    names: [
                        "ときはなたれしフーパ",
                        "Hoopa Unbound",
                        "Hoopa Déchaîné",
                        "Hoopa Libero",
                        "Entfesseltes Hoopa",
                        "Hoopa Desatado",
                        "굴레를 벗어난 후파",
                        "解放胡帕",
                        "解放胡帕",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum VolcanionForm {
    Base,
}
impl VolcanionForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RowletForm {
    Base,
}
impl RowletForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DartrixForm {
    Base,
}
impl DartrixForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DecidueyeForm {
    Base,
    HisuianForm,
}
impl DecidueyeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::HisuianForm => &FormData {
                names: NamesData {
                    names: [
                        "ヒスイのすがた",
                        "Hisuian Form",
                        "Forme de Hisui",
                        "Forma di Hisui",
                        "Hisui-Form",
                        "Forma de Hisui",
                        "히스이의 모습",
                        "洗翠的样子",
                        "洗翠的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LittenForm {
    Base,
}
impl LittenForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TorracatForm {
    Base,
}
impl TorracatForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum IncineroarForm {
    Base,
}
impl IncineroarForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PopplioForm {
    Base,
}
impl PopplioForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BrionneForm {
    Base,
}
impl BrionneForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PrimarinaForm {
    Base,
}
impl PrimarinaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PikipekForm {
    Base,
}
impl PikipekForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TrumbeakForm {
    Base,
}
impl TrumbeakForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ToucannonForm {
    Base,
}
impl ToucannonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum YungoosForm {
    Base,
}
impl YungoosForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GumshoosForm {
    Base,
    TotemForm,
}
impl GumshoosForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::TotemForm => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GrubbinForm {
    Base,
}
impl GrubbinForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CharjabugForm {
    Base,
}
impl CharjabugForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum VikavoltForm {
    Base,
    TotemForm,
}
impl VikavoltForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::TotemForm => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CrabrawlerForm {
    Base,
}
impl CrabrawlerForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CrabominableForm {
    Base,
}
impl CrabominableForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum OricorioForm {
    BaileStyle,
    PomPomStyle,
    PauStyle,
    SensuStyle,
}
impl OricorioForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::BaileStyle => &FormData {
                names: NamesData {
                    names: [
                        "めらめらスタイル",
                        "Baile Style",
                        "Style Flamenco",
                        "Stile Flamenco",
                        "Flamenco-Stil",
                        "Estilo Apasionado",
                        "이글이글스타일",
                        "热辣热辣风格",
                        "熱辣熱辣風格",
                    ],
                },
            },
            Self::PomPomStyle => &FormData {
                names: NamesData {
                    names: [
                        "ぱちぱちスタイル",
                        "Pom-Pom Style",
                        "Style Pom-Pom",
                        "Stile Cheerdance",
                        "Cheerleading-Stil",
                        "Estilo Animado",
                        "파칙파칙스타일",
                        "啪滋啪滋风格",
                        "啪滋啪滋風格",
                    ],
                },
            },
            Self::PauStyle => &FormData {
                names: NamesData {
                    names: [
                        "ふらふらスタイル",
                        "Pa’u Style",
                        "Style Hula",
                        "Stile Hula",
                        "Hula-Stil",
                        "Estilo Plácido",
                        "훌라훌라스타일",
                        "呼拉呼拉风格",
                        "呼拉呼拉風格",
                    ],
                },
            },
            Self::SensuStyle => &FormData {
                names: NamesData {
                    names: [
                        "まいまいスタイル",
                        "Sensu Style",
                        "Style Buyō",
                        "Stile Buyō",
                        "Buyo-Stil",
                        "Estilo Refinado",
                        "하늘하늘스타일",
                        "轻盈轻盈风格",
                        "輕盈輕盈風格",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CutieflyForm {
    Base,
}
impl CutieflyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RibombeeForm {
    Base,
    TotemForm,
}
impl RibombeeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::TotemForm => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RockruffForm {
    Base,
    OwnTempo,
}
impl RockruffForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::OwnTempo => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LycanrocForm {
    MiddayForm,
    MidnightForm,
    DuskForm,
}
impl LycanrocForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::MiddayForm => &FormData {
                names: NamesData {
                    names: [
                        "まひるのすがた",
                        "Midday Form",
                        "Forme Diurne",
                        "Forma Giorno",
                        "Tagform",
                        "Forma Diurna",
                        "한낮의 모습",
                        "白昼的样子",
                        "白晝的樣子",
                    ],
                },
            },
            Self::MidnightForm => &FormData {
                names: NamesData {
                    names: [
                        "まよなかのすがた",
                        "Midnight Form",
                        "Forme Nocturne",
                        "Forma Notte",
                        "Nachtform",
                        "Forma Nocturna",
                        "한밤중의 모습",
                        "黑夜的样子",
                        "黑夜的樣子",
                    ],
                },
            },
            Self::DuskForm => &FormData {
                names: NamesData {
                    names: [
                        "たそがれのすがた",
                        "Dusk Form",
                        "Forme Crépusculaire",
                        "Forma Crepuscolo",
                        "Zwielichtform",
                        "Forma Crepuscular",
                        "황혼의 모습",
                        "黄昏的样子",
                        "黃昏的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum WishiwashiForm {
    SoloForm,
    SchoolForm,
}
impl WishiwashiForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::SoloForm => &FormData {
                names: NamesData {
                    names: [
                        "たんどくのすがた",
                        "Solo Form",
                        "Forme Solitaire",
                        "Forma Individuale",
                        "Einzelform",
                        "Forma Individual",
                        "단독의 모습",
                        "单独的样子",
                        "單獨的樣子",
                    ],
                },
            },
            Self::SchoolForm => &FormData {
                names: NamesData {
                    names: [
                        "むれたすがた",
                        "School Form",
                        "Forme Banc",
                        "Forma Banco",
                        "Schwarmform",
                        "Forma Banco",
                        "군집의 모습",
                        "鱼群的样子",
                        "魚群的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MareanieForm {
    Base,
}
impl MareanieForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ToxapexForm {
    Base,
}
impl ToxapexForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MudbrayForm {
    Base,
}
impl MudbrayForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MudsdaleForm {
    Base,
}
impl MudsdaleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DewpiderForm {
    Base,
}
impl DewpiderForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum AraquanidForm {
    Base,
    TotemForm,
}
impl AraquanidForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::TotemForm => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FomantisForm {
    Base,
}
impl FomantisForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LurantisForm {
    Base,
    TotemForm,
}
impl LurantisForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::TotemForm => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MorelullForm {
    Base,
}
impl MorelullForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ShiinoticForm {
    Base,
}
impl ShiinoticForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SalanditForm {
    Base,
}
impl SalanditForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SalazzleForm {
    Base,
    TotemForm,
}
impl SalazzleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::TotemForm => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum StuffulForm {
    Base,
}
impl StuffulForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BewearForm {
    Base,
}
impl BewearForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BounsweetForm {
    Base,
}
impl BounsweetForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SteeneeForm {
    Base,
}
impl SteeneeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TsareenaForm {
    Base,
}
impl TsareenaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ComfeyForm {
    Base,
}
impl ComfeyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum OranguruForm {
    Base,
}
impl OranguruForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PassimianForm {
    Base,
}
impl PassimianForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum WimpodForm {
    Base,
}
impl WimpodForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GolisopodForm {
    Base,
}
impl GolisopodForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SandygastForm {
    Base,
}
impl SandygastForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PalossandForm {
    Base,
}
impl PalossandForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PyukumukuForm {
    Base,
}
impl PyukumukuForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TypeNullForm {
    Base,
}
impl TypeNullForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SilvallyForm {
    TypeNormal,
    TypeFighting,
    TypeFlying,
    TypePoison,
    TypeGround,
    TypeRock,
    TypeBug,
    TypeGhost,
    TypeSteel,
    TypeFire,
    TypeWater,
    TypeGrass,
    TypeElectric,
    TypePsychic,
    TypeIce,
    TypeDragon,
    TypeDark,
    TypeFairy,
}
impl SilvallyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::TypeNormal => &FormData {
                names: NamesData {
                    names: [
                        "タイプ：ノーマル",
                        "Type: Normal",
                        "Type : Normal",
                        "Tipo Normale",
                        "Typ:Normal",
                        "Tipo: Normal",
                        "타입:노말",
                        "属性：一般",
                        "屬性：一般",
                    ],
                },
            },
            Self::TypeFighting => &FormData {
                names: NamesData {
                    names: [
                        "タイプ：ファイト",
                        "Type: Fighting",
                        "Type : Combat",
                        "Tipo Lotta",
                        "Typ:Kampf",
                        "Tipo: Lucha",
                        "타입:파이팅",
                        "属性：战斗",
                        "屬性：戰鬥",
                    ],
                },
            },
            Self::TypeFlying => &FormData {
                names: NamesData {
                    names: [
                        "タイプ：フライング",
                        "Type: Flying",
                        "Type : Vol",
                        "Tipo Volante",
                        "Typ:Flug",
                        "Tipo: Volador",
                        "타입:플라잉",
                        "属性：飞翔",
                        "屬性：飛翔",
                    ],
                },
            },
            Self::TypePoison => &FormData {
                names: NamesData {
                    names: [
                        "タイプ：ポイズン",
                        "Type: Poison",
                        "Type : Poison",
                        "Tipo Veleno",
                        "Typ:Gift",
                        "Tipo: Veneno",
                        "타입:포이즌",
                        "属性：毒",
                        "屬性：毒",
                    ],
                },
            },
            Self::TypeGround => &FormData {
                names: NamesData {
                    names: [
                        "タイプ：グラウンド",
                        "Type: Ground",
                        "Type : Sol",
                        "Tipo Terra",
                        "Typ:Boden",
                        "Tipo: Tierra",
                        "타입:그라운드",
                        "属性：大地",
                        "屬性：大地",
                    ],
                },
            },
            Self::TypeRock => &FormData {
                names: NamesData {
                    names: [
                        "タイプ：ロック",
                        "Type: Rock",
                        "Type : Roche",
                        "Tipo Roccia",
                        "Typ:Gestein",
                        "Tipo: Roca",
                        "타입:락",
                        "属性：岩石",
                        "屬性：岩石",
                    ],
                },
            },
            Self::TypeBug => &FormData {
                names: NamesData {
                    names: [
                        "タイプ：バグ",
                        "Type: Bug",
                        "Type : Insecte",
                        "Tipo Coleottero",
                        "Typ:Käfer",
                        "Tipo: Bicho",
                        "타입:버그",
                        "属性：虫子",
                        "屬性：蟲子",
                    ],
                },
            },
            Self::TypeGhost => &FormData {
                names: NamesData {
                    names: [
                        "タイプ：ゴースト",
                        "Type: Ghost",
                        "Type : Spectre",
                        "Tipo Spettro",
                        "Typ:Geist",
                        "Tipo: Fantasma",
                        "타입:고스트",
                        "属性：幽灵",
                        "屬性：幽靈",
                    ],
                },
            },
            Self::TypeSteel => &FormData {
                names: NamesData {
                    names: [
                        "タイプ：スチール",
                        "Type: Steel",
                        "Type : Acier",
                        "Tipo Acciaio",
                        "Typ:Stahl",
                        "Tipo: Acero",
                        "타입:스틸",
                        "属性：钢铁",
                        "屬性：鋼鐵",
                    ],
                },
            },
            Self::TypeFire => &FormData {
                names: NamesData {
                    names: [
                        "タイプ：ファイヤー",
                        "Type: Fire",
                        "Type : Feu",
                        "Tipo Fuoco",
                        "Typ:Feuer",
                        "Tipo: Fuego",
                        "타입:파이어",
                        "属性：火焰",
                        "屬性：火焰",
                    ],
                },
            },
            Self::TypeWater => &FormData {
                names: NamesData {
                    names: [
                        "タイプ：ウオーター",
                        "Type: Water",
                        "Type : Eau",
                        "Tipo Acqua",
                        "Typ:Wasser",
                        "Tipo: Agua",
                        "타입:워터",
                        "属性：清水",
                        "屬性：清水",
                    ],
                },
            },
            Self::TypeGrass => &FormData {
                names: NamesData {
                    names: [
                        "タイプ：グラス",
                        "Type: Grass",
                        "Type : Plante",
                        "Tipo Erba",
                        "Typ:Pflanze",
                        "Tipo: Planta",
                        "타입:그래스",
                        "属性：青草",
                        "屬性：青草",
                    ],
                },
            },
            Self::TypeElectric => &FormData {
                names: NamesData {
                    names: [
                        "タイプ：エレクトロ",
                        "Type: Electric",
                        "Type : Électrik",
                        "Tipo Elettro",
                        "Typ:Elektro",
                        "Tipo: Eléctrico",
                        "타입:일렉트릭",
                        "属性：电子",
                        "屬性：電子",
                    ],
                },
            },
            Self::TypePsychic => &FormData {
                names: NamesData {
                    names: [
                        "タイプ：サイキック",
                        "Type: Psychic",
                        "Type : Psy",
                        "Tipo Psico",
                        "Typ:Psycho",
                        "Tipo: Psíquico",
                        "타입:사이킥",
                        "属性：精神",
                        "屬性：精神",
                    ],
                },
            },
            Self::TypeIce => &FormData {
                names: NamesData {
                    names: [
                        "タイプ：アイス",
                        "Type: Ice",
                        "Type : Glace",
                        "Tipo Ghiaccio",
                        "Typ:Eis",
                        "Tipo: Hielo",
                        "타입:아이스",
                        "属性：冰雪",
                        "屬性：冰雪",
                    ],
                },
            },
            Self::TypeDragon => &FormData {
                names: NamesData {
                    names: [
                        "タイプ：ドラゴン",
                        "Type: Dragon",
                        "Type : Dragon",
                        "Tipo Drago",
                        "Typ:Drache",
                        "Tipo: Dragón",
                        "타입:드래곤",
                        "属性：龙",
                        "屬性：龍",
                    ],
                },
            },
            Self::TypeDark => &FormData {
                names: NamesData {
                    names: [
                        "タイプ：ダーク",
                        "Type: Dark",
                        "Type : Ténèbres",
                        "Tipo Buio",
                        "Typ:Unlicht",
                        "Tipo: Siniestro",
                        "타입:다크",
                        "属性：黑暗",
                        "屬性：黑暗",
                    ],
                },
            },
            Self::TypeFairy => &FormData {
                names: NamesData {
                    names: [
                        "タイプ：フェアリー",
                        "Type: Fairy",
                        "Type : Fée",
                        "Tipo Folletto",
                        "Typ:Fee",
                        "Tipo: Hada",
                        "타입:페어리",
                        "属性：妖精",
                        "屬性：妖精",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MiniorForm {
    MeteorFormRedCore,
    MeteorFormOrangeCore,
    MeteorFormYellowCore,
    MeteorFormGreenCore,
    MeteorFormBlueCore,
    MeteorFormIndigoCore,
    MeteorFormVioletCore,
    RedCore,
    OrangeCore,
    YellowCore,
    GreenCore,
    BlueCore,
    IndigoCore,
    VioletCore,
}
impl MiniorForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::MeteorFormRedCore => &FormData {
                names: NamesData {
                    names: [
                        "りゅうせいのすがた",
                        "Meteor Form",
                        "Forme Météore",
                        "Forma Meteora",
                        "Meteorform",
                        "Forma Meteorito",
                        "유성의 모습",
                        "流星的样子",
                        "流星的樣子",
                    ],
                },
            },
            Self::MeteorFormOrangeCore => &FormData {
                names: NamesData {
                    names: [
                        "りゅうせいのすがた",
                        "Meteor Form",
                        "Forme Météore",
                        "Forma Meteora",
                        "Meteorform",
                        "Forma Meteorito",
                        "유성의 모습",
                        "流星的样子",
                        "流星的樣子",
                    ],
                },
            },
            Self::MeteorFormYellowCore => &FormData {
                names: NamesData {
                    names: [
                        "りゅうせいのすがた",
                        "Meteor Form",
                        "Forme Météore",
                        "Forma Meteora",
                        "Meteorform",
                        "Forma Meteorito",
                        "유성의 모습",
                        "流星的样子",
                        "流星的樣子",
                    ],
                },
            },
            Self::MeteorFormGreenCore => &FormData {
                names: NamesData {
                    names: [
                        "りゅうせいのすがた",
                        "Meteor Form",
                        "Forme Météore",
                        "Forma Meteora",
                        "Meteorform",
                        "Forma Meteorito",
                        "유성의 모습",
                        "流星的样子",
                        "流星的樣子",
                    ],
                },
            },
            Self::MeteorFormBlueCore => &FormData {
                names: NamesData {
                    names: [
                        "りゅうせいのすがた",
                        "Meteor Form",
                        "Forme Météore",
                        "Forma Meteora",
                        "Meteorform",
                        "Forma Meteorito",
                        "유성의 모습",
                        "流星的样子",
                        "流星的樣子",
                    ],
                },
            },
            Self::MeteorFormIndigoCore => &FormData {
                names: NamesData {
                    names: [
                        "りゅうせいのすがた",
                        "Meteor Form",
                        "Forme Météore",
                        "Forma Meteora",
                        "Meteorform",
                        "Forma Meteorito",
                        "유성의 모습",
                        "流星的样子",
                        "流星的樣子",
                    ],
                },
            },
            Self::MeteorFormVioletCore => &FormData {
                names: NamesData {
                    names: [
                        "りゅうせいのすがた",
                        "Meteor Form",
                        "Forme Météore",
                        "Forma Meteora",
                        "Meteorform",
                        "Forma Meteorito",
                        "유성의 모습",
                        "流星的样子",
                        "流星的樣子",
                    ],
                },
            },
            Self::RedCore => &FormData {
                names: NamesData {
                    names: [
                        "あかいろのコア",
                        "Red Core",
                        "Noyau Rouge",
                        "Nucleo Rosso",
                        "Roter Kern",
                        "Núcleo Rojo",
                        "빨간색 코어",
                        "红色核心",
                        "紅色核心",
                    ],
                },
            },
            Self::OrangeCore => &FormData {
                names: NamesData {
                    names: [
                        "だいだいいろのコア",
                        "Orange Core",
                        "Noyau Orange",
                        "Nucleo Arancione",
                        "Oranger Kern",
                        "Núcleo Naranja",
                        "주황색 코어",
                        "橙色核心",
                        "橙色核心",
                    ],
                },
            },
            Self::YellowCore => &FormData {
                names: NamesData {
                    names: [
                        "きいろのコア",
                        "Yellow Core",
                        "Noyau Jaune",
                        "Nucleo Giallo",
                        "Gelber Kern",
                        "Núcleo Amarillo",
                        "노란색 코어",
                        "黄色核心",
                        "黃色核心",
                    ],
                },
            },
            Self::GreenCore => &FormData {
                names: NamesData {
                    names: [
                        "みどりいろのコア",
                        "Green Core",
                        "Noyau Vert",
                        "Nucleo Verde",
                        "Grüner Kern",
                        "Núcleo Verde",
                        "초록색 코어",
                        "绿色核心",
                        "綠色核心",
                    ],
                },
            },
            Self::BlueCore => &FormData {
                names: NamesData {
                    names: [
                        "みずいろのコア",
                        "Blue Core",
                        "Noyau Bleu",
                        "Nucleo Azzurro",
                        "Hellblauer Kern",
                        "Núcleo Azul",
                        "옥색 코어",
                        "浅蓝色核心",
                        "淺藍色核心",
                    ],
                },
            },
            Self::IndigoCore => &FormData {
                names: NamesData {
                    names: [
                        "あおいろのコア",
                        "Indigo Core",
                        "Noyau Indigo",
                        "Nucleo Indaco",
                        "Blauer Kern",
                        "Núcleo Añil",
                        "파란색 코어",
                        "蓝色核心",
                        "藍色核心",
                    ],
                },
            },
            Self::VioletCore => &FormData {
                names: NamesData {
                    names: [
                        "むらさきいろのコア",
                        "Violet Core",
                        "Noyau Violet",
                        "Nucleo Violetto",
                        "Violetter Kern",
                        "Núcleo Violeta",
                        "보라색 코어",
                        "紫色核心",
                        "紫色核心",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KomalaForm {
    Base,
}
impl KomalaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TurtonatorForm {
    Base,
}
impl TurtonatorForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TogedemaruForm {
    Base,
    TotemForm,
}
impl TogedemaruForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::TotemForm => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MimikyuForm {
    DisguisedForm,
    BustedForm,
    DisguisedTotemForm,
    BustedTotemForm,
}
impl MimikyuForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::DisguisedForm => &FormData {
                names: NamesData {
                    names: [
                        "ばけたすがた",
                        "Disguised Form",
                        "Forme Déguisée",
                        "Forma Mascherata",
                        "Verkleidete Form",
                        "Forma Encubierta",
                        "둔갑한 모습",
                        "化形的样子",
                        "化形的樣子",
                    ],
                },
            },
            Self::BustedForm => &FormData {
                names: NamesData {
                    names: [
                        "ばれたすがた",
                        "Busted Form",
                        "Forme Démasquée",
                        "Forma Smascherata",
                        "Entlarvte Form",
                        "Forma Descubierta",
                        "들킨 모습",
                        "现形的样子",
                        "現形的樣子",
                    ],
                },
            },
            Self::DisguisedTotemForm => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
            Self::BustedTotemForm => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BruxishForm {
    Base,
}
impl BruxishForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DrampaForm {
    Base,
}
impl DrampaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DhelmiseForm {
    Base,
}
impl DhelmiseForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum JangmooForm {
    Base,
}
impl JangmooForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HakamooForm {
    Base,
}
impl HakamooForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KommooForm {
    Base,
    TotemForm,
}
impl KommooForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::TotemForm => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", " "],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TapuKokoForm {
    Base,
}
impl TapuKokoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TapuLeleForm {
    Base,
}
impl TapuLeleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TapuBuluForm {
    Base,
}
impl TapuBuluForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TapuFiniForm {
    Base,
}
impl TapuFiniForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CosmogForm {
    Base,
}
impl CosmogForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CosmoemForm {
    Base,
}
impl CosmoemForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SolgaleoForm {
    Base,
}
impl SolgaleoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LunalaForm {
    Base,
}
impl LunalaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum NihilegoForm {
    Base,
}
impl NihilegoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BuzzwoleForm {
    Base,
}
impl BuzzwoleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PheromosaForm {
    Base,
}
impl PheromosaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum XurkitreeForm {
    Base,
}
impl XurkitreeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CelesteelaForm {
    Base,
}
impl CelesteelaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KartanaForm {
    Base,
}
impl KartanaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GuzzlordForm {
    Base,
}
impl GuzzlordForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum NecrozmaForm {
    Base,
    DuskMane,
    DawnWings,
    UltraNecrozma,
}
impl NecrozmaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::DuskMane => &FormData {
                names: NamesData {
                    names: [
                        "たそがれのたてがみ",
                        "Dusk Mane",
                        "Crinière du Couchant",
                        "Criniera del Vespro",
                        "Abendmähne",
                        "Melena Crepuscular",
                        "황혼의 갈기",
                        "黄昏之鬃",
                        "黃昏之鬃",
                    ],
                },
            },
            Self::DawnWings => &FormData {
                names: NamesData {
                    names: [
                        "あかつきのつばさ",
                        "Dawn Wings",
                        "Ailes de l’Aurore",
                        "Ali dell’Aurora",
                        "Morgenschwingen",
                        "Alas del Alba",
                        "새벽의 날개",
                        "拂晓之翼",
                        "拂曉之翼",
                    ],
                },
            },
            Self::UltraNecrozma => &FormData {
                names: NamesData {
                    names: [
                        "ウルトラネクロズマ",
                        "Ultra Necrozma",
                        "Ultra-Necrozma",
                        "UltraNecrozma",
                        "Ultra-Necrozma",
                        "Ultra-Necrozma",
                        "울트라네크로즈마",
                        "究极奈克洛兹玛",
                        "究極奈克洛茲瑪",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MagearnaForm {
    Base,
    OriginalColor,
}
impl MagearnaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::OriginalColor => &FormData {
                names: NamesData {
                    names: [
                        "５００ねんまえのいろ",
                        "Original Color",
                        "Couleur du Passé",
                        "Colore Antico",
                        "Originalfarbe",
                        "Color Vetusto",
                        "500년 전의 색",
                        "５００年前的颜色",
                        "５００年前的顏色",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MarshadowForm {
    Base,
}
impl MarshadowForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PoipoleForm {
    Base,
}
impl PoipoleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum NaganadelForm {
    Base,
}
impl NaganadelForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum StakatakaForm {
    Base,
}
impl StakatakaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BlacephalonForm {
    Base,
}
impl BlacephalonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ZeraoraForm {
    Base,
}
impl ZeraoraForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MeltanForm {
    Base,
}
impl MeltanForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MelmetalForm {
    Base,
    Gigantamax,
}
impl MelmetalForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Gigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GrookeyForm {
    Base,
}
impl GrookeyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ThwackeyForm {
    Base,
}
impl ThwackeyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RillaboomForm {
    Base,
    Gigantamax,
}
impl RillaboomForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Gigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ScorbunnyForm {
    Base,
}
impl ScorbunnyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RabootForm {
    Base,
}
impl RabootForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CinderaceForm {
    Base,
    Gigantamax,
}
impl CinderaceForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Gigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SobbleForm {
    Base,
}
impl SobbleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DrizzileForm {
    Base,
}
impl DrizzileForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum InteleonForm {
    Base,
    Gigantamax,
}
impl InteleonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Gigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SkwovetForm {
    Base,
}
impl SkwovetForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GreedentForm {
    Base,
}
impl GreedentForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RookideeForm {
    Base,
}
impl RookideeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CorvisquireForm {
    Base,
}
impl CorvisquireForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CorviknightForm {
    Base,
}
impl CorviknightForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BlipbugForm {
    Base,
}
impl BlipbugForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DottlerForm {
    Base,
    Gigantamax,
}
impl DottlerForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Gigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum OrbeetleForm {
    Base,
    Gigantamax,
}
impl OrbeetleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Gigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum NickitForm {
    Base,
}
impl NickitForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ThievulForm {
    Base,
}
impl ThievulForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GossifleurForm {
    Base,
}
impl GossifleurForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum EldegossForm {
    Base,
}
impl EldegossForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum WoolooForm {
    Base,
}
impl WoolooForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DubwoolForm {
    Base,
}
impl DubwoolForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ChewtleForm {
    Base,
}
impl ChewtleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DrednawForm {
    Base,
    Gigantamax,
}
impl DrednawForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Gigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum YamperForm {
    Base,
}
impl YamperForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BoltundForm {
    Base,
}
impl BoltundForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RolycolyForm {
    Base,
}
impl RolycolyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CarkolForm {
    Base,
}
impl CarkolForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CoalossalForm {
    Base,
    Gigantamax,
}
impl CoalossalForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Gigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ApplinForm {
    Base,
}
impl ApplinForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FlappleForm {
    Base,
    Gigantamax,
}
impl FlappleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Gigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum AppletunForm {
    Base,
    Gigantamax,
}
impl AppletunForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Gigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SilicobraForm {
    Base,
}
impl SilicobraForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SandacondaForm {
    Base,
    Gigantamax,
}
impl SandacondaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Gigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CramorantForm {
    Base,
    GulpingForm,
    GorgingForm,
}
impl CramorantForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::GulpingForm => &FormData {
                names: NamesData {
                    names: [
                        "うのみのすがた",
                        "Gulping Form",
                        "Forme Gobe-Tout",
                        "Forma Inghiottitutto",
                        "Schlingform",
                        "Forma Tragatodo",
                        "그대로 삼킨 모습",
                        "一口吞的样子",
                        "一口吞的樣子",
                    ],
                },
            },
            Self::GorgingForm => &FormData {
                names: NamesData {
                    names: [
                        "まるのみのすがた",
                        "Gorging Form",
                        "Forme Gobe-Chu",
                        "Forma Inghiottintero",
                        "Stopfform",
                        "Forma Engulletodo",
                        "통째로 삼킨 모습",
                        "大口吞的样子",
                        "大口吞的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ArrokudaForm {
    Base,
}
impl ArrokudaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BarraskewdaForm {
    Base,
}
impl BarraskewdaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ToxelForm {
    Base,
}
impl ToxelForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ToxtricityForm {
    AmpedForm,
    LowKeyForm,
    Gigantamax,
}
impl ToxtricityForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::AmpedForm => &FormData {
                names: NamesData {
                    names: [
                        "ハイなすがた",
                        "Amped Form",
                        "Forme Aigüe",
                        "Forma Melodia",
                        "Hoch-Form",
                        "Forma Aguda",
                        "하이한 모습",
                        "高调的样子",
                        "高調的樣子",
                    ],
                },
            },
            Self::LowKeyForm => &FormData {
                names: NamesData {
                    names: [
                        "ローなすがた",
                        "Low Key Form",
                        "Forme Grave",
                        "Forma Basso",
                        "Tief-Form",
                        "Forma Grave",
                        "로우한 모습",
                        "低调的样子",
                        "低調的樣子",
                    ],
                },
            },
            Self::Gigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SizzlipedeForm {
    Base,
}
impl SizzlipedeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CentiskorchForm {
    Base,
    Gigantamax,
}
impl CentiskorchForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Gigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ClobbopusForm {
    Base,
}
impl ClobbopusForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GrapploctForm {
    Base,
}
impl GrapploctForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SinisteaForm {
    PhonyForm,
    AntiqueForm,
}
impl SinisteaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::PhonyForm => &FormData {
                names: NamesData {
                    names: [
                        "がんさくフォルム",
                        "Phony Form",
                        "Forme Contrefaçon",
                        "Forma Contraffatta",
                        "Fälschungsform",
                        "Forma Falsificada",
                        "위작폼",
                        "赝品形态",
                        "贗品形態",
                    ],
                },
            },
            Self::AntiqueForm => &FormData {
                names: NamesData {
                    names: [
                        "しんさくフォルム",
                        "Antique Form",
                        "Forme Authentique",
                        "Forma Autentica",
                        "Originalform",
                        "Forma Genuina",
                        "진작폼",
                        "真品形态",
                        "真品形態",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PolteageistForm {
    PhonyForm,
    AntiqueForm,
}
impl PolteageistForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::PhonyForm => &FormData {
                names: NamesData {
                    names: [
                        "がんさくフォルム",
                        "Phony Form",
                        "Forme Contrefaçon",
                        "Forma Contraffatta",
                        "Fälschungsform",
                        "Forma Falsificada",
                        "위작폼",
                        "赝品形态",
                        "贗品形態",
                    ],
                },
            },
            Self::AntiqueForm => &FormData {
                names: NamesData {
                    names: [
                        "しんさくフォルム",
                        "Antique Form",
                        "Forme Authentique",
                        "Forma Autentica",
                        "Originalform",
                        "Forma Genuina",
                        "진작폼",
                        "真品形态",
                        "真品形態",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HatennaForm {
    Base,
}
impl HatennaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HattremForm {
    Base,
}
impl HattremForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HattereneForm {
    Base,
    Gigantamax,
}
impl HattereneForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Gigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ImpidimpForm {
    Base,
}
impl ImpidimpForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MorgremForm {
    Base,
}
impl MorgremForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GrimmsnarlForm {
    Base,
    Gigantamax,
}
impl GrimmsnarlForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Gigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ObstagoonForm {
    Base,
}
impl ObstagoonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PerrserkerForm {
    Base,
}
impl PerrserkerForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CursolaForm {
    Base,
}
impl CursolaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SirfetchdForm {
    Base,
}
impl SirfetchdForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MrRimeForm {
    Base,
}
impl MrRimeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RunerigusForm {
    Base,
}
impl RunerigusForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MilceryForm {
    Base,
}
impl MilceryForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum AlcremieForm {
    VanillaCream,
    RubyCream,
    MatchaCream,
    MintCream,
    LemonCream,
    SaltedCream,
    RubySwirl,
    CaramelSwirl,
    RainbowSwirl,
    Gigantamax,
}
impl AlcremieForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::VanillaCream => &FormData {
                names: NamesData {
                    names: [
                        "ミルキィバニラ",
                        "Vanilla Cream",
                        "Lait Vanille",
                        "Lattevaniglia",
                        "Vanille-Creme",
                        "Crema de Vainilla",
                        "밀키바닐라",
                        "奶香香草",
                        "奶香香草",
                    ],
                },
            },
            Self::RubyCream => &FormData {
                names: NamesData {
                    names: [
                        "ミルキィルビー",
                        "Ruby Cream",
                        "Lait Ruby",
                        "Latterosa",
                        "Ruby-Creme",
                        "Crema Rosa",
                        "밀키루비",
                        "奶香红钻",
                        "奶香紅鑽",
                    ],
                },
            },
            Self::MatchaCream => &FormData {
                names: NamesData {
                    names: [
                        "ミルキィまっちゃ",
                        "Matcha Cream",
                        "Lait Matcha",
                        "Lattematcha",
                        "Matcha-Creme",
                        "Crema de Té",
                        "밀키말차",
                        "奶香抹茶",
                        "奶香抹茶",
                    ],
                },
            },
            Self::MintCream => &FormData {
                names: NamesData {
                    names: [
                        "ミルキィミント",
                        "Mint Cream",
                        "Lait Menthe",
                        "Lattementa",
                        "Minz-Creme",
                        "Crema de Menta",
                        "밀키민트",
                        "奶香薄荷",
                        "奶香薄荷",
                    ],
                },
            },
            Self::LemonCream => &FormData {
                names: NamesData {
                    names: [
                        "ミルキィレモン",
                        "Lemon Cream",
                        "Lait Citron",
                        "Lattelimone",
                        "Zitronen-Creme",
                        "Crema de Limón",
                        "밀키레몬",
                        "奶香柠檬",
                        "奶香檸檬",
                    ],
                },
            },
            Self::SaltedCream => &FormData {
                names: NamesData {
                    names: [
                        "ミルキィソルト",
                        "Salted Cream",
                        "Lait Salé",
                        "Lattesale",
                        "Salz-Creme",
                        "Crema Salada",
                        "밀키솔트",
                        "奶香雪盐",
                        "奶香雪鹽",
                    ],
                },
            },
            Self::RubySwirl => &FormData {
                names: NamesData {
                    names: [
                        "ルビーミックス",
                        "Ruby Swirl",
                        "Mélange Ruby",
                        "Rosamix",
                        "Ruby-Mix",
                        "Mezcla Rosa",
                        "루비믹스",
                        "红钻综合",
                        "紅鑽綜合",
                    ],
                },
            },
            Self::CaramelSwirl => &FormData {
                names: NamesData {
                    names: [
                        "キャラメルミックス",
                        "Caramel Swirl",
                        "Mélange Caramel",
                        "Caramelmix",
                        "Karamell-Mix",
                        "Mezcla Caramelo",
                        "캐러멜믹스",
                        "焦糖综合",
                        "焦糖綜合",
                    ],
                },
            },
            Self::RainbowSwirl => &FormData {
                names: NamesData {
                    names: [
                        "トリプルミックス",
                        "Rainbow Swirl",
                        "Mélange Tricolore",
                        "Triplomix",
                        "Trio-Mix",
                        "Tres Sabores",
                        "트리플믹스",
                        "三色综合",
                        "三色綜合",
                    ],
                },
            },
            Self::Gigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FalinksForm {
    Base,
}
impl FalinksForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PincurchinForm {
    Base,
}
impl PincurchinForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SnomForm {
    Base,
}
impl SnomForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FrosmothForm {
    Base,
}
impl FrosmothForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum StonjournerForm {
    Base,
}
impl StonjournerForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum EiscueForm {
    IceFace,
    NoiceFace,
}
impl EiscueForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::IceFace => &FormData {
                names: NamesData {
                    names: [
                        "アイスフェイス",
                        "Ice Face",
                        "Tête de Gel",
                        "Gelofaccia",
                        "Tiefkühlkopf",
                        "Cara de Hielo",
                        "아이스페이스",
                        "结冻头",
                        "結凍頭",
                    ],
                },
            },
            Self::NoiceFace => &FormData {
                names: NamesData {
                    names: [
                        "ナイスフェイス",
                        "Noice Face",
                        "Tête Dégel",
                        "Liquefaccia",
                        "Wohlfühlkopf",
                        "Cara Deshielo",
                        "나이스페이스",
                        "解冻头",
                        "解凍頭",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum IndeedeeForm {
    Male,
    Female,
}
impl IndeedeeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Male => &FormData {
                names: NamesData {
                    names: [
                        "オスのすがた",
                        "Male",
                        "Mâle",
                        "Maschio",
                        "Männlich",
                        "Macho",
                        "수컷의 모습",
                        "雄性的样子",
                        "雄性的樣子",
                    ],
                },
            },
            Self::Female => &FormData {
                names: NamesData {
                    names: [
                        "メスのすがた",
                        "Female",
                        "Femelle",
                        "Femmina",
                        "Weiblich",
                        "Hembra",
                        "암컷의 모습",
                        "雌性的样子",
                        "雌性的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MorpekoForm {
    FullBellyMode,
    HangryMode,
}
impl MorpekoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::FullBellyMode => &FormData {
                names: NamesData {
                    names: [
                        "まんぷくもよう",
                        "Full Belly Mode",
                        "Mode Rassasié",
                        "Motivo Panciapiena",
                        "Pappsattmuster",
                        "Forma Saciada",
                        "배부른 모양",
                        "满腹花纹",
                        "滿腹花紋",
                    ],
                },
            },
            Self::HangryMode => &FormData {
                names: NamesData {
                    names: [
                        "はらぺこもよう",
                        "Hangry Mode",
                        "Mode Affamé",
                        "Motivo Panciavuota",
                        "Kohldampfmuster",
                        "Forma Voraz",
                        "배고픈 모양",
                        "空腹花纹",
                        "空腹花紋",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CufantForm {
    Base,
}
impl CufantForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CopperajahForm {
    Base,
    Gigantamax,
}
impl CopperajahForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Gigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DracozoltForm {
    Base,
}
impl DracozoltForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ArctozoltForm {
    Base,
}
impl ArctozoltForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DracovishForm {
    Base,
}
impl DracovishForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ArctovishForm {
    Base,
}
impl ArctovishForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DuraludonForm {
    Base,
    Gigantamax,
}
impl DuraludonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Gigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DreepyForm {
    Base,
}
impl DreepyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DrakloakForm {
    Base,
}
impl DrakloakForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DragapultForm {
    Base,
}
impl DragapultForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ZacianForm {
    HeroofManyBattles,
    CrownedSword,
}
impl ZacianForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::HeroofManyBattles => &FormData {
                names: NamesData {
                    names: [
                        "れきせんのゆうしゃ",
                        "Hero of Many Battles",
                        "Héros Aguerri",
                        "Eroe di Mille Lotte",
                        "Heldenhafter Krieger",
                        "Guerrero Avezado",
                        "역전의 용사",
                        "百战勇者",
                        "百戰勇者",
                    ],
                },
            },
            Self::CrownedSword => &FormData {
                names: NamesData {
                    names: [
                        "けんのおう",
                        "Crowned Sword",
                        "Épée Suprême",
                        "Re delle Spade",
                        "König des Schwertes",
                        "Espada Suprema",
                        "검왕",
                        "剑之王",
                        "劍之王",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ZamazentaForm {
    HeroofManyBattles,
    CrownedShield,
}
impl ZamazentaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::HeroofManyBattles => &FormData {
                names: NamesData {
                    names: [
                        "れきせんのゆうしゃ",
                        "Hero of Many Battles",
                        "Héros Aguerri",
                        "Eroe di Mille Lotte",
                        "Heldenhafter Krieger",
                        "Guerrero Avezado",
                        "역전의 용사",
                        "百战勇者",
                        "百戰勇者",
                    ],
                },
            },
            Self::CrownedShield => &FormData {
                names: NamesData {
                    names: [
                        "たてのおう",
                        "Crowned Shield",
                        "Bouclier Suprême",
                        "Re degli Scudi",
                        "König des Schildes",
                        "Escudo Supremo",
                        "방패왕",
                        "盾之王",
                        "盾之王",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum EternatusForm {
    Base,
    Eternamax,
    EternamaxGigantamax,
}
impl EternatusForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Eternamax => &FormData {
                names: NamesData {
                    names: [
                        "ムゲンダイマックス",
                        "Eternamax",
                        "Infinimax",
                        "Dynamax Infinito",
                        "Unendynamax",
                        "Dinamax Infinito",
                        "무한다이맥스",
                        "无极巨化",
                        "無極巨化",
                    ],
                },
            },
            Self::EternamaxGigantamax => &FormData {
                names: NamesData {
                    names: [
                        "ムゲンダイマックス",
                        "Eternamax",
                        "Infinimax",
                        "Dynamax Infinito",
                        "Unendynamax",
                        "Dinamax Infinito",
                        "무한다이맥스",
                        "无极巨化",
                        "無極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KubfuForm {
    Base,
}
impl KubfuForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum UrshifuForm {
    SingleStrikeStyle,
    RapidStrikeStyle,
    SingleStrikeGigantamax,
    RapidStrikeGigantamax,
}
impl UrshifuForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::SingleStrikeStyle => &FormData {
                names: NamesData {
                    names: [
                        "いちげきのかた",
                        "Single Strike Style",
                        "Style Poing Final",
                        "Stile Singolcolpo",
                        "Fokussierter Stil",
                        "Estilo Brusco",
                        "일격의 태세",
                        "一击流",
                        "一擊流",
                    ],
                },
            },
            Self::RapidStrikeStyle => &FormData {
                names: NamesData {
                    names: [
                        "れんげきのかた",
                        "Rapid Strike Style",
                        "Style Mille Poings",
                        "Stile Pluricolpo",
                        "Fließender Stil",
                        "Estilo Fluido",
                        "연격의 태세",
                        "连击流",
                        "連擊流",
                    ],
                },
            },
            Self::SingleStrikeGigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
            Self::RapidStrikeGigantamax => &FormData {
                names: NamesData {
                    names: [
                        "キョダイマックス",
                        "Gigantamax",
                        "Gigamax",
                        "Gigamax",
                        "Gigadynamax",
                        "Gigamax",
                        "거다이맥스",
                        "超极巨化",
                        "超極巨化",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ZarudeForm {
    Base,
    Dada,
}
impl ZarudeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Dada => &FormData {
                names: NamesData {
                    names: [
                        "とうちゃん",
                        "Dada",
                        "Papa",
                        "Papà",
                        "Papa",
                        "Papá",
                        "아빠",
                        "阿爸",
                        "阿爸",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RegielekiForm {
    Base,
}
impl RegielekiForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RegidragoForm {
    Base,
}
impl RegidragoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GlastrierForm {
    Base,
}
impl GlastrierForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SpectrierForm {
    Base,
}
impl SpectrierForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CalyrexForm {
    Base,
    IceRider,
    ShadowRider,
}
impl CalyrexForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::IceRider => &FormData {
                names: NamesData {
                    names: [
                        "はくばじょうのすがた",
                        "Ice Rider",
                        "Cavalier du Froid",
                        "Cavaliere Glaciale",
                        "Schimmelreiter",
                        "Jinete Glacial",
                        "백마 탄 모습",
                        "骑白马的样子",
                        "騎白馬的樣子",
                    ],
                },
            },
            Self::ShadowRider => &FormData {
                names: NamesData {
                    names: [
                        "こくばじょうのすがた",
                        "Shadow Rider",
                        "Cavalier d’Effroi",
                        "Cavaliere Spettrale",
                        "Rappenreiter",
                        "Jinete Espectral",
                        "흑마 탄 모습",
                        "骑黑马的样子",
                        "騎黑馬的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum WyrdeerForm {
    Base,
}
impl WyrdeerForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KleavorForm {
    Base,
    LordForm,
}
impl KleavorForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::LordForm => &FormData {
                names: NamesData {
                    names: [
                        "キングのすがた",
                        "Lord Form",
                        "Forme de Roi",
                        "Forma Re",
                        "Königsform",
                        "Forma de Señor",
                        "왕의 모습",
                        "王的样子",
                        "王的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum UrsalunaForm {
    Base,
    Bloodmoon,
}
impl UrsalunaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
            Self::Bloodmoon => &FormData {
                names: NamesData {
                    names: [
                        "アカツキ",
                        "Bloodmoon",
                        "Lune Vermeille",
                        "Luna Cremisi",
                        "Blutmond",
                        "Luna Carmesí",
                        "붉은 달",
                        "赫月",
                        "赫月",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BasculegionForm {
    Male,
    Female,
}
impl BasculegionForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Male => &FormData {
                names: NamesData {
                    names: [
                        "オスのすがた",
                        "Male",
                        "Mâle",
                        "Maschio",
                        "Männlich",
                        "Macho",
                        "수컷의 모습",
                        "雄性的样子",
                        "雄性的樣子",
                    ],
                },
            },
            Self::Female => &FormData {
                names: NamesData {
                    names: [
                        "メスのすがた",
                        "Female",
                        "Femelle",
                        "Femmina",
                        "Weiblich",
                        "Hembra",
                        "암컷의 모습",
                        "雌性的样子",
                        "雌性的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SneaslerForm {
    Base,
}
impl SneaslerForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum OverqwilForm {
    Base,
}
impl OverqwilForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum EnamorusForm {
    IncarnateForme,
    TherianForme,
}
impl EnamorusForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::IncarnateForme => &FormData {
                names: NamesData {
                    names: [
                        "けしんフォルム",
                        "Incarnate Forme",
                        "Forme Avatar",
                        "Forma Incarnazione",
                        "Inkarnationsform",
                        "Forma Avatar",
                        "화신폼",
                        "化身形态",
                        "化身形態",
                    ],
                },
            },
            Self::TherianForme => &FormData {
                names: NamesData {
                    names: [
                        "れいじゅうフォルム",
                        "Therian Forme",
                        "Forme Totémique",
                        "Forma Totem",
                        "Tiergeistform",
                        "Forma Tótem",
                        "영물폼",
                        "灵兽形态",
                        "靈獸形態",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SprigatitoForm {
    Base,
}
impl SprigatitoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FloragatoForm {
    Base,
}
impl FloragatoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MeowscaradaForm {
    Base,
}
impl MeowscaradaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FuecocoForm {
    Base,
}
impl FuecocoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CrocalorForm {
    Base,
}
impl CrocalorForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SkeledirgeForm {
    Base,
}
impl SkeledirgeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum QuaxlyForm {
    Base,
}
impl QuaxlyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum QuaxwellForm {
    Base,
}
impl QuaxwellForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum QuaquavalForm {
    Base,
}
impl QuaquavalForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LechonkForm {
    Base,
}
impl LechonkForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum OinkologneForm {
    Male,
    Female,
}
impl OinkologneForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Male => &FormData {
                names: NamesData {
                    names: [
                        "オスのすがた",
                        "Male",
                        "Mâle",
                        "Maschio",
                        "Männlich",
                        "Macho",
                        "수컷의 모습",
                        "雄性的样子",
                        "雄性的樣子",
                    ],
                },
            },
            Self::Female => &FormData {
                names: NamesData {
                    names: [
                        "メスのすがた",
                        "Female",
                        "Femelle",
                        "Femmina",
                        "Weiblich",
                        "Hembra",
                        "암컷의 모습",
                        "雌性的样子",
                        "雌性的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TarountulaForm {
    Base,
}
impl TarountulaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SpidopsForm {
    Base,
}
impl SpidopsForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum NymbleForm {
    Base,
}
impl NymbleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum LokixForm {
    Base,
}
impl LokixForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PawmiForm {
    Base,
}
impl PawmiForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PawmoForm {
    Base,
}
impl PawmoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PawmotForm {
    Base,
}
impl PawmotForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TandemausForm {
    Base,
}
impl TandemausForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MausholdForm {
    FamilyofThree,
    FamilyofFour,
}
impl MausholdForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::FamilyofThree => &FormData {
                names: NamesData {
                    names: [
                        "３びきかぞく",
                        "Family of Three",
                        "Famille de Trois",
                        "Trifamiglia",
                        "Dreierfamilie",
                        "Familia de Tres",
                        "세 식구",
                        "三只家庭",
                        "三隻家庭",
                    ],
                },
            },
            Self::FamilyofFour => &FormData {
                names: NamesData {
                    names: [
                        "４ひきかぞく",
                        "Family of Four",
                        "Famille de Quatre",
                        "Quadrifamiglia",
                        "Viererfamilie",
                        "Familia de Cuatro",
                        "네 식구",
                        "四只家庭",
                        "四隻家庭",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FidoughForm {
    Base,
}
impl FidoughForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DachsbunForm {
    Base,
}
impl DachsbunForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SmolivForm {
    Base,
}
impl SmolivForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DollivForm {
    Base,
}
impl DollivForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ArbolivaForm {
    Base,
}
impl ArbolivaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SquawkabillyForm {
    GreenPlumage,
    BluePlumage,
    YellowPlumage,
    WhitePlumage,
}
impl SquawkabillyForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::GreenPlumage => &FormData {
                names: NamesData {
                    names: [
                        "グリーンフェザー",
                        "Green Plumage",
                        "Plumage Vert",
                        "Piume Verdi",
                        "Grüngefiedert",
                        "Plumaje Verde",
                        "그린 페더",
                        "绿羽毛",
                        "綠羽毛",
                    ],
                },
            },
            Self::BluePlumage => &FormData {
                names: NamesData {
                    names: [
                        "ブルーフェザー",
                        "Blue Plumage",
                        "Plumage Bleu",
                        "Piume Azzurre",
                        "Blaugefiedert",
                        "Plumaje Azul",
                        "블루 페더",
                        "蓝羽毛",
                        "藍羽毛",
                    ],
                },
            },
            Self::YellowPlumage => &FormData {
                names: NamesData {
                    names: [
                        "イエローフェザー",
                        "Yellow Plumage",
                        "Plumage Jaune",
                        "Piume Gialle",
                        "Gelbgefiedert",
                        "Plumaje Amarillo",
                        "옐로 페더",
                        "黄羽毛",
                        "黃羽毛",
                    ],
                },
            },
            Self::WhitePlumage => &FormData {
                names: NamesData {
                    names: [
                        "ホワイトフェザー",
                        "White Plumage",
                        "Plumage Blanc",
                        "Piume Bianche",
                        "Weißgefiedert",
                        "Plumaje Blanco",
                        "화이트 페더",
                        "白羽毛",
                        "白羽毛",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum NacliForm {
    Base,
}
impl NacliForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum NaclstackForm {
    Base,
}
impl NaclstackForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GarganaclForm {
    Base,
}
impl GarganaclForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CharcadetForm {
    Base,
}
impl CharcadetForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ArmarougeForm {
    Base,
}
impl ArmarougeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CeruledgeForm {
    Base,
}
impl CeruledgeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TadbulbForm {
    Base,
}
impl TadbulbForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BelliboltForm {
    Base,
}
impl BelliboltForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum WattrelForm {
    Base,
}
impl WattrelForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KilowattrelForm {
    Base,
}
impl KilowattrelForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MaschiffForm {
    Base,
}
impl MaschiffForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MabosstiffForm {
    Base,
}
impl MabosstiffForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ShroodleForm {
    Base,
}
impl ShroodleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GrafaiaiForm {
    Base,
}
impl GrafaiaiForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BramblinForm {
    Base,
}
impl BramblinForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BrambleghastForm {
    Base,
}
impl BrambleghastForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ToedscoolForm {
    Base,
}
impl ToedscoolForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ToedscruelForm {
    Base,
}
impl ToedscruelForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KlawfForm {
    Base,
}
impl KlawfForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CapsakidForm {
    Base,
}
impl CapsakidForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ScovillainForm {
    Base,
}
impl ScovillainForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RellorForm {
    Base,
}
impl RellorForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RabscaForm {
    Base,
}
impl RabscaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FlittleForm {
    Base,
}
impl FlittleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum EspathraForm {
    Base,
}
impl EspathraForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TinkatinkForm {
    Base,
}
impl TinkatinkForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TinkatuffForm {
    Base,
}
impl TinkatuffForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TinkatonForm {
    Base,
}
impl TinkatonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum WiglettForm {
    Base,
}
impl WiglettForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum WugtrioForm {
    Base,
}
impl WugtrioForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BombirdierForm {
    Base,
}
impl BombirdierForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FinizenForm {
    Base,
}
impl FinizenForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PalafinForm {
    ZeroForm,
    HeroForm,
}
impl PalafinForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::ZeroForm => &FormData {
                names: NamesData {
                    names: [
                        "ナイーブフォルム",
                        "Zero Form",
                        "Forme Ordinaire",
                        "Forma Ingenua",
                        "Alltagsform",
                        "Forma Ingenua",
                        "나이브폼",
                        "平凡形态",
                        "平凡形態",
                    ],
                },
            },
            Self::HeroForm => &FormData {
                names: NamesData {
                    names: [
                        "マイティフォルム",
                        "Hero Form",
                        "Forme Super",
                        "Forma Possente",
                        "Heldenform",
                        "Forma Heroica",
                        "마이티폼",
                        "全能形态",
                        "全能形態",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum VaroomForm {
    Base,
}
impl VaroomForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RevavroomForm {
    Base,
}
impl RevavroomForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CyclizarForm {
    Base,
}
impl CyclizarForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum OrthwormForm {
    Base,
}
impl OrthwormForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GlimmetForm {
    Base,
}
impl GlimmetForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GlimmoraForm {
    Base,
}
impl GlimmoraForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GreavardForm {
    Base,
}
impl GreavardForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum HoundstoneForm {
    Base,
}
impl HoundstoneForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FlamigoForm {
    Base,
}
impl FlamigoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CetoddleForm {
    Base,
}
impl CetoddleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum CetitanForm {
    Base,
}
impl CetitanForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum VeluzaForm {
    Base,
}
impl VeluzaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DondozoForm {
    Base,
}
impl DondozoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TatsugiriForm {
    CurlyForm,
    DroopyForm,
    StretchyForm,
}
impl TatsugiriForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::CurlyForm => &FormData {
                names: NamesData {
                    names: [
                        "そったすがた",
                        "Curly Form",
                        "Forme Courbée",
                        "Forma Arcuata",
                        "Gebogene Form",
                        "Forma Curvada",
                        "젖힌 모습",
                        "上弓姿势",
                        "上弓姿勢",
                    ],
                },
            },
            Self::DroopyForm => &FormData {
                names: NamesData {
                    names: [
                        "たれたすがた",
                        "Droopy Form",
                        "Forme Affalée",
                        "Forma Adagiata",
                        "Hängende Form",
                        "Forma Lánguida",
                        "늘어진 모습",
                        "下垂姿势",
                        "下垂姿勢",
                    ],
                },
            },
            Self::StretchyForm => &FormData {
                names: NamesData {
                    names: [
                        "のびたすがた",
                        "Stretchy Form",
                        "Forme Raide",
                        "Forma Tesa",
                        "Gestreckte Form",
                        "Forma Recta",
                        "뻗은 모습",
                        "平挺姿势",
                        "平挺姿勢",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum AnnihilapeForm {
    Base,
}
impl AnnihilapeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ClodsireForm {
    Base,
}
impl ClodsireForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FarigirafForm {
    Base,
}
impl FarigirafForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DudunsparceForm {
    TwoSegmentForm,
    ThreeSegmentForm,
}
impl DudunsparceForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::TwoSegmentForm => &FormData {
                names: NamesData {
                    names: [
                        "ふたふしフォルム",
                        "Two-Segment Form",
                        "Forme Double",
                        "Forma Bimetamero",
                        "Zweisegmentform",
                        "Forma Binodular",
                        "두 마디폼",
                        "二节形态",
                        "二節形態",
                    ],
                },
            },
            Self::ThreeSegmentForm => &FormData {
                names: NamesData {
                    names: [
                        "みつふしフォルム",
                        "Three-Segment Form",
                        "Forme Triple",
                        "Forma Trimetamero",
                        "Dreisegmentform",
                        "Forma Trinodular",
                        "세 마디폼",
                        "三节形态",
                        "三節形態",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KingambitForm {
    Base,
}
impl KingambitForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GreatTuskForm {
    Base,
}
impl GreatTuskForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ScreamTailForm {
    Base,
}
impl ScreamTailForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BruteBonnetForm {
    Base,
}
impl BruteBonnetForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FlutterManeForm {
    Base,
}
impl FlutterManeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SlitherWingForm {
    Base,
}
impl SlitherWingForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SandyShocksForm {
    Base,
}
impl SandyShocksForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum IronTreadsForm {
    Base,
}
impl IronTreadsForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum IronBundleForm {
    Base,
}
impl IronBundleForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum IronHandsForm {
    Base,
}
impl IronHandsForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum IronJugulisForm {
    Base,
}
impl IronJugulisForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum IronMothForm {
    Base,
}
impl IronMothForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum IronThornsForm {
    Base,
}
impl IronThornsForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FrigibaxForm {
    Base,
}
impl FrigibaxForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ArctibaxForm {
    Base,
}
impl ArctibaxForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum BaxcaliburForm {
    Base,
}
impl BaxcaliburForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GimmighoulForm {
    ChestForm,
    RoamingForm,
}
impl GimmighoulForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::ChestForm => &FormData {
                names: NamesData {
                    names: [
                        "はこフォルム",
                        "Chest Form",
                        "Forme Coffre",
                        "Forma Scrigno",
                        "Truhenform",
                        "Forma Cofre",
                        "상자폼",
                        "宝箱形态",
                        "寶箱形態",
                    ],
                },
            },
            Self::RoamingForm => &FormData {
                names: NamesData {
                    names: [
                        "とほフォルム",
                        "Roaming Form",
                        "Forme Marche",
                        "Forma Ambulante",
                        "Wanderform",
                        "Forma Andante",
                        "도보폼",
                        "徒步形态",
                        "徒步形態",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum GholdengoForm {
    Base,
}
impl GholdengoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum WoChienForm {
    Base,
}
impl WoChienForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ChienPaoForm {
    Base,
}
impl ChienPaoForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum TingLuForm {
    Base,
}
impl TingLuForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum ChiYuForm {
    Base,
}
impl ChiYuForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum RoaringMoonForm {
    Base,
}
impl RoaringMoonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum IronValiantForm {
    Base,
}
impl IronValiantForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KoraidonForm {
    ApexBuild,
    LimitedBuild,
    SprintingBuild,
    SwimmingBuild,
    GlidingBuild,
}
impl KoraidonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::ApexBuild => &FormData {
                names: NamesData {
                    names: [
                        "かんぜんけいたい",
                        "Apex Build",
                        "Forme Finale",
                        "Foggia Integrale",
                        "Vollkommene Gestalt",
                        "Fisonomía Plena",
                        "완전형태",
                        "完全形态",
                        "完全形態",
                    ],
                },
            },
            Self::LimitedBuild => &FormData {
                names: NamesData {
                    names: [
                        "せいげんけいたい",
                        "Limited Build",
                        "Forme Limitée",
                        "Foggia Parziale",
                        "Gehemmte Gestalt",
                        "Fisonomía Limitada",
                        "제한형태",
                        "制限形态",
                        "制限形態",
                    ],
                },
            },
            Self::SprintingBuild => &FormData {
                names: NamesData {
                    names: [
                        "しっそうけいたい",
                        "Sprinting Build",
                        "Forme de Course",
                        "Foggia Scattante",
                        "Sprintgestalt",
                        "Fisonomía Carrera",
                        "질주형태",
                        "疾驰形态",
                        "疾馳形態",
                    ],
                },
            },
            Self::SwimmingBuild => &FormData {
                names: NamesData {
                    names: [
                        "ゆうえいけいたい",
                        "Swimming Build",
                        "Forme de Nage",
                        "Foggia Nautica",
                        "Schwimmgestalt",
                        "Fisonomía Nado",
                        "유영형태",
                        "破浪形态",
                        "破浪形態",
                    ],
                },
            },
            Self::GlidingBuild => &FormData {
                names: NamesData {
                    names: [
                        "かっくうけいたい",
                        "Gliding Build",
                        "Forme de Vol",
                        "Foggia Librata",
                        "Schwingengestalt",
                        "Fisonomía Planeo",
                        "활공형태",
                        "乘风形态",
                        "乘風形態",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MiraidonForm {
    UltimateMode,
    LowPowerMode,
    DriveMode,
    AquaticMode,
    GlideMode,
}
impl MiraidonForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::UltimateMode => &FormData {
                names: NamesData {
                    names: [
                        "コンプリートモード",
                        "Ultimate Mode",
                        "Mode Ultime",
                        "Assetto Completo",
                        "Kompletter Modus",
                        "Modo Pleno",
                        "컴플리트모드",
                        "完整模式",
                        "完整模式",
                    ],
                },
            },
            Self::LowPowerMode => &FormData {
                names: NamesData {
                    names: [
                        "リミテッドモード",
                        "Low-Power Mode",
                        "Mode Bridé",
                        "Assetto Limitato",
                        "Begrenzter Modus",
                        "Modo Limitado",
                        "리미티드모드",
                        "受限模式",
                        "受限模式",
                    ],
                },
            },
            Self::DriveMode => &FormData {
                names: NamesData {
                    names: [
                        "ドライブモード",
                        "Drive Mode",
                        "Mode Terrestre",
                        "Assetto Sprint",
                        "Fahrmodus",
                        "Modo Conducción",
                        "드라이브모드",
                        "行驶模式",
                        "行駛模式",
                    ],
                },
            },
            Self::AquaticMode => &FormData {
                names: NamesData {
                    names: [
                        "フロートモード",
                        "Aquatic Mode",
                        "Mode Aquatique",
                        "Assetto Nuoto",
                        "Wassermodus",
                        "Modo Flote",
                        "플로트모드",
                        "浮水模式",
                        "浮水模式",
                    ],
                },
            },
            Self::GlideMode => &FormData {
                names: NamesData {
                    names: [
                        "グライドモード",
                        "Glide Mode",
                        "Mode Aérien",
                        "Assetto Planata",
                        "Gleitmodus",
                        "Modo Planeo",
                        "글라이드모드",
                        "滑翔模式",
                        "滑翔模式",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum WalkingWakeForm {
    Base,
}
impl WalkingWakeForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum IronLeavesForm {
    Base,
}
impl IronLeavesForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum DipplinForm {
    Base,
}
impl DipplinForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum PoltchageistForm {
    CounterfeitForm,
    ArtisanForm,
}
impl PoltchageistForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::CounterfeitForm => &FormData {
                names: NamesData {
                    names: [
                        "マガイモノのすがた",
                        "Counterfeit Form",
                        "Forme Imitation",
                        "Forma Taroccata",
                        "Imitationsform",
                        "Forma Fraudulenta",
                        "가짜배기의 모습",
                        "冒牌货的样子",
                        "冒牌貨的樣子",
                    ],
                },
            },
            Self::ArtisanForm => &FormData {
                names: NamesData {
                    names: [
                        "タカイモノのすがた",
                        "Artisan Form",
                        "Forme Onéreuse",
                        "Forma Pregiata",
                        "Kostbarkeitsform",
                        "Forma Opulenta",
                        "알짜배기의 모습",
                        "高档货的样子",
                        "高檔貨的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SinistchaForm {
    UnremarkableForm,
    MasterpieceForm,
}
impl SinistchaForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::UnremarkableForm => &FormData {
                names: NamesData {
                    names: [
                        "ボンサクのすがた",
                        "Unremarkable Form",
                        "Forme Médiocre",
                        "Forma Dozzinale",
                        "Simple Form",
                        "Forma Mediocre",
                        "범작의 모습",
                        "凡作的样子",
                        "凡作的樣子",
                    ],
                },
            },
            Self::MasterpieceForm => &FormData {
                names: NamesData {
                    names: [
                        "ケッサクのすがた",
                        "Masterpiece Form",
                        "Forme Exceptionnelle",
                        "Forma Eccezionale",
                        "Edle Form",
                        "Forma Exquisita",
                        "걸작의 모습",
                        "杰作的样子",
                        "傑作的樣子",
                    ],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum OkidogiForm {
    Base,
}
impl OkidogiForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum MunkidoriForm {
    Base,
}
impl MunkidoriForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum FezandipitiForm {
    Base,
}
impl FezandipitiForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::Base => &FormData {
                names: NamesData {
                    names: ["", "", "", "", "", "", "", "", ""],
                },
            },
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum OgerponForm {
    TealMask,
    WellspringMask,
    HearthflameMask,
    CornerstoneMask,
}
impl OgerponForm {
    pub(crate) fn data(self) -> &'static FormData {
        match self {
            Self::TealMask => &FormData {
                names: NamesData {
                    names: [
                        "みどりのめん",
                        "Teal Mask",
                        "Masque Turquoise",
                        "Maschera Turchese",
                        "Türkisgrüne Maske",
                        "Máscara Turquesa",
                        "벽록의 가면",
                        "碧草面具",
                        "碧草面具",
                    ],
                },
            },
            Self::WellspringMask => &FormData {
                names: NamesData {
                    names: [
                        "いどのめん",
                        "Wellspring Mask",
                        "Masque du Puits",
                        "Maschera Pozzo",
                        "Brunnenmaske",
                        "Máscara Fuente",
                        "우물의 가면",
                        "水井面具",
                        "水井面具",
                    ],
                },
            },
            Self::HearthflameMask => &FormData {
                names: NamesData {
                    names: [
                        "かまどのめん",
                        "Hearthflame Mask",
                        "Masque du Fourneau",
                        "Maschera Focolare",
                        "Ofenmaske",
                        "Máscara Horno",
                        "화덕의 가면",
                        "火灶面具",
                        "火灶面具",
                    ],
                },
            },
            Self::CornerstoneMask => &FormData {
                names: NamesData {
                    names: [
                        "いしずえのめん",
                        "Cornerstone Mask",
                        "Masque de la Pierre",
                        "Maschera Fondamenta",
                        "Fundamentmaske",
                        "Máscara Cimiento",
                        "주춧돌의 가면",
                        "础石面具",
                        "礎石面具",
                    ],
                },
            },
        }
    }
}
