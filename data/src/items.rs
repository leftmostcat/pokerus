use common::Error;

pub use crate::generated::Item;
use crate::{Language, NamesData};

impl Item {
    pub fn try_from_gen_1_idx(idx: u8) -> Result<Self, Error> {
        let value = match idx {
            0x01 => Self::MasterBall,
            0x02 => Self::UltraBall,
            0x03 => Self::GreatBall,
            0x04 => Self::PokeBall,
            0x05 => Self::TownMap,
            0x06 => Self::BikeGreen,

            0x08 => Self::SafariBall,

            0x0a => Self::MoonStone,
            0x0b => Self::Antidote,
            0x0c => Self::BurnHeal,
            0x0d => Self::IceHeal,
            0x0e => Self::Awakening,
            0x0f => Self::ParalyzeHeal,
            0x10 => Self::FullRestore,
            0x11 => Self::MaxPotion,
            0x12 => Self::HyperPotion,
            0x13 => Self::SuperPotion,
            0x14 => Self::Potion,

            0x1d => Self::EscapeRope,
            0x1e => Self::Repel,
            0x1f => Self::OldAmber,
            0x20 => Self::FireStone,
            0x21 => Self::ThunderStone,
            0x22 => Self::WaterStone,
            0x23 => Self::HPUp,
            0x24 => Self::Protein,
            0x25 => Self::Iron,
            0x26 => Self::Carbos,
            0x27 => Self::Calcium,
            0x28 => Self::RareCandy,
            0x29 => Self::DomeFossil,
            0x2a => Self::HelixFossil,
            0x2b => Self::SecretKeyKanto,

            0x2d => Self::BikeVoucher,
            0x2e => Self::XAccuracy,
            0x2f => Self::LeafStone,
            0x30 => Self::CardKeyKanto,
            0x31 => Self::Nugget,

            0x33 => Self::PokeDoll,
            0x34 => Self::FullHeal,
            0x35 => Self::Revive,
            0x36 => Self::MaxRevive,
            0x37 => Self::GuardSpec,
            0x38 => Self::SuperRepel,
            0x39 => Self::MaxRepel,
            0x3a => Self::DireHit,

            0x3c => Self::FreshWater,
            0x3d => Self::SodaPop,
            0x3e => Self::Lemonade,
            0x3f => Self::SSTicketKanto,
            0x40 => Self::GoldTeeth,
            0x41 => Self::XAttack,
            0x42 => Self::XDefense,
            0x43 => Self::XSpeed,
            0x44 => Self::XSpecial,
            0x45 => Self::CoinCase,
            0x46 => Self::ParcelKanto,
            0x47 => Self::DowsingMachine,
            0x48 => Self::SilphScope,
            0x49 => Self::PokeFlute,
            0x4a => Self::LiftKey,
            0x4b => Self::ExpShare,
            0x4c => Self::OldRod,
            0x4d => Self::GoodRod,
            0x4e => Self::SuperRod,
            0x4f => Self::PPUp,
            0x50 => Self::Ether,
            0x51 => Self::MaxEther,
            0x52 => Self::Elixir,
            0x53 => Self::MaxElixir,

            0xc4 => Self::HM01,
            0xc5 => Self::HM02,
            0xc6 => Self::HM03,
            0xc7 => Self::HM04,
            0xc8 => Self::HM05,
            0xc9 => Self::TM001,
            0xca => Self::TM002,
            0xcb => Self::TM003,
            0xcc => Self::TM004,
            0xcd => Self::TM005,
            0xce => Self::TM006,
            0xcf => Self::TM007,
            0xd0 => Self::TM008,
            0xd1 => Self::TM009,
            0xd2 => Self::TM010,
            0xd3 => Self::TM011,
            0xd4 => Self::TM012,
            0xd5 => Self::TM013,
            0xd6 => Self::TM014,
            0xd7 => Self::TM015,
            0xd8 => Self::TM016,
            0xd9 => Self::TM017,
            0xda => Self::TM018,
            0xdb => Self::TM019,
            0xdc => Self::TM020,
            0xdd => Self::TM021,
            0xde => Self::TM022,
            0xdf => Self::TM023,
            0xe0 => Self::TM024,
            0xe1 => Self::TM025,
            0xe2 => Self::TM026,
            0xe3 => Self::TM027,
            0xe4 => Self::TM028,
            0xe5 => Self::TM029,
            0xe6 => Self::TM030,
            0xe7 => Self::TM031,
            0xe8 => Self::TM032,
            0xe9 => Self::TM033,
            0xea => Self::TM034,
            0xeb => Self::TM035,
            0xec => Self::TM036,
            0xed => Self::TM037,
            0xee => Self::TM038,
            0xef => Self::TM039,
            0xf0 => Self::TM040,
            0xf1 => Self::TM041,
            0xf2 => Self::TM042,
            0xf3 => Self::TM043,
            0xf4 => Self::TM044,
            0xf5 => Self::TM045,
            0xf6 => Self::TM046,
            0xf7 => Self::TM047,
            0xf8 => Self::TM048,
            0xf9 => Self::TM049,
            0xfa => Self::TM050,
            0xfb => Self::TM051,
            0xfc => Self::TM052,
            0xfd => Self::TM053,
            0xfe => Self::TM054,
            0xff => Self::TM055,

            _ => return Err(Error::invalid_argument()),
        };

        Ok(value)
    }

    pub fn name(self, language: Language) -> &'static str {
        self.data().names.get(language)
    }
}

pub(crate) struct ItemData {
    pub(crate) names: NamesData,
}
